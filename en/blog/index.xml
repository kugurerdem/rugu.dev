<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ugur</title><link>https://rugu.dev/en/blog/</link><description>Recent content on ugur</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 03 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://rugu.dev/en/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Why I'm Leaving NixOS After a Year?</title><link>https://rugu.dev/en/blog/leaving-nixos/</link><pubDate>Sun, 03 Aug 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/leaving-nixos/</guid><description>&lt;p>Around a year ago, I published a blog post explaining my overall experience &lt;a href="https://www.rugu.dev/en/blog/nixos/">Switching from Arch to NixOS&lt;/a>. You can read it if you&amp;rsquo;re interested in my early experiences, but, to give you a spoiler, that post ends with me saying:&lt;/p>
&lt;blockquote>
&lt;p>Unfortunately, though, I don’t think the benefits I’ve gotten in this one month of using NixOS so far justified the cost I’ve initially spent and continue to spend learning Nix and NixOS. &lt;br>
&amp;mdash; &lt;br>
Ultimately, whether the benefits of learning a particular technology outweigh the costs depends on how much you take full advantage of its features. So, I believe that if I experiment with more setups, try different programs, or start managing servers with Nix, I will begin to see a better return on this investment from what I have learned so far. :)&lt;/p>&lt;/blockquote>
&lt;p>Well, it&amp;rsquo;s been about a year since I published that post. Since then, I&amp;rsquo;ve experimented with more setups, tried different programs, and started managing my own server with NixOS. And&amp;hellip; &lt;strong>Contrary to my initial expectations that I would get a better return on investment from NixOS with more usage, the opposite happened.&lt;/strong>&lt;/p>
&lt;h1 id="the-pain-of-getting-things-to-work">The Pain of Getting Things to Work&lt;/h1>
&lt;p>So you want to try a new program/service? First, you try the NixOS module and see whether it works the way you want. Oh&amp;hellip; it doesn&amp;rsquo;t. Now, you have a few choices:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Try to figure out what&amp;rsquo;s wrong with your current configuration (maybe even read the source code of the NixOS module you&amp;rsquo;re using.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Stick to more standard NixOS modules instead of using the one provided for the program you&amp;rsquo;re trying to install. For example, you might create your a systemd unit file and include the program binary using Nix.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Just use some containerization technology like Docker, or maybe a sandboxing solution like Flatpak (which is exactly what you can do on any typical FHS-based Linux distro.)&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Sometimes, you just can&amp;rsquo;t foresee whether the reason an app isn&amp;rsquo;t running the way you want is due to a problem or limitation in the NixOS module. And if you don&amp;rsquo;t put a time limit on how much you investigate it, you may lose a lot of time. The problem with the second option is that it&amp;rsquo;s not fun to go through that process every time you want to try a new application or service on your system. Especially if it&amp;rsquo;s just because you can&amp;rsquo;t install it the native way, or you just don&amp;rsquo;t like something about the native way. So you end up falling back to the third option, which is something you can just as easily do on any FHS-based distro anyway.&lt;/p>
&lt;p>You need to run a program like Electron in your Node project for your new job, and you try to install it through npm and then run it? Well, guess what. &lt;a href="https://www.rugu.dev/en/blog/nixos-precompiled/">NixOS hates pre-compiled programs&lt;/a>, so you need to learn more about how to resolve this problem while using NixOS. So you&amp;rsquo;re kind of forced to learn about other specific Nix tools (&lt;code>nix-ld&lt;/code>, &lt;code>buildFhsEnv&lt;/code>, creating your derivations, etc.) if you need to use them regardless.&lt;/p>
&lt;p>In an FHS system, you&amp;rsquo;d configure a file and then run the program with that configuration. In NixOS (or home-manager), you now write a DSL based on Nix expressions, which then generates the actual configuration file the program will use. I think this just means another layer to trace when debugging. &lt;strong>When you are using NixOS, and things work, everything works smoothly. It&amp;rsquo;s fine. But when things go wrong, you now have an additional layer to worry about.&lt;/strong> Did you misconfigure something at the NixOS level, or did the config generate correctly but there&amp;rsquo;s an issue with the program itself? And so on&amp;hellip;&lt;/p>
&lt;h1 id="problem-of-leaky-abstractions">Problem of (Leaky) Abstractions&lt;/h1>
&lt;p>I think one of the main issues here is that NixOS just adds an abstraction layer on top of a procedural system. &lt;strong>You interact with it as if it were declarative, but it&amp;rsquo;s not. Under the hood, you&amp;rsquo;re still running programs that were designed for FHS environments, where programs share their libraries, bootstrap themselves, install other precompiled programs, and so on&amp;hellip; I believe that almost all my frustrations with NixOS is due to this phenomenon of abstractions.&lt;/strong>&lt;/p>
&lt;p>As the &lt;a href="https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/">Law of Leaky Abstractions&lt;/a> suggests, &lt;em>&amp;ldquo;All non-trivial abstractions, to some degree, are leaky.&amp;rdquo;&lt;/em> And it turns out that NixOS is not immune to this phenomenon either.&lt;/p>
&lt;p>I would definitely prefer NixOS over an FHS-based Linux distro if it weren&amp;rsquo;t just a wrapper around Linux, but instead its own system with dedicated tooling and native programs. But I also understand how hard it is to build and sustain a community of people developing software specifically for a niche OS. So, it makes sense that NixOS is designed as a Linux distro. It&amp;rsquo;s similar to how Rich Hickey made Clojure run on the JVM and JavaScript runtimes to take advantage of their tooling and ecosystems, despite sharing very little with them in terms of philosophy.&lt;/p>
&lt;p>&lt;strong>But in the end, I feel like the discrepancy between the philosophy of NixOS and the programs and services running under the hood is so great that it is almost impossible to not feel this in some negative way, as a user.&lt;/strong>&lt;/p>
&lt;h1 id="the-time-cost">The Time Cost&lt;/h1>
&lt;p>Well, I like NixOS and Nix&amp;rsquo;s philosophy. That&amp;rsquo;s why I stuck with it for over a year and tried to learn as much as I could despite the frustrations. I also think NixOS delivers on most of its promises, so the issue for me isn’t whether it works or not. It’s also not about whether you can make things work (you can). The problem is: at what cost? Tasks that would take very little time on a traditional FHS-based distro can take significantly longer on NixOS. And I really don’t like that.&lt;/p>
&lt;p>I understand the benefits of reproducibility and so on, but when I think about how much I&amp;rsquo;ve gained from that reproducibility compared to my old dotfiles setup, I realize that I did NOT see any real benefits &lt;strong>in practice&lt;/strong>. I am just sure that configuring and making stuff run the Nix way just takes way more time than just using a regular FHS distro.&lt;/p>
&lt;h1 id="back-to-arch-btw">Back to Arch, BTW&lt;/h1>
&lt;p>I still think that NixOS can be useful for some people who especially HEAVILY rely on syncing configurations across multiple devices and TRULY need system-level reproducibility. But I’m definitely not one of those people. I don’t need reproducibility to the extent that NixOS provides, and &lt;strong>I also realized that I&amp;rsquo;m way more comfortable getting things done in an impure system than dealing with the friction of a pure one that slows me down in almost in every change I do.&lt;/strong>&lt;/p>
&lt;p>So now, I&amp;rsquo;m just back to using Arch Linux, btw.&lt;/p></description></item><item><title>A Problem With Single-File Codebases</title><link>https://rugu.dev/en/blog/against-single-file-codebases/</link><pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/against-single-file-codebases/</guid><description>&lt;p>A friend recently sent me a tweet of Tsoding, a recreational programmer who creates cool videos on YouTube that I also enjoy watching. The tweet is as follows;&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Stop obsessing over splitting code into files. I end up grepping codebases anyway. I literally don&amp;#39;t care where you put your functions. miniaudio.h is a single file with 92k LOC and it&amp;#39;s fine. File is an OS construct anyway. &lt;a href="https://t.co/4zLXGrXEzA">pic.twitter.com/4zLXGrXEzA&lt;/a>&lt;/p>&amp;mdash; Тsфdiиg (@tsoding) &lt;a href="https://twitter.com/tsoding/status/1890333872895774956?ref_src=twsrc%5Etfw">February 14, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>


&lt;p>Although I don&amp;rsquo;t fully agree with him, I understand the message to some extent. That is, you can work just as efficiently in a single file as you would in a repo with split files. I agree that it is possible, especially if you are someone like Tsoding.&lt;/p>
&lt;p>I don&amp;rsquo;t like seeing too many files clustering around like small satellite particles either. I think excessive use of new files is often correlated with some kind of boilerplate being followed (which is very common in Java, C#, or even C++ communities) and with code that&amp;rsquo;s harder to trace. So, I too, usually prefer seeing related code kept together than just seperating them at every chance. That being said, I think, taking this idea of &amp;ldquo;not splitting pieces of code into separate files&amp;rdquo; to extreme is just as bad as those satellites making it harder to trace the code as you need to jump between files all the time.&lt;/p>
&lt;h1 id="the-problem">The Problem&lt;/h1>
&lt;p>&lt;strong>I think the main problem with both single-file and satellite-style codebases is that it&amp;rsquo;s far easier for the person who wrote them to operate on them than it is for others trying to get adjusted.&lt;/strong> That&amp;rsquo;s because the original author already has an idea of what kinds of functions exist in the codebase, so they can just grep for things and navigate easily.&lt;/p>
&lt;p>&lt;strong>Reading a codebase when you already know what exists beforehand, and reading one when you have no idea what you&amp;rsquo;re going to encounter until you read it, is a HUGE difference. It&amp;rsquo;s easy to overlook this and assume your code is simple to understand, especially if you&amp;rsquo;re the one who wrote it recently.&lt;/strong>&lt;/p>
&lt;p>Let&amp;rsquo;s say you&amp;rsquo;ve just joined a backend project and you are expected to develop a new endpoint. Compare a system where files are organized hierarchically according to their relevant topics (db, api, routes, entrypoint) with a system where there is a single, very long file. Which one do you think would be faster for you to figure out which places to start trying to understand for the feature you want to develop?&lt;/p>
&lt;p>&lt;img src="https://rugu.dev/en/blog/against-single-file-codebases/files-comparison.png" alt="image">&lt;/p>
&lt;p>If you go with the first approach, you&amp;rsquo;ll likely need to skim through the entire file to figure out where to add your new feature. But with the second approach, it&amp;rsquo;s usually obvious where to look first. You might even be able to implement the feature without ever touching the other files.&lt;/p>
&lt;p>Also, let&amp;rsquo;s not forget that in addition to the cognitive benefits of using split files over a single long file, there are also practical advantages: splitting your codebase into multiple files reduces the likelihood of version control conflicts and allows AI tools to index and analyze your code more effectively.&lt;/p>
&lt;h1 id="finishing-notes">Finishing Notes&lt;/h1>
&lt;p>Among the projects I worked on this year, there were two I took over that involved these kinds of large single-file codebases. These were by far among the hardest codebases to adapt to. The mental burden was significantly greater compared to projects where the code was separated into modules across different files. I wouldn&amp;rsquo;t say these single-file projects were especially complex or difficult. They weren&amp;rsquo;t. And I wouldn&amp;rsquo;t say the total lines of code were higher than in the more modular projects I&amp;rsquo;ve worked on, because they weren&amp;rsquo;t either. I think the main issue is that jumping into a large block of code without any clear structure or signposting just makes it harder to navigate.&lt;/p>
&lt;p>Which, I believe, is true not just in programming, but in reading in general. Imagine having to read a textbook without titles, chapters, or any structure. &lt;strong>Files may be &amp;ldquo;OS-level constructs anyway&amp;rdquo;, but so are many other constructs from different domains that are useful and helpful to us.&lt;/strong>&lt;/p></description></item><item><title>Making JavaScript Simple Again (With The HyperScript Function)</title><link>https://rugu.dev/en/blog/making-js-simple/</link><pubDate>Sun, 29 Jun 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/making-js-simple/</guid><description>&lt;p>This essay presents a list of reflections on my attempts to create a simple workflow for building front-end applications using vanilla JavaScript. I first discuss what it was like to code when I first started programming and the things that I enjoyed about it. Then I walk through several approaches I tried in the pursuit of simplicity and also share the problems I ran into meanwhile. Later, I show how we can make use of libraries such as &lt;a href="https://github.com/hyperhype/hyperscript">Hyperscript&lt;/a> and &lt;a href="https://github.com/snabbdom/snabbdom">Snabbdom&lt;/a> to resolve those issues without giving up on our simplicity ideals.&lt;/p>
&lt;p>I don&amp;rsquo;t aim to convince anyone to adopt the workflows presented in this essay but simply to share my experience with others who might share the same concerns about simplicity.&lt;/p>
&lt;h1 id="when-javascript-was-just-javascript">When JavaScript Was Just JavaScript&lt;/h1>
&lt;p>I remember the times back in high school when I used to build recreational projects &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> just for fun. I&amp;rsquo;d write everything directly in the browser, sometimes maybe everything in one big &lt;code>index.html&lt;/code> file. No build tools. No frameworks. No libraries. Just plain HTML. Some CSS. And native JavaScript. The code quality was terrible. Global variables are everywhere. Different functions would change the shared state in a way making it very hard to trace what was going on. Bad variable names are all over the place. Not following a consistent writing style, etc. I wasn’t aware of the &amp;ldquo;best practices&amp;rdquo; I am aware of now. YET, despite my incompetency in the subject, I was able to build things that genuinely interested me using only the limited native JavaScript tools I had. And the good part was that I was able to understand what was going on!&lt;/p>
&lt;p>I&amp;rsquo;m not entirely sure, but I have a sense that it&amp;rsquo;s become harder to develop an understanding of the tools we commonly use. If that&amp;rsquo;s true, it&amp;rsquo;s especially weird given how available educational resources are today. JavaScript itself also hasn&amp;rsquo;t become more complex in recent years. I think what changed might be that people have been led to believe (largely through marketing) that they can&amp;rsquo;t build anything without powerful and complex tools.&lt;/p>
&lt;p>While I believe most of these frameworks and libraries exist not just because of marketing but also because they genuinely serve a purpose, I think they&amp;rsquo;re often oversold. It&amp;rsquo;s worth remembering that simpler approaches can sometimes be just as effective, especially, when the requirements of your app are also dead simple.&lt;/p>
&lt;p>Again, I don&amp;rsquo;t want to try to convince anyone to not use frameworks or stuff like that, I use popular frameworks &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in many projects. I don&amp;rsquo;t think using frameworks is a matter of do or don&amp;rsquo;t but more like &amp;ldquo;Does the value provided by this tool justify the costs?&amp;rdquo;&lt;/p>
&lt;p>In the end, I want this essay to function as a kind of reminder of you can also build stuff in native js, especially if it&amp;rsquo;s already something simple.&lt;/p>
&lt;h1 id="what-makes-vanilla-js-appealing">What Makes Vanilla JS Appealing&lt;/h1>
&lt;p>I use React for most of the paid projects I work on. I&amp;rsquo;m not a fan of it as I believe it introduces a lot of accidental complexities &lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>, yet, I find it provides enough value for me to use it on real projects.&lt;/p>
&lt;p>I like building hobby projects occasionally, but, I don&amp;rsquo;t like the idea of having to use a package manager just to install certain tools to transpile my source code from one format to another. Sure, it&amp;rsquo;s not a mountain to climb, but it feels unnecessary when you can just write a code, and run it on the browser directly.&lt;/p>
&lt;p>This is why for personal projects with simple requirements, I just like to use vanilla JavaScript. No build tools, no package managers, no transpilers. No frameworks to deal with its weirdities. It is just your code. Serving is dead simple. Iteration speed is good. Anyone who has a decent understanding of JS can also read and understand your code, whereas, I suspect it&amp;rsquo;s harder to understand a framework that you did not learn before. When your source is what you serve, this also simplifies continuous deployment a lot.&lt;/p>
&lt;p>I believe you can admit that there is a HUGE difference in terms of simplicity between serving the source directly and adding an extra few steps to it.&lt;/p>
&lt;h1 id="structuring-vanilla-js-projects">Structuring Vanilla JS Projects&lt;/h1>
&lt;p>Vanilla JavaScript doesn&amp;rsquo;t enforce any particular style or architectural decisions on your code. You&amp;rsquo;re free to organize things however you like. But, I think it&amp;rsquo;s still better to stick to some consistent preferences rather than make ad hoc decisions each time. That way, you spend less time later trying to figure out things like &amp;ldquo;What was I trying to do here?&amp;rdquo; when revisiting your own code.&lt;/p>
&lt;p>Since I find it very simple and straightforward, I personally like to structure my code in a way that loosely resembles &lt;a href="https://guide.elm-lang.org/architecture/">Elm’s Model-View-Update (MVU) architecture&lt;/a>.&lt;/p>
&lt;div style="text-align: center;">
&lt;img src="https://guide.elm-lang.org/architecture/buttons.svg" alt="elm-mvu">
&lt;/div>

&lt;p>For those who’ve never heard of Elm and its MVU architecture, you can think of it as a design pattern where the application is divided into three parts: a &lt;strong>Model (your app’s state)&lt;/strong>, a &lt;strong>View (a function that renders the UI from the model)&lt;/strong>, and an &lt;strong>Update function (which modifies the model based on events)&lt;/strong>.&lt;/p>
&lt;p>To imitate this architecture in vanilla JavaScript, I typically implement:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Model&lt;/strong> by defining the application’s state as a plain JavaScript object.&lt;/li>
&lt;li>&lt;strong>View&lt;/strong> by creating a function that takes the current model and returns a DOM tree or HTML string.&lt;/li>
&lt;li>&lt;strong>Update&lt;/strong> by writing functions that handle user input by updating the model and triggering a re-render.&lt;/li>
&lt;/ol>
&lt;div style="text-align: center;">
&lt;img src="mvu.png" alt="mvu">
&lt;/div>

&lt;p>Here is an example &amp;ldquo;Counter&amp;rdquo; program that uses this architecture:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Model (App state)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// View
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">Header&lt;/span>()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">Counter&lt;/span>()&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#e6db74">`&amp;lt;header&amp;gt;&amp;lt;h1&amp;gt;Counter App&amp;lt;/h1&amp;gt;&amp;lt;/header&amp;gt;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#e6db74">`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;p&amp;gt;Count: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;button onclick=&amp;#34;increment()&amp;#34;&amp;gt;Increment&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;button onclick=&amp;#34;decrement()&amp;#34;&amp;gt;Decrement&amp;lt;/button&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;lt;/div&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">decrement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">render&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are a few things I like about this architecture: it’s straightforward, and also, easy to trace. You have your model, a view function that returns the UI based on that model, and update functions that handle events. That&amp;rsquo;s it. You also don&amp;rsquo;t need to learn any complex tools or libraries to get understand what&amp;rsquo;s going on.&lt;/p>
&lt;p>I’ve already built quite a few small recreational projects &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> using this approach, and it worked well.&lt;/p>
&lt;h2 id="some-problems">Some Problems&lt;/h2>
&lt;p>Despite its simplicity, I think this approach has some important problems:&lt;/p>
&lt;ol>
&lt;li>Re-rendering the entire view on every update is very inefficient.&lt;/li>
&lt;li>Global functions like &lt;code>increment()&lt;/code> and &lt;code>decrement()&lt;/code> on &lt;code>window&lt;/code> via inline onclick handlers &lt;code>(onclick=&amp;quot;increment()&amp;quot;)&lt;/code> is not idiomatic in modern JS.&lt;/li>
&lt;/ol>
&lt;p>Now, to address the inefficient re-rendering problem, we could re-implement our &lt;code>render&lt;/code> function so that it can also render only specific parts of the DOM. For example, it might take a selector and a component function, and update just that part of the UI.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Partial render function
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">renderPart&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">selector&lt;/span>, &lt;span style="color:#a6e22e">componentFn&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#a6e22e">selector&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">target&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">componentFn&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, I think this would just be a bad practice as now you’d not only need to call render from inside your event listeners but also figure out exactly which component needs to be re-rendered. This kindof creates a coupling between your event handling and rendering logic.&lt;/p>
&lt;p>And for the issue of global listener functions, we basically have no alternative but to abandon defining event handlers in the HTML and instead attach listeners to the required DOM elements on each re-render. Which, also is not a really good practice for the same inefficiency reasons I just explained above.&lt;/p>
&lt;p>We could address this by switching from returning &lt;code>innerHTML&lt;/code> strings to constructing and returning real DOM elements using &lt;code>document.createElement&lt;/code>. That would let us attach event listeners more idiomatically and avoid global functions altogether. However, I believe that doing so would decrease the overall development experience (DX).&lt;/p>
&lt;p>For example, if we avoided using the &lt;code>innerHTML&lt;/code> approach and instead just used native DOM manipulation, the source code of the simple counter application we designed above would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Model (App state)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// View
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">Header&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">container&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">Counter&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">container&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;header&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">h1&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;h1&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h1&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Counter App&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">header&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">h1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">header&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">wrapper&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">countDisplay&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">countDisplay&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`Count: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">incButton&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">incButton&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Increment&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">incButton&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">decButton&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">decButton&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Decrement&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">decButton&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wrapper&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">countDisplay&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wrapper&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">incButton&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">wrapper&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">decButton&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">wrapper&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Render
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">render&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">App&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We got rid of the global functions but now the number of lines of code increased by about 1.5 times! It&amp;rsquo;s also harder to read. And, less fun to write.&lt;/p>
&lt;p>I think it would be nice to have an alternative approach where the code we write is compact just like the &lt;code>innerHTML&lt;/code> approach but also can self-contain certain logic such as which event handlers to use, etc. Well, the good thing is that the &lt;a href="https://github.com/hyperhype/hyperscript">hyperscript&lt;/a> function already does this, and its implementation is only around 150 lines of code!&lt;/p>
&lt;h1 id="meet-hyperscript-for-creating-dom-elements">Meet HyperScript for Creating DOM Elements&lt;/h1>
&lt;p>So, the hyperscript function, &lt;code>h&lt;/code>, is a very simple function that is used for creating and returning a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element">DOM Element&lt;/a>. It takes a tag name, an optional properties object, and any number of children as its inputs. This way, we can get rid of lots of boilerplate from our code.&lt;/p>
&lt;p>For example, instead of;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">btn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">createElement&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">btn&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Click me&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">btn&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;click&amp;#39;&lt;/span>, () =&amp;gt; &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Clicked!&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can now just:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">btn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">on&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () =&amp;gt; &lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Clicked!&amp;#39;&lt;/span>) } }, &lt;span style="color:#e6db74">&amp;#39;Click me&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is similar to our initial approach of returning string literals. They are both declarative. That is to say, the function’s inputs by themselves are enough to describe the DOM tree you want. Another good thing with this approach is that it allows us to write more idiomatic code compared to creating component functions that return string literals: We&amp;rsquo;re working directly with JavaScript values and structures. We&amp;rsquo;re not building strings, so we avoid things like manual string concatenation. We can define event listener functions inline when creating elements, instead of relying on global functions. And so on&amp;hellip;&lt;/p>
&lt;p>Do you remember the Counter app we wrote earlier? Now, with the &lt;code>h&lt;/code> function, we can just write it as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Model
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// View
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {}, &lt;span style="color:#a6e22e">Header&lt;/span>(), &lt;span style="color:#a6e22e">Counter&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;header&amp;#39;&lt;/span>, {}, &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;h1&amp;#39;&lt;/span>, {}, &lt;span style="color:#e6db74">&amp;#39;Counter App&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div&amp;#39;&lt;/span>, {}, [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;p&amp;#39;&lt;/span>, {}, &lt;span style="color:#e6db74">`Count: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span> }, &lt;span style="color:#e6db74">&amp;#39;Increment&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;button&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">decrement&lt;/span> }, &lt;span style="color:#e6db74">&amp;#39;Decrement&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Update
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">increment&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">decrement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">render&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">appendChild&lt;/span>(&lt;span style="color:#a6e22e">App&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">render&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This solution is just as compact and declarative as our initial string literal approach. It also has the benefits of the native DOM API, since it&amp;rsquo;s just a utility wrapper around it. It kind of offers the best worlds of two approaches.&lt;/p>
&lt;h1 id="improving-performance-with-snabbdom">Improving Performance with Snabbdom&lt;/h1>
&lt;p>Well, we have solved many problems by introducing the &lt;code>h&lt;/code> function but we still have the inefficient rendering problem: The &lt;code>render&lt;/code> function still creates a whole new DOM tree and re-renders everything from scratch each time it is called.&lt;/p>
&lt;p>One good thing about hyperscript is its clean interface &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>. Because of this, many popular frameworks (like React, Vue, Mithril, and Snabbdom) implement a function that follows the same pattern. Some call it &lt;code>h&lt;/code>, some &lt;code>m&lt;/code>, some &lt;code>React.createElement&lt;/code> &lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>, but the input and output are the same.&lt;/p>
&lt;p>Thanks to this, we can simply use a library like &lt;a href="https://github.com/snabbdom/snabbdom">Snabbdom&lt;/a>, which provides its own &lt;code>h&lt;/code> function with the same interface but returns virtual nodes instead of DOM Elements and exports a patch function for efficient rendering.&lt;/p>
&lt;p>Just import the &lt;code>h&lt;/code> function from Snabbdom instead of the original hyperscript library, and update the render function as follows;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Render using Snabbdom&amp;#39;s patch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">vnode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">render&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">newVnode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vnode&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">patch&lt;/span>(&lt;span style="color:#a6e22e">vnode&lt;/span> &lt;span style="color:#f92672">||&lt;/span> document.&lt;span style="color:#a6e22e">body&lt;/span>, &lt;span style="color:#a6e22e">newVnode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>patch&lt;/code> function uses a diffing algorithm to determine which parts of the UI have changed and updates only those in the real DOM.&lt;/p>
&lt;p>Voila! That&amp;rsquo;s it! We have also solved the inefficient rendering problem.&lt;/p>
&lt;h1 id="example-template-for-starting-out">Example Template for Starting Out&lt;/h1>
&lt;p>If you&amp;rsquo;d like to try this approach yourself, I&amp;rsquo;ve created a minimal template repository: &lt;a href="https://github.com/kugurerdem/snabbdom-starter">&lt;strong>snabbdom-starter&lt;/strong>&lt;/a>. You can either clone the repo and build on top of it or simply use the &lt;strong>“Use this template”&lt;/strong> option on GitHub to start your project.&lt;/p>
&lt;p>This approach is a relatively recent addition to my workflow. It is the result of experimenting with the approaches described above, running into their limitations, and looking for small ways to improve them. I&amp;rsquo;m sure there are still many things to be improved, but even in its current state, I believe it can prove useful for those who value minimal workflows with as few moving parts as possible.&lt;/p>
&lt;p>As a real-world example, I recently built &lt;a href="https://hnstats.rugu.dev/">&lt;strong>HN Domain Stats&lt;/strong>&lt;/a> using this approach. You can also check out its &lt;a href="https://github.com/kugurerdem/hn-domain-stats">&lt;strong>source code&lt;/strong>&lt;/a> to see how it all comes together.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://kugurerdem.github.io/physics-v0/">Physics Simulator&lt;/a>, &lt;a href="https://kugurerdem.github.io/text-machine/">Text Machine&lt;/a>, &lt;a href="https://kugurerdem.github.io/conway-s-game-of-life/">Conway&amp;rsquo;s Game of Life&lt;/a>, &lt;a href="https://kugurerdem.github.io/Running-Game/">Running Game&lt;/a> were among those &amp;ldquo;recreational&amp;rdquo; programs that I built in high school. There is also, &lt;a href="https://kugurerdem.github.io/canvas-js-experiments/">My Canvas JS Experiments&lt;/a>.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>These include, Vanilla JS, JQuery, React, Next.js, Vue3, Nuxt.js, and even those other solutions that are written in other languages (like using Reagent and Clojurescript) but in the end transpile into Javascript. CSS Modules, Tailwind. Static site generators such as Hugo.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>I think functional React components and hooks are good examples of these accidental complexities. Certain hook rules can feel really unintuitive and arbitrary to those who are new to React. For example, why can&amp;rsquo;t we just conditionally use hooks?&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>&lt;a href="https://github.com/kugurerdem/quick-link-github">Quick Links for Github&lt;/a>, &lt;a href="https://wisdom.rugu.dev">Wisdom Page&lt;/a> and &lt;a href="https://kugurerdem.github.io/sudoku/">Sudoku Game&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Simple, declarative, composable.&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>If you’ve used React before, whether you wrote it directly or had a transpiler convert your JSX into it, you’ve already used a hyperscript function via &lt;a href="https://react.dev/reference/react/createElement">React.createElement&lt;/a>.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Introducing: HackerNews Domain Stats</title><link>https://rugu.dev/en/blog/hnstats/</link><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/hnstats/</guid><description>&lt;p>You can quickly try the app through &lt;a href="https://hnstats.rugu.dev">hnstats.rugu.dev&lt;/a> &lt;br>
Or, see the source code &lt;a href="https://github.com/kugurerdem/hn-domain-stats">kugurerdem/hn-domain-stats&lt;/a>&lt;/p>
&lt;hr>
&lt;p>I like hanging out on Hacker News, reading essays. I also enjoy submitting essays I like that haven’t already been shared there. This way, the author gets recognition and others get to read something they might enjoy too. Plus, more karma never hurts. 😀&lt;/p>
&lt;p>For that, I&amp;rsquo;ve been using an extension called &lt;a href="https://github.com/pinoceniccola/what-hn-says-webext">What HN Says&lt;/a>. The extension basically lets you see whether an HN discussion already exists for the page you&amp;rsquo;re viewing. If it does, it lists them and lets you open them in a new tab; If not, it makes submitting the link easy by opening the HN submission page with the title and URL prefilled. Despite being a simple app, I&amp;rsquo;ve been using it for a while and enjoying it.&lt;/p>
&lt;p>Recently, I thought the same Algolia API that this extension uses could also be used for constructing additional analytics related to a specific domains. These analytics could be anything like: The total number of upvotes and comments the domain has received so far, how much time has passed since its first submission, how many unique users have submitted links from it, a graph of submission, upvote, and comment counts over time, and so on.&lt;/p>
&lt;p>I&amp;rsquo;d certainly be interested in seeing HN analytics for my own site from time to time. I looked out whether such an app already exists or not, but after not finding one, I thought why not develop one?&lt;/p>
&lt;p>So, here, I introduce &lt;a href="hnstats.rugu.dev">HN Domain Stats&lt;/a>. It is a very simple application that analyzes and visualizes how domains perform on Hacker News over time.&lt;/p>
&lt;p>Here&amp;rsquo;s what the app looks like after analyzing a domain (in this case, rugu.dev):&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kugurerdem/hn-domain-stats/refs/heads/master/overview.png" alt="Overview">&lt;/p>
&lt;p>If there are any features you&amp;rsquo;d like to see, feel free to reach me out through &lt;a href="https://github.com/kugurerdem/hn-domain-stats">issues&lt;/a> or e-mail.&lt;/p>
&lt;p>Also, I would appreciate any feedback if you&amp;rsquo;re willing to share one.&lt;/p></description></item><item><title>Rethinking AI Pessimism</title><link>https://rugu.dev/en/blog/ai-pessimism/</link><pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/ai-pessimism/</guid><description>&lt;p>I frequently come across people thinking, &amp;lsquo;Why bother learning something if AI will do it better than me in the future?&amp;rsquo; Alongside this thought, I also noticed a rise in pessimism.&lt;/p>
&lt;p>I believe this pessimism originates from three misconceptions: (1) overlooking the difference between instrumental and intrinsic value, (2) underestimating our ability to adapt to change, and (3) losing sight of what essentially matters.&lt;/p>
&lt;h2 id="focus-more-on-intrinsic-value">Focus More on Intrinsic Value&lt;/h2>
&lt;p>Some things need to be done by specifically you. Not because they can&amp;rsquo;t be done by other beings, but because they are good for you when you do it yourself.&lt;/p>
&lt;p>&lt;strong>You don’t exercise to lift things machines can already lift, you exercise to improve your health and life satisfaction. The same thing applies to fundamental activities like thinking and learning.&lt;/strong> The moment you start outsourcing what matters to you to AI just because it can do it on your behalf, remember that you may be sacrificing, instead of gaining.&lt;/p>
&lt;p>In the end, I believe the things AI devalues the first are those that derive their worth from being tools, that is to say, things that shouldn’t end in themselves anyway.&lt;/p>
&lt;p>For the things that &lt;em>should&lt;/em> be ends in themselves, AI doesn’t change how you should approach them. You still need to exercise and take care of your diet for health, do your meditation, engage with philosophy for a meaningful life, and strive to understand important things especially the fundamentals of the domains on which you are operating.&lt;/p>
&lt;p>AI might reduce the value of learning in some instrumental areas, but it mostly won&amp;rsquo;t diminish the value of understanding itself. Given that the thing that you are trying to understand is meaningful.&lt;/p>
&lt;h2 id="you-can-adapt">You Can Adapt&lt;/h2>
&lt;p>Yes, as AI advances. Some skills lose their value over time. But that doesn’t mean learning them is pointless.&lt;/p>
&lt;p>Some skills are valuable for a specific period, but it can still make sense to invest time in them. Think about foremen, they often learn the specific details of machines that may become outdated in the future, yet their value in some countries is higher than ever.&lt;/p>
&lt;p>Also, humans are adaptable creatures. If the skills you’re learning now lose value and new ones become important, you can start learning those as well. Nothing is preventing you from adapting. Also, these changes don’t happen overnight. They occur gradually. So, people often overlook that they can adapt and adjust their direction over time.&lt;/p>
&lt;h2 id="dont-lose-sight-of-what-matters">Don&amp;rsquo;t Lose Sight of What Matters&lt;/h2>
&lt;p>If we ever reach a point where learning and understanding become meaningless, we’ll likely face much bigger existential problems than unemployment.&lt;/p>
&lt;p>Understanding the world, adapting to it, and striving to improve ourselves have been the best things we could do since the first days of humanity. Honestly, there&amp;rsquo;s still nothing better we can do now.&lt;/p>
&lt;p>So, instead of thinking, &amp;lsquo;AI will take our jobs, so why bother?&amp;rsquo; focus on improving yourself. Not because AI can&amp;rsquo;t surpass you, but because &lt;strong>there’s simply no better path than continuous self-improvement, no matter what the future holds.&lt;/strong> If there’s any meaning to life, I believe it’s deeply connected to this pursuit of growth and understanding.&lt;/p>
&lt;blockquote>
&lt;p>We cannot live better than in seeking to become better.&lt;/p>
&lt;p>-Socrates&lt;/p>&lt;/blockquote>
&lt;p>Focus on the method that proved itself so far. Which is working hard and focusing on creating value.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>The value of self-improvement and meaningful work goes beyond utility. It is tied to our sense of purpose and fulfillment.&lt;/p>
&lt;p>Focus on what you can control: Your curiosity, adaptability, and drive to create value.&lt;/p></description></item><item><title>The AI Productivity Trap</title><link>https://rugu.dev/en/blog/ai-productivity-trap/</link><pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/ai-productivity-trap/</guid><description>&lt;p>For me, whether AI can be beneficial or not is out of the question, and I am not here to discuss that in much detail. I already heavily use tools like &lt;code>aider&lt;/code> (a terminal-based alternative to Cursor), autocompletion assistants such as &lt;code>copilot&lt;/code>, and conversational LLMs like &lt;code>claude&lt;/code>, &lt;code>chatgpt&lt;/code>, and &lt;code>deepseek&lt;/code> all the time. So, I truly believe there’s immense value these tools can provide, and I’m not here to discourage anyone from using them. They’ve already proven their worth to me in many ways.&lt;/p>
&lt;p>However, the thing is, &lt;strong>no matter how much AI increases our productivity, at the end of the day, that productivity increase is a multiplier of our existing productivity.&lt;/strong> The key determining factor remains how well we have mastered the basics and our productivity level without AI, not with it. This is also partly why I believe that existing AI tools are much more useful for people who are already experienced in a field than for newcomers.&lt;/p>
&lt;h1 id="the-illusion-of-improvement">The Illusion of Improvement&lt;/h1>
&lt;p>When someone first starts using AI and experiences a productivity boost, they might find themselves completing more tasks in less time than before. This can create the illusion that they have improved. But in reality, the multiplier effect on their base productivity can also lead to a decline in their capabilities. &lt;strong>Yes, you can achieve more results in the same amount of time, but this also means you can achieve the same results with less effort. Less effort means less time spent on self-improvement.&lt;/strong> And humans have a natural tendency to spend as little energy as possible.&lt;/p>
&lt;p>A fitting analogy would be the invention of cars. The invention of cars allowed us to travel greater distances. But since we could travel greater distances with less effort, they also have led to muscle atrophy for many, as they no longer needed to rely on their leg muscles. I strongly suspect that over-dependence on AI could lead to similar consequences.&lt;/p>
&lt;p>The fact that some new graduates struggle to write code without LLM support is a clear example of this phenomenon. How these tools impact our learning is a very important topic to further discuss. &lt;strong>If the short-term productivity gains is harming the learning process, I would rather not use AI at all and rely on my own skills than relying on AI&lt;/strong>, which is yet another external dependency.&lt;/p>
&lt;p>Hopefully, it should still be possible to benefit from the good sides of AI while keeping the side effects in control. Just as using cars does not prevent us from still working out our legs.&lt;/p>
&lt;p>Make sure you’re not relying on AI so much that you’re not just outsourcing tasks but also the process of learning. Occasionally write code without using AI tools to keep your skills sharp. Be cautious about the suggestions AI tools give you. I’ve found AI more helpful for tasks I already understand well but don’t want to do myself. However, when I use it in areas I’m not familiar with, the code often becomes messy. &lt;strong>The quality of the answers you get depends on the quality of your prompts, which depends on how well you know the topic.&lt;/strong> So, always give more priority to actually learning the concepts that you are working on top off.&lt;/p>
&lt;p>Again, the main idea to take away here is that AI mostly acts as a multiplier on your existing productivity and that you have to prioritize your base productivity levels rather than your AI-enhanced productivity levels.&lt;/p></description></item><item><title>Just Write.</title><link>https://rugu.dev/en/blog/write/</link><pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/write/</guid><description>&lt;p>I can&amp;rsquo;t remember when I truly realized the power of writing. But as far as I remember, I&amp;rsquo;ve been trying to use writing as a tool for putting order to the chaos in my mind since high school.&lt;/p>
&lt;p>Currently, I have a diary with about 325 pages—assuming each page consists of 500 words. &lt;em>(And there’s probably at least an equal amount other writings I wrote for different purposes but deleted in the end.)&lt;/em> The first entry dates back to 2017, meaning I’ve been writing regularly for around 8 years. That’s a lot of time, but I don’t regret a single moment. Because I know for sure that the positive impact writing has had on my mind far outweighs the effort.&lt;/p>
&lt;p>Whenever I face a problem that requires tough decision-making, I typically open a new entry in my diary and start typing whatever comes to mind. After flushing out whatever is in my mind at that moment, I then start organizing it. Sometimes, this process results in definitive answers to my questions, and sometimes, not. Either way, I still have a clear outline of the choices available and a better understanding of their potential benefits and costs.&lt;/p>
&lt;p>I also write to my diary whenever I feel strong emotions, or emotions that I am not sure what they are about. Sometimes, I just try to write the things that happened, how I feel and so on, and even while doing so I can understand myself better just realizing certain patterns that appear in my thoughts &amp;amp; feelings over time. This may not have been possible if I had not documented them in the first place.&lt;/p>
&lt;p>Writing things down is like moving thoughts from your temporary memory to a persistent one. :)&lt;/p>
&lt;p>I started to experience frustrating back pain in 2024, mostly due to being sedentary for around a year or so with very bad spine hygiene. At some point, the pain was so bad that even sitting for around 30 minutes or so without pain was kind of a challenge. The moments after I would wake up, the experience of pain would start to build up as long as I didn&amp;rsquo;t stay lying down.&lt;/p>
&lt;p>One of the recommendations in the book &lt;a href="https://www.goodreads.com/book/show/63221240-back-mechanic">Back Mechanic&lt;/a> was to keep a journal specifically for back pain. It suggested tracking things like how long it took for the pain to start, what activities made the pain worse or better, and so on. I started this practice during that time. I wrote almost daily, analyzing the patterns of my pain. Over time, I started noticing patterns I wouldn’t have recognized or would have likely forgotten without documenting them. This habit became one of the key practices that helped me improve my back.&lt;/p>
&lt;p>So, writing in the form of journaling is already great for:&lt;/p>
&lt;ul>
&lt;li>Flushing the things on your mind to a more persistent place&lt;/li>
&lt;li>Documenting small but cumulative changes that might otherwise go unnoticed&lt;/li>
&lt;li>Solidifying your ideas and emotions as you structure them into a clear and coherent form&lt;/li>
&lt;/ul>
&lt;p>But the thing is, you don’t have to stop here. As writing becomes a habit and a natural part of your life, you’ll also likely end up writing things that might be of interest or helpful to other people as well. This could include notes you take for yourself, reflections on how to get a certain task done, your experiences, and so on&amp;hellip;&lt;/p>
&lt;p>With some rephrasing, structuring, and refinement, the things you write for yourself can also become valuable to others. This way, you can also further benefit from other people&amp;rsquo;s perspectives, feedback, and recognition. You can test your ideas in the real world. You can experience the satisfaction of helping other people through your writing and more.&lt;/p>
&lt;p>You’ll also likely get better at writing and delivering content more quickly. This will prove itself to be helpful especially when communicating and discussing ideas with others.&lt;/p>
&lt;p>So, I urge you to &lt;strong>just start to write, and see how it affects your life in general.&lt;/strong>&lt;/p></description></item><item><title>I've been a guest on Brodie Robertson's Podcast</title><link>https://rugu.dev/en/blog/brodie-podcast/</link><pubDate>Sat, 04 Jan 2025 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/brodie-podcast/</guid><description>&lt;p>I recently wrote a short essay called &lt;a href="https://rugu.dev/en/blog/linux-asceticism/">Linux Asceticism&lt;/a>, and it got a lot of attention on platforms like Hacker News and Reddit. I also received an email from &lt;a href="https://www.youtube.com/@BrodieRobertson">Brodie Robertson&lt;/a>, telling me that he would soon release a &lt;a href="https://www.youtube.com/watch?v=I3VS75MVaEc">video&lt;/a> on his main channel about my essay. He also invited me to be a guest on his &lt;a href="https://www.youtube.com/playlist?list=PLi5KJGW6pBiVqZCxuwebauKxHRmL54y9-">Tech Over Tea&lt;/a> podcast series.&lt;/p>
&lt;p>It really surprised me to see a Linux content creator that I was already following not only featuring my essay but also inviting me to his podcast to discuss it. Despite not trusting my English speaking abilities as much as my writing, I told him I’d love to be a guest. I shared my concerns about not being very fluent in English and wanting to prepare beforehand. We briefly talked about the podcast format, and the topics we could cover, and set a date for the recording.&lt;/p>
&lt;p>You can watch/listen to the Podcast here:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/w_4B6ZGOzPo?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;p>We talked about how I came up with the Linux Asceticism essay, my Linux journey and workflow, &amp;ldquo;Software Minimalism,&amp;rdquo; and the idea of &lt;a href="https://www.arp242.net/stupid-light.html">stupid light software&lt;/a>. We also covered the difference between essential and accidental complexity, creating personal blogs, my experience with NixOS, and some of the other essays I’ve written.&lt;/p>
&lt;h2 id="reflections">Reflections&lt;/h2>
&lt;p>At first, the idea of joining a podcast channel in a language that I was not as confident as my native language felt a bit stressful. I also had never been a guest on any YouTube channel before, let alone a channel that has over 10k+ subscribers. So, that also did not help much. But, I figured out that preparing could help me ease my stress. So, I prepared a lot before the day that the recording of the podcast took place. I started thinking, writing through possible topics we might discuss. I also asked one of my friends &lt;a href="https://github.com/iag99">Aras&lt;/a> to interview me like he is Brodie, which also helped me relieve my stress a bit more.&lt;/p>
&lt;p>While preparing for the podcast, I ended up with a file of around 9 pages if you consider each page to have around 500 words.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&amp;gt; cat brodie-prep.md | wc -w
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">4614&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the end, I did not talk about most of the things I prepared for, but it still helped me a lot to feel ready.&lt;/p>
&lt;p>I also realized that giving a disclaimer about my English skills upfront would help ease the pressure by lowering the audience&amp;rsquo;s expectations. So, I went ahead and did that too.&lt;/p>
&lt;p>In the end, the actual podcast experience was much smoother and less stressful than I had expected. Despite frequent misspellings and struggles expressing myself, I believe the podcast turned out to be better than my initial expectations. I think this is also partly thanks to Brodie being an experienced host who knows how to make the guests comfortable by keeping the setting relaxed as well.&lt;/p>
&lt;p>But again, all these experiences reminded me of one of the famous Stoic quotes;&lt;/p>
&lt;blockquote>
&lt;p>We suffer more often in imagination than in reality.&lt;br>
- Seneca&lt;/p>&lt;/blockquote>
&lt;p>I think it was a great experience overall. And I also plan to turn some of the notes I&amp;rsquo;ve taken in the preparation document into separate essays as well.&lt;/p></description></item><item><title>NixOS Hates Precompiled Programs (Learn How To Fix It)</title><link>https://rugu.dev/en/blog/nixos-precompiled/</link><pubDate>Sat, 21 Dec 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/nixos-precompiled/</guid><description>&lt;p>I&amp;rsquo;ve been using NixOS for about six months and am generally satisfied with my experience. However, in this essay, I won&amp;rsquo;t talk about how great NixOS is, but rather about one common issue that many users, including myself, have faced or will face in the future.&lt;/p>
&lt;p>&lt;strong>In NixOS, most pre-compiled programs will not work out of the box.&lt;/strong> In this essay, I’ll share my experiences on this issue and explain why it happens, along with some approaches I’ve found very helpful to overcome it. Hopefully, this will help others avoid some of the frustrations I’ve encountered.&lt;/p>
&lt;h1 id="the-problem">The Problem&lt;/h1>
&lt;p>Let&amp;rsquo;s say that you&amp;rsquo;re working on a project. Maybe using Node. You decide to try out a library. You write some code. And then, once you try to run your script, you get the following error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">Error&lt;/span>: Failed to launch the browser process!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/home/rugu/.cache/puppeteer/chrome/linux-&lt;span style="color:#ae81ff">131&lt;/span>.&lt;span style="color:#ae81ff">0&lt;/span>.&lt;span style="color:#ae81ff">6778&lt;/span>.&lt;span style="color:#ae81ff">108&lt;/span>/chrome-linux64/chrome: error while loading shared libraries: libdbus-&lt;span style="color:#ae81ff">1&lt;/span>.so.&lt;span style="color:#ae81ff">3&lt;/span>: cannot open shared object.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Being a smart person, you suspect this might be related to NixOS. You begin researching the issue, only to find people suggesting case-specific solutions such as &lt;a href="https://www.reddit.com/r/NixOS/comments/1gzygtd/comment/lz1qd0t">[1]&lt;/a> and &lt;a href="https://www.reddit.com/r/NixOS/comments/1gzygtd/comment/lz5cq99">[2]&lt;/a>. Sure, in this case, using the Chromium installed on your system instead of the built-in version that comes with Puppeteer, and specifying the &lt;code>executablePath&lt;/code> property to its path in your Node code when initializing Puppeteer can save the day.&lt;/p>
&lt;p>&lt;strong>But as a smart person, you also understand that this is a case-specific solution and wonder what you would do if the library that you use did not allow such flexibility.&lt;/strong>&lt;/p>
&lt;p>The problem is that, while case-specific solutions like the one mentioned above may work, you can still encounter the same issue whenever you try to run a precompiled program that expects certain files and libraries to be located in specific paths on your filesystem.&lt;/p>
&lt;p>So, as I said in the beginning of the essay, &lt;strong>in NixOS, most pre-compiled programs will not work out of the box.&lt;/strong> And now we need to understand why this happens so that we can also understand the solutions better.&lt;/p>
&lt;h2 id="why-it-happens">Why it happens?&lt;/h2>
&lt;p>Most UNIX-like systems follow the &lt;a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">Filesystem Hierarchy Standard&lt;/a> (FHS), which defines where programs can find resources or place files. For example, system-wide configuration files are typically in &lt;code>/etc&lt;/code>, executables in &lt;code>/bin&lt;/code> or &lt;code>/usr/bin&lt;/code>, and shared libraries in &lt;code>/lib&lt;/code> or &lt;code>/usr/lib&lt;/code>, and so on&amp;hellip;&lt;/p>
&lt;p>The problem with this approach, and part of why some people prefer systems like NixOS, is that it tends to be messy: The files are scattered across the system, there is no single source of truth, the structure relies on conventions rather than strict enforcement, you can have problems such as version conflicts across different programs that rely on different versions of the same programs, and so on.&lt;/p>
&lt;p>The approach that the Nix tools take to resolve these issues is to store every package under a folder called &lt;code>/nix/store&lt;/code>, in a way that each package has its isolated file structures instead of relying on shared directories. We can say that this directory is a &lt;a href="https://en.wikipedia.org/wiki/Merkle_tree">Merkle tree&lt;/a>: package paths are derived from hashes of their contents, dependencies, and inputs. And, if any of these things change, the path for the package also changes.&lt;/p>
&lt;p>Now, even when using tools built around &lt;code>/nix/store&lt;/code> (such as the &lt;code>Nix package manager&lt;/code>, &lt;code>nix-build&lt;/code>, &lt;code>nix-shell&lt;/code>, or &lt;code>home-manager&lt;/code>), you can still modify most system files imperatively and apply &amp;ldquo;dirty&amp;rdquo; solutions in certain parts of your system. However, once you switch to NixOS, the &lt;code>/nix/store&lt;/code> management approach extends to the entire system, including system files, universally shared resources, shared libraries, and so on.&lt;/p>
&lt;p>This is why precompiled programs designed for conventional UNIX systems usually don&amp;rsquo;t work in NixOS. These programs expect specific libraries to be located in certain paths, but NixOS manages system dependencies and files in a self-contained manner within &lt;code>/nix/store&lt;/code>. As a result, most of these programs can&amp;rsquo;t find what they need unless they are packaged with Nix, run in an environment that mimics FHS or are guided by NixOS itself.&lt;/p>
&lt;h2 id="dynamic-linking">Dynamic Linking&lt;/h2>
&lt;p>When you run a precompiled program that depends on shared libraries (those not statically built into the program but loaded at runtime), the dynamic linker (&lt;code>ld.so&lt;/code> on Linux) is invoked to load the necessary libraries.&lt;/p>
&lt;p>The linker checks a set of directories, like &lt;code>/lib&lt;/code>, &lt;code>/usr/lib&lt;/code>, and others specified in environment variables such as &lt;code>LD_LIBRARY_PATH&lt;/code>, to find the required libraries. It also performs caching to help speed up the loading of dynamic libraries.&lt;/p>
&lt;p>In the case of &lt;code>puppeteer&lt;/code> or similar programs, the program is precompiled and expects certain dynamic libraries. However, the linker cannot find these libraries.&lt;/p>
&lt;h1 id="workarounds">Workarounds&lt;/h1>
&lt;p>The solutions I&amp;rsquo;ve come across so far to work around this problem are:&lt;/p>
&lt;p>(1) Look for whether the program you are trying to run is already available in &lt;a href="https://search.nixos.org/packages">nixpkgs&lt;/a> &lt;br>
(2) Package the program you want to run as a Nix derivation with the necessary dependencies. &lt;br>
(3) Use the Nix derivation function &lt;a href="https://ryantm.github.io/nixpkgs/builders/special/fhs-environments">buildFHSEnv&lt;/a> &lt;br>
(4) Use the &lt;a href="https://search.nixos.org/options?channel=24.11&amp;amp;show=programs.nix-ld">nix-ld&lt;/a> options in NixOS.&lt;/p>
&lt;p>Among these options, (1) is typically the best solution. If the program you&amp;rsquo;re trying to run is already packaged in &lt;code>nixpkgs&lt;/code> (which is often the case), it saves you a lot of time.&lt;/p>
&lt;p>Unfortunately, though, there will be times when you can&amp;rsquo;t find what you need in &lt;code>nixpkgs&lt;/code>. In that case, (2) — building your own Nix derivation — is also an option. It&amp;rsquo;s helpful to the community, and it&amp;rsquo;s also the most modular approach as a package in the &lt;code>nixpkgs&lt;/code> repository can still work on a traditional UNIX system without a &lt;code>home-manager&lt;/code> or &lt;code>NixOS&lt;/code>. The downside is that this approach will likely take more time than the other options.&lt;/p>
&lt;p>If you are short on time, or not that much of an altruistic person, you can consider using (3) or (4).&lt;/p>
&lt;p>The &lt;code>buildFHSEnv&lt;/code> function allows you to create an environment that mimics the traditional UNIX filesystem hierarchy (FHS), you can then use this environment, in a nix-shell for example. This enables you to place your program and its dependencies in expected locations like &lt;code>/usr/bin&lt;/code> or &lt;code>/lib&lt;/code> without fully packaging it.&lt;/p>
&lt;p>On the other hand, &lt;code>nix-ld&lt;/code> (option 4) is a NixOS-specific solution that helps with dynamic linking. It ensures the program can find the libraries in &lt;code>/nix/store&lt;/code> without needing to rebuild or repackage everything.&lt;/p>
&lt;p>If you&amp;rsquo;re in a non-NixOS environment and don&amp;rsquo;t want to mess with your shared libraries, &lt;code>buildFHSEnv&lt;/code> might be the way to go. But if you&amp;rsquo;re already using NixOS, I think &lt;code>nix-ld&lt;/code> just makes more sense. It resolves the issue at the same layer where it originated, NixOS itself. You can specify the libraries that you want to be available on your whole system in your &lt;code>configuration.nix&lt;/code> file, and can also use &lt;code>NIX_LD*&lt;/code> &lt;a href="https://github.com/nix-community/nix-ld?tab=readme-ov-file#usage">environment variables&lt;/a>, for example maybe with &lt;code>shell.nix&lt;/code> to make certain libraries available in the ephemeral shell that you intend to work in without affecting your global system.&lt;/p>
&lt;p>Whichever option you choose, except for the first one, you&amp;rsquo;ll still need to figure out which Nix packages to install to make the necessary libraries available to the program.&lt;/p>
&lt;h2 id="finding-which-packages-to-install">Finding which packages to install&lt;/h2>
&lt;p>To find the necessary Nixpkgs packages for dynamic libraries, you can use tools like &lt;code>ldd&lt;/code>, &lt;code>nix-index&lt;/code>, and &lt;code>nix-locate&lt;/code>.&lt;/p>
&lt;p>Run &lt;code>ldd&lt;/code> on the executable to list the shared libraries it needs. Then, you can use &lt;code>nix-locate&lt;/code> to find the corresponding Nixpkgs packages. But, to use &lt;code>nix-locate&lt;/code>, you first need to run &lt;code>nix-index&lt;/code> or use a pre-generated &lt;code>nix-index&lt;/code> database (like I did, since &lt;code>nix-index&lt;/code> consumed a lot of memory on my system for some reason).&lt;/p>
&lt;p>Now, the issue with &lt;code>nix-locate&lt;/code> is that it can return a lot of results. Not just those that provide it, but also the ones that depend on it. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>I&lt;span style="color:#f92672">]&lt;/span> rugu@nixos ~/bin&lt;span style="color:#f92672">&amp;gt;&lt;/span> nix-locate libdbus-&lt;span style="color:#ae81ff">1&lt;/span>.so.&lt;span style="color:#ae81ff">3&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#a6e22e">wc&lt;/span> &lt;span style="color:#a6e22e">-l&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">206&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We would not want most of these packages. So, to resolve this issue, I&amp;rsquo;ve experimented with &lt;code>nix-locate&lt;/code> a bit and found the following specific flags to narrow down the results to what we essentially want:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>I&lt;span style="color:#f92672">]&lt;/span> rugu@nixos ~&lt;span style="color:#f92672">&amp;gt;&lt;/span> nix-locate &lt;span style="color:#a6e22e">--top-level&lt;/span> &lt;span style="color:#a6e22e">--whole-name&lt;/span> &lt;span style="color:#a6e22e">--minimal&lt;/span> &lt;span style="color:#a6e22e">--at-root&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/lib/libdbus-1.so.3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">dbus&lt;/span>.lib
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Great, this means that for &amp;ldquo;libdbus-1.so.3&amp;rdquo;, we can just install &lt;code>dbus&lt;/code> package from Nixpkgs!&lt;/p>
&lt;p>To automate the process of finding dynamic libraries using &lt;code>ldd&lt;/code> and then using &lt;code>nix-locate&lt;/code> to identify which Nixpkgs provides them, I created a &lt;a href="https://github.com/kugurerdem/nix-config/blob/23f0ae804112672e1c8c334efa126b410ed874d7/home-manager/dotfiles/.local/bin/nixldd">small script&lt;/a>. It lists the dynamic libraries and which nixpkgs provide them, all at once. To use it, you can simply run it as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>nixldd $PROGRAM_PATH
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example (I didn&amp;rsquo;t include the full output because it&amp;rsquo;s too long):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fish" data-lang="fish">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>I&lt;span style="color:#f92672">]&lt;/span> rugu@nixos ~/bin&lt;span style="color:#f92672">&amp;gt;&lt;/span> nixldd /home/rugu/.cache/puppeteer/chrome/linux-&lt;span style="color:#ae81ff">131&lt;/span>.&lt;span style="color:#ae81ff">0&lt;/span>.&lt;span style="color:#ae81ff">6778&lt;/span>.&lt;span style="color:#ae81ff">108&lt;/span>/chrome-linux64/chrome
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">libdl&lt;/span>.so.&lt;span style="color:#ae81ff">2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iconv&lt;/span> glibc_multi glibc_memusage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">libpthread&lt;/span>.so.&lt;span style="color:#ae81ff">0&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">saw-tools&lt;/span> iconv glibc_multi glibc_memusage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">libc&lt;/span>.so.&lt;span style="color:#ae81ff">6&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">iconv&lt;/span> glibc_multi glibc_memusage
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, we know which Nix packages to install to provide the required dynamic libraries.&lt;/p>
&lt;p>I also considered creating a tool that returns the optimal combination of packages to install, but could not find time to work on it yet. Maybe I can try to do that in the future.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>So, these were some of the insights and tricks I’ve learned over time about making precompiled programs work in NixOS while using it in my development environment. I hope they help you as well.&lt;/p></description></item><item><title>Linux Asceticism</title><link>https://rugu.dev/en/blog/linux-asceticism/</link><pubDate>Sun, 10 Nov 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/linux-asceticism/</guid><description>&lt;p>Most well-known living philosophies -such as Cynicism, Epicureanism, Stoicism, Buddhism, and Sufism- advocate some form of &lt;a href="https://en.wikipedia.org/wiki/Asceticism">Asceticism&lt;/a>. This could involve various acts such as fasting, deliberately confronting personal fears, or even something as subtle as choosing not to pour salt on food. But regardless of the specific way that these practices are pursued, the main goal remains the same: Strengthening your body and mind to make yourself indifferent to and indifferent from the things that are outside your control. That is to say, turn yourself into someone who can handle hardships with as few possessions as possible.&lt;/p>
&lt;p>When people argue for using Linux, they often focus on either political or practical reasons. For instance, they may choose Linux because it supports the principles of software freedom and personal control. They may also choose it for reasons such as cost savings, customizability, flexibility to meet specific needs, performance, tool availability, and so on.&lt;/p>
&lt;p>However, there’s another often-overlooked aspect that can make using a minimal Linux distribution worthwhile: &lt;strong>using a minimal Linux distro on your personal computer is a form of &lt;a href="https://en.wikipedia.org/wiki/Asceticism#Etymology_and_meaning">Askesis&lt;/a>&lt;/strong> -disciplined practices done for self-improvement. At first, it will probably feel uncomfortable and overwhelming. You’ll face many problems that you’ll need to solve. But you’ll also come to realize and understand better that many of the features you take for granted in an OS with a preconfigured desktop environment are actually separate components that need to exist on your system for you to have that functionality.&lt;/p>
&lt;p>There will be times that you might need to understand what a network interface is, what a block device is, what mounting is, how keyboard mappings are handled differently on the virtual console or in a desktop environment/window manager, and so on. It will force you to learn more and more and you’ll also begin to appreciate the underlying elements that are often hidden away by the layers we rely on. This effect will be amplified especially if you like to tinker and try to make things happen as you want them to be.&lt;/p>
&lt;p>In the end, you&amp;rsquo;ll gain a deeper understanding of what happens under the hood. Your comfort zone will broaden as you develop the mindset of solving problems. &lt;strong>I know that this kind of reasoning is not as forceful as the pragmatic or ideological reasons for some people, but it still is a good bonus that further motivated me to learn more and more about Linux.&lt;/strong>&lt;/p>
&lt;p>For the last few years, I&amp;rsquo;ve been mainly using Arch Linux as my choice of personal OS, and for the past few months, I&amp;rsquo;ve been using NixOS. Although I have not used/tried MacOS yet, I guess that if I tried it, most of the skills I acquired through using Linux would carry over to it and I would not have much problems getting adapted to it. However, I’m not so sure about the other way around, especially for those who switch from Windows to Linux.&lt;/p>
&lt;blockquote>
&lt;p>If you&amp;rsquo;re going to fight in the rain, train in the storm.&lt;br>
- Unknown&lt;/p>&lt;/blockquote>
&lt;p>I think it&amp;rsquo;s good to have tools in our toolbox that let us work minimally, but I also think it does not make much sense to use them all the time if there are already other tools available to achieve things in an easier and faster way. &lt;strong>So I am not against using non-minimal software by any means. They are fine as long as they don&amp;rsquo;t introduce more problems than they solve.&lt;/strong>&lt;/p></description></item><item><title>Lessons from Plain Text</title><link>https://rugu.dev/en/blog/plain-text/</link><pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/plain-text/</guid><description>&lt;p>When you interact with a text file using an editor, what you see doesn&amp;rsquo;t necessarily reflect the data stored in the file. Sure, the contents of plain text files are byte codes encoded in formats like ASCII, UTF8, or UTF16, and these byte codes are the ultimate source of truth. But in the end, it&amp;rsquo;s still your text editor that chooses how to interpret and represent that ultimate source of truth - binary codes into something recognizable to you. &lt;strong>This means that two different files could look the same, or the same file might appear differently depending on the editor(s) you use.&lt;/strong>&lt;/p>
&lt;p>Your text editor might highlight (or not) certain parts based on syntax it recognizes, it can control how tabs appear (2 spaces, 4 spaces, or even 8). It decides how to encode the tab key input, whether as &lt;code>\t&lt;/code> or as a set number of spaces. The same applies when you press the enter key to create a new line—whether it gets encoded as &lt;code>\n&lt;/code> (UNIX), or &lt;code>\r\n&lt;/code> (Windows) depends on the editor&amp;rsquo;s configuration.&lt;/p>
&lt;p>&lt;strong>Your text editor hides details so you don’t have to overthink. However, there are many times when these details leak through the protection layer that your text editor tries to provide. And you often don&amp;rsquo;t notice these complexities until you face them.&lt;/strong>&lt;/p>
&lt;p>So, the main goal of this essay is to share some of my experiences and what I&amp;rsquo;ve learned over time about common problems you might encounter with plain text.&lt;/p>
&lt;h2 id="tabs-vs-spaces">Tabs vs Spaces&lt;/h2>
&lt;p>Historically speaking, spaces existed long before tabs. The &lt;a href="https://en.wikipedia.org/wiki/Tab_key">reason&lt;/a> why tabs were initially developed was to reduce the repetitive use of both the space bar and backspace key.&lt;/p>
&lt;p>However, people still debate using tabs or spaces in their projects. &lt;strong>This isn&amp;rsquo;t about whether we should use the tab key itself, but rather whether text editors should insert spaces or tabs when we press it,&lt;/strong> that is to say how to encode the blank spaces we see in our editor when we press tab key.&lt;/p>
&lt;p>I guess the main advantage of tabs over spaces is the flexibility it provides. When using tabs, you can collaborate with many different people who prefer to see different levels of indentation, without having to expose their preferences over others. (Sure, there is also the fact that tab character takes less space, but I don&amp;rsquo;t think this makes much of a difference, especially considering that we are in 2024.)&lt;/p>
&lt;p>One problem with tabs, though, is precise editing. Since tabs represent multiple spaces at once, aligning lines may not work as one expects from time to time.&lt;/p>
&lt;p>Like, what you perfectly see as OK in one editor where tabs are configured to take 4 columns, can be disgusting in another editor where tabs are configured to take 2 columns:&lt;/p>
&lt;p>Editor 1 with tabs configured to take 4 spaces:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 4 tabs, + 3 spaces
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Some logic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Editor 2 with tabs configured to take 2 spaces:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 4 tabs, + 3 spaces
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>, &lt;span style="color:#a6e22e">d&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Some logic
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is also partly the reason why I use spaces most of the time. If you still end up adjusting the tab width to match others&amp;rsquo; preferences, what&amp;rsquo;s the purpose of using tabs in the first place?&lt;/p>
&lt;p>I don&amp;rsquo;t know whether this is just due to &lt;a href="https://en.wikipedia.org/wiki/First-mover_advantage">first-mover advantage&lt;/a> or not but it also looks like more projects use &lt;a href="https://insanelab.com/blog/notes/spaces-vs-tabs/">spaces over tabs&lt;/a>. So what&amp;rsquo;s the point of going against the tide where there does not seem to be a very powerful advantage anyway?&lt;/p>
&lt;p>With all that said, I still believe that in many cases this conversation is somewhat overkill and often doesn&amp;rsquo;t make a significant practical difference. In the end, what truly matters is whether the codebase is consistent—either using tabs or spaces throughout. Aside from that, it shouldn&amp;rsquo;t matter much since these settings can be easily configured in many environments anyway.&lt;/p>
&lt;h2 id="soft-wrapping-vs-hard-wrapping">Soft Wrapping vs Hard Wrapping&lt;/h2>
&lt;p>When using plain text, there will come a point when the text you write becomes too long. In many text editors (Notepad, Notepad++, Neovim, or even VSCode), the default behavior is for the text to continue growing horizontally until you press Enter to create a new line break. This can be somewhat unuser-friendly compared to most email or messaging clients, where the text automatically wraps, making it much easier to read.&lt;/p>
&lt;p>To be more clear, let me show you what non-wrapped and wrapped texts look like.&lt;/p>
&lt;hr>
&lt;p>The text that is not wrapped:&lt;/p>
&lt;pre tabindex="0">&lt;code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent fermentum felis nec elit bibendum, sit amet tempus sapien volutpat. Sed eu congue massa, non condimentum diam. Aenean vel consectetur odio. Suspendisse nec diam ac nisl bibendum tempor. Ut rutrum maximus velit, commodo consectetur nulla auctor ac. Curabitur neque dui, scelerisque in facilisis at, sagittis quis massa. Ut non tempor arcu. Vivamus elit massa, pulvinar vitae tellus ut, lobortis sagittis elit. Aenean vehicula varius eros, vitae pellentesque lorem consequat non. Aenean gravida velit id pellentesque tempor. Aenean ut purus nulla. Curabitur fringilla felis consequat ante condimentum porta. Curabitur id ex in libero rhoncus lobortis sit amet ac ligula.
&lt;/code>&lt;/pre>&lt;p>The text that is wrapped:&lt;/p>
&lt;pre tabindex="0">&lt;code>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent fermentum
felis nec elit bibendum, sit amet tempus sapien volutpat. Sed eu congue massa,
non condimentum diam. Aenean vel consectetur odio. Suspendisse nec diam ac nisl
bibendum tempor. Ut rutrum maximus velit, commodo consectetur nulla auctor ac.
Curabitur neque dui, scelerisque in facilisis at, sagittis quis massa. Ut non
tempor arcu. Vivamus elit massa, pulvinar vitae tellus ut, lobortis sagittis
elit. Aenean vehicula varius eros, vitae pellentesque lorem consequat non.
Aenean gravida velit id pellentesque tempor. Aenean ut purus nulla. Curabitur
fringilla felis consequat ante condimentum porta. Curabitur id ex in libero
rhoncus lobortis sit amet ac ligula.
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>As you can see, the wrapped text is a lot easier to read compared to the unwrapped one. This is why many people follow the practice of inserting newlines after a certain number of characters is reached (often around 78). In fact, in the text editor I use, Neovim, it is as simple as just pressing &lt;code>gq&lt;/code> for this line-wrapping procedure to happen for the current line you are in.&lt;/p>
&lt;p>This procedure of putting actual newlines between text so that it looks wrapped is known as hard-wrapping. This was what I did for a while as well, but since you are wrapping a line into multiple lines just because you can read it more easily in the text editor, you now have the following problems:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It&amp;rsquo;s frustrating to constantly hard-wrap the text manually, even if you have a shortcut.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>If you copy the wrapped text this way and paste it into another application, like your favorite messaging app, it will likely look unpleasant, especially on smaller devices like smartphones.&lt;/strong> This happens because when the screen size is reduced, the messaging app will make sure each line is wrapped again if they don&amp;rsquo;t fit the vertical window size. I recommend reading &lt;a href="https://www.arp242.net/email-wrapping.html">The problems with hard wrapping email body text&lt;/a> to understand this phenomenon a bit better.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Once you start adding actual newlines into your text just to make it more readable, you are sacrificing greppability.&lt;/strong> You can think of the term &amp;ldquo;greppability&amp;rdquo; as a way to describe how well the text is suited for efficient searching through tools like grep. In the case of hard-wrapped text, if you search a sentence that is split across multiple lines, the search/find tools like grep might just fail since they usually operate on a line-by-line basis.
&lt;br>
&lt;br>
This idea of greppability is so important and time-saving especially when working on a code-base. For example, in general, it is not very optimal to split your error message or log messages into multiple lines as you lose greppability. See &lt;a href="https://morizbuesing.com/blog/greppability-code-metric/">Greppability is an underrated code metric&lt;/a>, if you are further interested.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So, what&amp;rsquo;s the solution? &lt;strong>Stop hard-wrapping and just use soft-wrapping&lt;/strong>, many modern text editors already provide soft-wrapping solutions. This is what I have started to do recently. I am sure there are ways to achieve it in many modern editors. In Neovim it is as simple as to use the following commands:&lt;/p>
&lt;pre tabindex="0">&lt;code>:set linebreak
:set wrap
:set columns=80
&lt;/code>&lt;/pre>&lt;h2 id="newline">Newline&lt;/h2>
&lt;p>Let&amp;rsquo;s say that you are collaborating with other people through Git, and you just changed one line of code in a file and then pushed it to a branch. And suddenly, your colleagues started complaining about how your commit diff looks like you&amp;rsquo;ve changed the entire file.&lt;/p>
&lt;p>In this case, if you are not sure what&amp;rsquo;s going on, you might find yourself spending some time just to realize that it is your text editor that automatically converts all the line break characters to its format.&lt;/p>
&lt;p>I had a few friends who used VSCode as their main text editor and experienced the same issue. They were very confused the first time they encountered this kind of issue. Luckily, I was there to help them understand what was going on. :)&lt;/p>
&lt;p>I’m going to take a step back in time, but please bear with me for a bit.&lt;/p>
&lt;p>A long time ago, before monitors were common, people interacted with computers using these cool devices known as &lt;a href="https://en.wikipedia.org/wiki/Teleprinter">teleprinters&lt;/a>. These were devices that combined a keyboard for input and a printer for output. You would type stuff, and when you send your command to the computer, you would get the results just like this:&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/AwqryPuwl_w?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;p>Now, in the context of a teleprinter, what &amp;ldquo;newline&amp;rdquo; meant was something like first physically moving the typewriter&amp;rsquo;s carriage back to the beginning of the line (CR: Carriage Return) and then moving the paper up by one line (LF: Line Feed)&lt;/p>
&lt;p>For these early machines designed to work with teletypes, both CR and LF were required to begin typing on a new line. And this influenced the early days of both Unix (1971) and MS-DOS (1981) as well. Back then, teletypes were still in use, so it kind of had to influence both operating systems in various ways. It turns out that, Unix developers chose to simplify the process of creating new lines by treating the LF character alone to signify the end of a line, while MS-DOS retained the full CR + LF combination. I guess the Microsoft guys were more concerned about legacy and hardware compatibility.&lt;/p>
&lt;p>And all these conventions continue to exist even today. Files created in Windows use &lt;code>\r\n&lt;/code> for newlines and those generated in UNIX-like systems (Linux/MacOS/BSD) use &lt;code>\n&lt;/code>. However, many modern text editors are capable of reading and parsing both formats across both operating systems anyway so we don&amp;rsquo;t even notice these small differences. Unless we mess up our git diffs :D&lt;/p>
&lt;p>&lt;strong>To avoid these situations, you can configure your text editor correctly, use a linter, and create a &lt;code>.git/config&lt;/code> file with &lt;code>autocrlf&lt;/code> set to your need.&lt;/strong>&lt;/p>
&lt;h1 id="conclude">Conclude&lt;/h1>
&lt;p>Even plain text might not always be as straightforward as it appears. Understanding what’s happening behind the scenes can be helpful, especially for those who work with it frequently.&lt;/p>
&lt;p>Also, if you have additional things to say about plain text, feel free to share them with me. I would really like to hear them.&lt;/p></description></item><item><title>Stop Being an NPC</title><link>https://rugu.dev/en/blog/npc/</link><pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/npc/</guid><description>&lt;p>When we encounter new information that conflicts with our current beliefs, we
typically follow one of the preceding options:&lt;/p>
&lt;ol>
&lt;li>Ignore the new information.&lt;/li>
&lt;li>Place it into your existing belief system, regardless of whether it is
consistent with your other beliefs.&lt;/li>
&lt;li>Create an ad hoc explanation to keep our beliefs intact.&lt;/li>
&lt;li>Adjust or revise our existing beliefs.&lt;/li>
&lt;/ol>
&lt;p>Since the last option is typically the most demanding, and humans are
programmed through evolution to conserve energy, people usually choose the
first two options unless the information is crucial to their survival.&lt;/p>
&lt;p>Many of the fallacies or biases we have developed were ingrained because they
were effective in environments where being quick and efficient was more
important than being accurate, as conserving energy was one of the greatest
challenges.&lt;/p>
&lt;p>&lt;strong>The issue is that most of us no longer live in environments where we can’t
afford to think things through. Our world has become so abstract and reliant on
complex systems with many layers, that we may be living in a time where
thoughtful analysis of how we choose to do things is more crucial than ever
.&lt;/strong>&lt;/p>
&lt;p>I can&amp;rsquo;t help but think about how much we could improve quality of our living if
we honestly tried to be consistent in our beliefs and approaches by applying
points 3 and 4 a bit more.&lt;/p>
&lt;h1 id="dont-delegate-thinking-to-others">Don&amp;rsquo;t delegate thinking to others!&lt;/h1>
&lt;hr>
&lt;blockquote>
&lt;p>The unexamined life is not worth living. &lt;br>
- Socrates&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>Consider the example of someone who has just started investing but lacks
knowledge in the field and doesn’t have a clear strategy. What often happens is
that they tend to look for people who seem to be experts in the domain. For
example, this person might try to copy Warren Buffett by imitating his
portfolio. How do you think this person will react if something unexpected
happens with their portfolio? Do you think they will act like Warren Buffett
when things go wrong, or do you think they will be more likely to panic and act
randomly? It&amp;rsquo;s often the last one.&lt;/p>
&lt;p>Don&amp;rsquo;t get me wrong. I&amp;rsquo;m not saying that appealing to authority is always a bad
approach. What I&amp;rsquo;m trying to emphasize here is that whether or not you truly
believe in the system matters a lot when it comes to your consistency in
following it!&lt;/p>
&lt;p>You cannot merely trust the experts as long as you understand and agree with
their way of doing things. Even experts most of the time disagree. So, if you
are blindly trying to apply what they told you without understanding the
rationale behind it, you will quickly find yourselves in a conflicted position.&lt;/p>
&lt;p>&lt;strong>So, even if you are appealing to authority, you still have to put an effort
into choosing the right authority, the one whose approach makes sense the
most.&lt;/strong>&lt;/p>
&lt;p>As you think more about it, it becomes clear that it&amp;rsquo;s not just about &amp;ldquo;experts
telling you the most optimal solution for your case.&amp;rdquo; Instead, people often
seek certain types of experts without realizing it, and the supply of experts
adjusts to meet this demand. I suspect this is also why passive therapies
(where treatments are done to the patient rather than involving them in the
process and making them more aware of the situation) are more common than those
requiring patient effort. If many people are looking for an &amp;ldquo;easy solution,&amp;rdquo;
you’ll end up with experts who offer these &amp;ldquo;easy solutions.&amp;rdquo; But what happens
if that easy solution doesn&amp;rsquo;t actually solve the problem?&lt;/p>
&lt;p>Anyway, what I&amp;rsquo;m trying to convey here is that you can’t simply delegate your
problems to experts. Because, even selecting the right expert requires some
thought, which affects the quality of the results you’ll get.&lt;/p>
&lt;h1 id="consistency-is-almost-the-best-thing-you-can-achieve">Consistency is (almost) the best thing you can achieve&lt;/h1>
&lt;hr>
&lt;blockquote>
&lt;p>We cannot live better than in seeking to become better. &lt;br>
- Socrates&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>When you think about it, we don&amp;rsquo;t seem to have much control over many things
that influence and feed us. Where we were born, the society we live in, the
content we &lt;strong>accidentally&lt;/strong> encounter through some recommendation algorithm,
the influental high school teacher that we had, and so on&amp;hellip; All these things,
in essence, can be considered as inputs that contribute to who we are. And the
thing is, we don&amp;rsquo;t seem to have much control over what these inputs will be.&lt;/p>
&lt;p>This is likely one of the reasons why many intelligent people disagree on
fundamental issues. The inputs that feed us are indistinguishable from who we
turn out to become.&lt;/p>
&lt;p>But wait&amp;hellip; Does not this mean that our resulting set of beliefs is kind of
arbitrary? Yeah, most of our beliefs are indeed arbitrary, in the sense that if
we were exposed to different environments we could have different beliefs. But
is not this point why we should try to put our beliefs to the test, and try to
make our beliefs at least &lt;strong>consistent&lt;/strong>?&lt;/p>
&lt;p>First of all, we can reduce the amount of contradictory beliefs we have. If you
hold one of the possible coherent worldviews, there is a possibility that you
might be right, most likely some of your beliefs will overlap the reality while
others don&amp;rsquo;t. But, if you have contradictory beliefs at the same time, you are
certainly more wrong than the alternative set of beliefs you could have without
the contradictory beliefs.&lt;/p>
&lt;p>The second point I want to emphasize is that, &lt;strong>although consistency doesn&amp;rsquo;t
always mean truth, it often brings you closer to it&lt;/strong>. Also, keep in mind that
it is quite possible that seemingly very different philosophies can arrive at
the same conclusions in some of the most important subjects. For example, it&amp;rsquo;s
fascinating to see that most philosophies of life—such as Buddhism, Sufism,
Christianity, Stoicism, Epicureanism, and others—focus more on internal matters
within our control, rather than external ones. This is just one example I can
think of, but you get the idea.&lt;/p>
&lt;p>Lastly, is there anything you can do better to be true than to trying
making your beliefs more coherent and inclusive? Don&amp;rsquo;t think so.&lt;/p>
&lt;p>While I can try to give logical inferences and arguments why you should try to
be consistent, I think this never suffices to convince a radical skeptic who
even questions whether the world exists or not (what does this mean anyway?).
So I will stop philosophizing about why you should try to be consistent here and just
finish this section quoting Marcus Aurelius.&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>The happiness of your life depends upon the quality of your thoughts. &lt;br>
- Marcus Aurelius&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;h1 id="dont-be-afraid-of-being-opinionated">Don&amp;rsquo;t be afraid of being opinionated&lt;/h1>
&lt;p>Over time, I’ve realized that when I base my approach to a field on a
philosophy or system, making progress and building on my current position
becomes much easier. I think this is because it’s easier to maintain a routine,
especially when you understand, enjoy, and agree with it.&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>If a man knows not to which port he sails, no wind is favorable. &lt;br>
- Seneca&lt;/p>&lt;/blockquote>
&lt;hr>
&lt;p>I believe most people who take action don&amp;rsquo;t place enough importance on this
phenomenon, and as a result, their potential is limited to mediocrity at best.&lt;/p>
&lt;p>The thing is, even though the opinions you get from your thinking process might
differ from those that are just as smart as you, you can still benefit from
having them.&lt;/p>
&lt;p>I think following a diet plan is a good example of this. If your goal is simply
to lose weight, whether it&amp;rsquo;s a carnivore, Mediterranean, paleo, or intermittent
fasting diet, all of them are likely better than not having a plan and randomly
eating whatever is available. While one diet might be better than others in
certain ways, I believe most people would benefit from any of these diets. The
key factor is whether you can healthily stick to the diet while maintaining a
calorie deficit.&lt;/p>
&lt;p>I believe this also applies to building exercise programs. Whether you&amp;rsquo;re doing
calisthenics, bodybuilding, powerlifting, swimming, running, or anything else,
you&amp;rsquo;re likely better off than those who don&amp;rsquo;t have a plan and aren&amp;rsquo;t taking
actions that are planned.&lt;/p>
&lt;p>&lt;strong>In most cases, it is just better to have a system that you find it reasonable
and build on top of it than having none.&lt;/strong>&lt;/p>
&lt;p>In my view, many software developers lack a fundamental understanding of the
concepts they’re building on, leading them to face problems that could have
been avoided in the first place. I think those who contribute to accidental
complexity often lack a sense of craftsmanship and are more focused on just
getting the solution, regardless of how messy it is. This might be ok if they
don&amp;rsquo;t truly care about the quality and maintainability of the products they
deliver, but if they happen to care about these things, I guess that even a
person opinionated towards Object-Oriented Programming -which I don&amp;rsquo;t like it
much compared to Procedural or Functional Programming- might be superior
compared to copy-paste NPC developer out there.&lt;/p>
&lt;p>So, despite I don&amp;rsquo;t like much I still respect developers who are committed to
OOP. At least they strive for consistency through a systematic approach to
software development.&lt;/p>
&lt;p>&lt;strong>Long story short, if you wan&amp;rsquo;t to improve, just don&amp;rsquo;t be so afraid to have
certain ideas and tastes even if it means sticking out.&lt;/strong>&lt;/p></description></item><item><title>Understanding Concurrency, Parallelism and JS</title><link>https://rugu.dev/en/blog/concurrency-and-parallelism/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/concurrency-and-parallelism/</guid><description>&lt;p>Up until now, I was not aware that concurrency and parallelism were actually
different things since they are often used interchangeably by some. I just
learned that this is not the case while reading &lt;a href="https://www.braveclojure.com/concurrency/">Chapter
9&lt;/a> of the book &amp;ldquo;Clojure for the
Brave and True.&amp;rdquo;&lt;/p>
&lt;p>This made me want to learn more about concepts related to concurrency and
parallelism, especially concerning the programming language I know best:
JavaScript. So this essay is basically a collection of notes I made during this
learning process.&lt;/p>
&lt;h2 id="sequential-concurrent-and-parallel">Sequential, Concurrent and Parallel&lt;/h2>
&lt;p>When executing tasks in our lives, we execute them sequentially, concurrently,
or parallel. And this applies to computing as well.&lt;/p>
&lt;p>Sequential execution is basically when tasks are done one after another without
any overlap. For instance, if someone first looks at their phone, finishes
their job with it, and only after that switches to another task, for example, to
eat their soup, they are working sequentially. The problem with this approach
is sometimes your tasks are getting blocked, like for example when you ask a
thing to your friend from your phone, if you don&amp;rsquo;t switch to other tasks until
your friend answers, you will basically lose time. So different forms of
multitasking can be of help from time to time to save time. Concurrency and
parallelism are ways to achieve multitasking. But there are subtle, yet
important differences between the two.&lt;/p>
&lt;p>Concurrency is like handling numerous tasks by alternating between subtasks
(aka interleaving), while parallelism is like performing multiple tasks
simultaneously. For example, if someone looks at their phone, puts it down
to take a spoonful of soup, and then returns to their phone after setting down
the spoon, they are working concurrently. In contrast, if a person is texting
with one hand while eating with the other at the same time, they are working in
parallel. In both cases, they are multitasking, but there is a subtle
difference in how they multitask.&lt;/p>
&lt;div style="text-align: center;">
&lt;img src="https://martin-thoma.com/images/2021/05/parallel-interleaved.png#75persize" alt="">
(Image taken from &lt;a href="https://martin-thoma.com/synchronous-asynchronous-concurrent-parallel/">Synchronous vs Asynchronous vs Concurrent vs Parallel&lt;/a>)
&lt;/div>

&lt;h2 id="threads">Threads&lt;/h2>
&lt;p>In the analogy above, I referred to eating soup and using the phone as
different tasks and each task consists of subtasks (for example eating soup,
you need to hold the spoon, then put it into your soup, then put that into your
mouth, and so on&amp;hellip;).&lt;/p>
&lt;p>Likewise, in the context of programming, the subtasks can be thought of as
individual segments of a larger set of instructions in a process. The
conventional way to operate on different subtasks simultaniously is to create
different kernel threads. Which are, kind of like separate workers each
handling their specific tasks while being able to work on the same set of
instructions as well as resources.&lt;/p>
&lt;p>Whether your threads run in parallel or concurrently actually depends on your
hardware. If your CPU has more cores than the number of threads running
simultaneously, each thread can be assigned to a different core, allowing them
to operate in parallel. However, if your CPU has fewer cores than the number of
threads, the operating system will start interleaving between the threads.&lt;/p>
&lt;p>When it comes to kernel threads, the developer&amp;rsquo;s experience remains the same,
whether the tasks are actually handled concurrently or parallelly does not make
much of a difference. The developer uses threads to improve performance and
avoid blocking. However, it’s the operating system that makes the final
decision on how to handle these threads depending on the resources available.
As long as the developer uses threads, whether they run concurrently or in
parallel, it doesn&amp;rsquo;t matter; in both cases, the order in which instructions
from different threads are executed is kind of unpredictable. Therefore, the
developer should be cautious of potential issues (like race conditions,
deadlocks, livelocks, etc) that can occur from two different threads operating
on the same data anyway!&lt;/p>
&lt;h2 id="spawning-processes-io-notifications">Spawning Processes, I/O Notifications&lt;/h2>
&lt;p>There are also other ways to achieve concurrency/parallelism other than using
threads, for example although not as efficient as threads, spawning multiple
processes is another way to go. Since the CPU runs different processes both
parallely and concurrently, you can multitask using many processes. The
disadvantages here are that each process comes with its own memory space
allocated and they don&amp;rsquo;t share their memory space by default like threads. So,
if you need different processes to operate in the same state, you might need
some sort of an IPC mechanism like shared memory segments, pipes, message
queues, or even databases.&lt;/p>
&lt;p>Kernels also implement their own way of I/O event notification mechanisms,
which again, can also be helpfull when building programs that you don&amp;rsquo;t want to
get blocked while doing certain tasks.&lt;/p>
&lt;p>I don&amp;rsquo;t want to delve into much details, since I don&amp;rsquo;t know much about it, but
the key idea is, kernel threads are not the only OS specific way that you can
achieve concurrency.&lt;/p>
&lt;h2 id="nodejs-an-example-for-user-space-concurrency">NodeJS, an Example for User-space Concurrency&lt;/h2>
&lt;p>Programming languages often provide their own concurrency mechanisms to
simplify the complexities associated with using the Operating System&amp;rsquo;s API
(system calls). This means that the compiler or interpreter can translate your
high-level code into low-level system calls that the operating system
understand so that you don&amp;rsquo;t have to think much.&lt;/p>
&lt;p>Node.js is a great example of this concept. Although your JavaScript program
runs in a single-threaded environment with a sequential execution flow,
blocking tasks such as IO operations are delegated to the Node.js Worker
Threads. So NodeJS uses threads behind the scenes to manage those blocking
tasks, without revealing the complexities of managing them to the developer.&lt;/p>
&lt;p>Here’s how it works: Blocking operations, such as writing to a file or reading
from a file, or sending a network request are typically handled using the
built-in functions provided by Node.js. You usually pass callback functions as
parameters when calling these functions, so that Node.js Worker Threads can
execute the callback functions that you provided when they complete their
tasks.&lt;/p>
&lt;div style="text-align: center;">
&lt;img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*U_zyHnKdlvjCdAQkoh0uuQ.png#75persize" alt="">
(Image taken from &lt;a href="https://medium.com/@abeythilakeudara3/nodejs-architecture-42a1d0efad8f">NodeJS Architecture&lt;/a>)
&lt;/div>

&lt;p>Having a bit of more idea how NodeJS concurrency works under the hood, we can
now start practicing this theory by examining certain cases/situations.&lt;/p>
&lt;p>Consider the following code (thanks to my friend
&lt;a href="https://github.com/onsah">Onur&lt;/a> for coming up with the example);&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, if you run this program, the only thing you will encounter on your screen
will be &amp;ldquo;a&amp;quot;s. This is because the NodeJS interpreter continue executing the
current callback as long as there are instructions still available.&lt;/p>
&lt;p>As soon as all instructions in the main code are executed, the NodeJS runtime
environment then starts calling the callback functions. You can also think of
the main code you write as being called by default as a callback. In the
example above, the first &lt;code>setTimeout&lt;/code> is executed with the callback function
provided, and the second &lt;code>setTimeout&lt;/code> is executed with the callback function
provided. After 1 second passes, it starts spamming &amp;ldquo;a&amp;quot;s. You never see &amp;ldquo;b&amp;quot;s
because, once the first callback is called, it dominates the main thread with
its ugly while loop, forever! So, the second callback is never called.&lt;/p>
&lt;p>This has a few important effects. First, it reduces the chance of issues like
race conditions, though they can still happen, especially compared to
multi-threaded languages like C. Why? In C-like languages, the CPU interleaves
threads at the instruction level, while here, it mostly happens at the callback
level. As long as you avoid having complicated logic that relies on &lt;code>async&lt;/code>
functions with nested callbacks, it is certain that the flow of execution
remains uninterrupted, basically sequential.&lt;/p>
&lt;p>If the programming logic contains many &lt;code>asynchronous callback-based functions&lt;/code>
(like &lt;code>fs.readFile()&lt;/code>, &lt;code>setTimeout()&lt;/code>, &lt;code>setImmediate()&lt;/code>, or even
&lt;code>Promise.then()&lt;/code>), the race conditions can easily start to occur.&lt;/p>
&lt;p>This also applies to the usage of &lt;code>await&lt;/code> because you can think of &lt;code>await&lt;/code>
statements as shorthand for wrapping the remaining code in the current scope
into a callback function that runs once the awaited &lt;code>Promise&lt;/code> is resolved.&lt;/p>
&lt;p>Consider the &lt;code>test&lt;/code> and &lt;code>test2&lt;/code> functions provided below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">scheduler&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;node:timers/promises&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> Promise.&lt;span style="color:#a6e22e">all&lt;/span>([&lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>) &lt;span style="color:#75715e">// Returns 1, not 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> Promise.&lt;span style="color:#a6e22e">all&lt;/span>([&lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>) &lt;span style="color:#75715e">// Returns 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test2&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reason &lt;code>test()&lt;/code> logs 1 is that when the foos functions are called, as soon
as they encounter &lt;code>await scheduler.wait(100)&lt;/code>, they essentially finish. Because
under the hood, using &lt;code>await scheduler.wait(100)&lt;/code> evaluates something like the
following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, the first &lt;code>foo&lt;/code> function finishes its job, it is now upto the callback
function to continue the business, but since it will only be called 100ms
after, the NodeJS interpreter does not stay idle but instead continues
executing the second and third foo functions by order. They also set &lt;code>y&lt;/code>
variable to the value of &lt;code>x&lt;/code> before the callback from the first foo is
triggered, and call &lt;code>scheduler.wait&lt;/code> with the callback function. As a result,
when the callbacks are eventually executed, they all update x using the
previous value of x, so we get 1, instead of 3.&lt;/p>
&lt;p>Why we get 3 logged out when running &lt;code>test2()&lt;/code>? Because the place where &lt;code>await&lt;/code>
is being run is different and it evaluates to something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As soon as this callback function is called, nothing can interleave between&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, no race condition can occur.&lt;/p>
&lt;h2 id="to-conclude">To Conclude&lt;/h2>
&lt;p>The main idea here is that there is not just one way to achieve &amp;ldquo;concurrency&amp;rdquo;,
and the way you achieve it can also affect many things, like how performant
your programs will be or even what kind of problems you can encounter, or what
things to watch out for and so on.&lt;/p>
&lt;p>Just try to be mindful when working on programs that are supposed to work
concurrently/parallelly. Things can go wrong pretty fast.&lt;/p>
&lt;h2 id="addendum">Addendum&lt;/h2>
&lt;p>&lt;strong>2024-09-18&lt;/strong>: This essay received a lot of attention that I did not
anticipate. It got 99 upvotes on HackerNews and appeared on the front page for
a while. A few days later, my friend Carlo informed me that my essay was
featured in the &lt;a href="https://bytes.dev/archives/323">323rd issue&lt;/a> of the Bytes
newsletter, a JavaScript newsletter with over 200,000 subscribers.&lt;/p>
&lt;p>I’ve also received a few messages expressing appreciation for the essay and
even got the first &lt;a href="https://github.com/kugurerdem/rugudev/pull/1">pull request&lt;/a>
to my blog&amp;rsquo;s GitHub repository. Thanks to everyone who took the time to read
and provide feedback.&lt;/p>
&lt;p>In the HackerNews discussion, @duped and @donatj recommended &lt;a href="https://www.youtube.com/watch?v=oV9rvDllKEg">Concurrency is
not Parallelism&lt;/a> by Rob Pike. It
is a very good talk, so I wanted to mention it here as well for anyone else
further interested in the topic.&lt;/p></description></item><item><title>Debug Smarter</title><link>https://rugu.dev/en/blog/debug-smarter/</link><pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/debug-smarter/</guid><description>&lt;p>In this essay, I share some tips that I&amp;rsquo;ve found particularly beneficial for my
own debugging experience. Hope it helps the reader as well.&lt;/p>
&lt;p>If you have any cool tips you&amp;rsquo;d also like to share, feel free to share them. I
might include them in the essay and give you credit for it.&lt;/p>
&lt;h1 id="writing-logs-to-stderr">Writing Logs to STDERR&lt;/h1>
&lt;p>I&amp;rsquo;ve noticed that developers, myself included, often instinctively write debug
logs to STDOUT. While this might not cause problems if the program&amp;rsquo;s output
isn’t intended for other programs to consume, it becomes crucial when managing
multiple scripts that depend on each other—such as when one script writes to a
file that another reads.&lt;/p>
&lt;p>In these situations, if you&amp;rsquo;re writing everything to STDOUT, you might not be
taking full advantage of the pipe and redirection mechanisms available in your
UNIX environment. The primary purpose of the STDOUT file descriptor is to
facilitate interprocess communication through mechanisms like piping. By using
STDOUT for debug logs and similar outputs, you might be accidentally
complicating your own workflow and missing out on its intended purpose.&lt;/p>
&lt;p>So, what to do instead? Simply write your debug logs to STDERR instead of
STDOUT. Since both STDOUT and STDERR are displayed in your terminal, you&amp;rsquo;ll
still see your debug logs on the terminal screen as usual.&lt;/p>
&lt;p>Many common UNIX utilities already follow this practice. Run grep on a
non-existent file, you will see that the error message is sent to STDERR, while
any matching lines would be sent to STDOUT. Attempt to create a directory with
&lt;code>mkdir&lt;/code> that already exists or run &lt;code>cat&lt;/code> on a non-existent file, the error
messages are directed to STDERR. The same behavior can be observed with &lt;code>curl&lt;/code>
and &lt;code>find&lt;/code> when they encounter errors. These programs consistently write error
and debug messages to STDERR.&lt;/p>
&lt;p>Simply put, if the output of your process isn’t intended for use by another
process, direct it to STDERR instead. Additionally, if you want certain errors
to be manageable by other programs, you can use EXIT CODES. This allows other
programs to decide how to handle specific error situations.&lt;/p>
&lt;p>Just don&amp;rsquo;t clutter the STDOUT.&lt;/p>
&lt;h1 id="conditional-debugging">Conditional Debugging&lt;/h1>
&lt;p>In NodeJS, there is this function called
&lt;a href="https://nodejs.org/docs/latest/api/util.html#utildebuglogsection-callback">debuglog&lt;/a>
under the default util module.&lt;/p>
&lt;p>What it does is to return you a debug function that conditionally logs to
STDERR, based on the value of &lt;code>NODE_DEBUG&lt;/code> env variable.&lt;/p>
&lt;p>To give you an example, consider the following file &lt;code>debug.js&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">debuglog&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;util&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">normalLog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">debuglog&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;normal&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">verboseLog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">debuglog&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;verbose&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">normalLog&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;This is a normal log!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">verboseLog&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;This is a more specific, detailed log!&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, on your shell, try running &lt;code>node debug.js&lt;/code>, you won&amp;rsquo;t get any results
printed to terminal.&lt;/p>
&lt;p>Now, try it like &lt;code>NODE_DEBUG=normal node debug.js&lt;/code>;&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ NODE_DEBUG=normal node debug.js
NORMAL 16231: This is a normal log!
&lt;/code>&lt;/pre>&lt;p>Now, try it like &lt;code>NODE_DEBUG=normal,verbose node debug.js&lt;/code>;&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-terminal" data-lang="terminal">$ `NODE_DEBUG=normal,verbose node debug.js`;
NORMAL 16337: This is a normal log!
VERBOSE 16337: This is a more specific, detailed log!
&lt;/code>&lt;/pre>&lt;p>I hope you see the value of this approach. By adjusting the value of the
&lt;code>NODE_DEBUG&lt;/code> environment variable, you can control the level of detail you want
to see in your debug logs. You can also have different debug logs for unrelated
parts of the code so that you can seperate unrelated logs from each other. What
I generally like to do is to have different debug logs for different modules.&lt;/p>
&lt;p>This way, you can have more control over your debug logs so that they don&amp;rsquo;t
clutter the STDERR much. You can, for example, choose to disable/enable certain
kind of debug logs depending on what you really want to see at that moment.&lt;/p>
&lt;p>The good thing is that the way &lt;code>debuglog&lt;/code> works under the hood is pretty
straightforward, (see &lt;a href="https://github.com/nodejs/node/blob/43f699d4d2799cfc17cbcad5770e1889075d5dbe/lib/internal/util/debuglog.js#L87">source
code&lt;/a>).&lt;/p>
&lt;p>If it already doesn&amp;rsquo;n exist, you can easily implement a similar mechanism in
your favorite language (as long as it supports higher-order functions). Feel
free to translate the following custom JavaScript code I wrote (for
demonstration purposes) into the language of your choice.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">debuglog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">logName&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">logNames&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">env&lt;/span>.&lt;span style="color:#a6e22e">NODE_DEBUG&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">split&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>) &lt;span style="color:#f92672">||&lt;/span> []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">logNames&lt;/span>.&lt;span style="color:#a6e22e">includes&lt;/span>(&lt;span style="color:#a6e22e">logName&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">process&lt;/span>.&lt;span style="color:#a6e22e">stderr&lt;/span>.&lt;span style="color:#a6e22e">write&lt;/span>(&lt;span style="color:#e6db74">`[&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">logName&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">] &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">log&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">\n`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> () =&amp;gt; {} &lt;span style="color:#75715e">// noop
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="tap-functions">Tap Functions&lt;/h1>
&lt;p>A tap function is a function that returns the value it receives while executing
specific side effects. It is commonly used for logging, particularly for
intermediate values, without requiring significant code refactoring.&lt;/p>
&lt;p>Let me show you how it looks. Consider the following piece of code I came up
with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f1&lt;/span>(&lt;span style="color:#a6e22e">f2&lt;/span>(&lt;span style="color:#a6e22e">f3&lt;/span>( ...&lt;span style="color:#a6e22e">someArgs&lt;/span>)))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Say you want to see what the function &lt;code>f3&lt;/code> returns in your debug logs. What
would you do?&lt;/p>
&lt;p>If you were to write something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">f3Result&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">f3&lt;/span>(...&lt;span style="color:#a6e22e">someArgs&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">f3Result&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f1&lt;/span>(&lt;span style="color:#a6e22e">f2&lt;/span>(&lt;span style="color:#a6e22e">f3Result&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can probably understand the frustration that comes with this approach.
However, tap functions let you do something like this instead:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">f1&lt;/span>(&lt;span style="color:#a6e22e">f2&lt;/span>(&lt;span style="color:#a6e22e">taplog&lt;/span>(&lt;span style="color:#a6e22e">f3&lt;/span>( ...&lt;span style="color:#a6e22e">someArgs&lt;/span>))))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, we simply wrapped the &lt;code>f3&lt;/code> function call with &lt;code>taplog&lt;/code>. This
approach requires much less effort and is especially helpful when you need to
quickly log an argument passed to another function (in this case, the result of
&lt;code>f3&lt;/code> being passed to &lt;code>f2&lt;/code>) without altering the code structure much.&lt;/p>
&lt;p>I find tap functions particularly helpful when working with frameworks like
&lt;code>React&lt;/code>, where you occasionally pass expressions as arguments to other components
and want to log those expressions without disrupting the code flow.&lt;/p>
&lt;p>What I like is to create a generic function for creating tap functions, called
&lt;code>tap&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tap&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">fn&lt;/span> =&amp;gt; (&lt;span style="color:#a6e22e">value&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fn&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And then use it to create your specific tap functions based on your needs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">debuglog&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;util&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">debug&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">debuglog&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;blabla&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapDebug&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">debug&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapLog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapErr&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapAll&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">tap&lt;/span>((&lt;span style="color:#a6e22e">val&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapDebug&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapLog&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tapErr&lt;/span>(&lt;span style="color:#a6e22e">val&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These are just example functions, but the main idea here is that you can
basically create your own tap functions for your own needs.&lt;/p></description></item><item><title>Switching from Arch to NixOS</title><link>https://rugu.dev/en/blog/nixos/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/nixos/</guid><description>&lt;p>I’ve switched my desktop computer environment from Arch Linux to NixOS and used
it for about a month. I want to share my migration experience in case it might
interest or even help others.&lt;/p>
&lt;p>I also want to thank my friends &lt;a href="https://github.com/onsah">Onur&lt;/a> and
&lt;a href="https://github.com/mk-nlp">Mert&lt;/a> for encouraging me to switch to NixOS and
providing help.&lt;/p>
&lt;h1 id="why-migrate-from-arch-in-the-first-place">Why Migrate from Arch in the first place?&lt;/h1>
&lt;p>As someone who likes playing with tools to understand how they work as well as
to match my preferences and ergonomic choices, I find myself frequently changing many
configurations on my system. However, it didn&amp;rsquo;t take long for me to realize
that I need a system to save and possibly automate these configuration
processes to save time in the future.&lt;/p>
&lt;p>A common solution is to create a git repository, often called &amp;ldquo;dotfiles,&amp;rdquo; where
you can store your configurations and changes. This approach helps you avoid
repeating the process of configuring the same stuff over and over when
switching to new host machines. You turn your home folder into a repository
itself by initializing git directly inside of it, set the remote address, and
pull the content. You can check out what my dotfiles looked like before
switching to NixOS &lt;a href="https://github.com/kugurerdem/dotfiles">here&lt;/a>.&lt;/p>
&lt;p>Yet, even with this &amp;ldquo;dotfiles&amp;rdquo; approach there are some problems:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It&amp;rsquo;s very easy to forget to add some configuration files from your computer
to the repo because, in a typical Linux setup, these files are often
scattered in different locations, and unstaged changes can be easily
overlooked. This is especially true for the home directory, where there are
many unstaged files by default, making it easier to miss the ones you want to
stage. I&amp;rsquo;ve had several instances where I realized I was missing some
configuration files from my old computer in the Git repo after formatting my
PC.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Your dotfiles are likely to become more complex over time, requiring you to
document how to configure certain aspects to avoid confusion the next time
you set up your environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Even if your dotfiles repo is perfect, there&amp;rsquo;s no guarantee your system will
work the same when you rebuild it. Changes might have occurred to some of the
packages that your dotfiles repo relies on. As a result, you might encounter
issues regarding package upgrades or even conflicts. This problem isn&amp;rsquo;t
specific to rebuilding systems from a dotfiles repo but also affects regular
users who just want to just update their systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In addition to these problems mentioned, although not very often, I would
encounter situations in Arch Linux where I had to look up an error message, a
specific bug, or a non-backward compatible update for some of the apps I use.
Why? Because a system update broke something! While this may not seem like a
big problem, it can be very inconvenient if you&amp;rsquo;re in a hurry to get a job
done. In these kind of situations, I often had to either fix the problem
immediately or ignore it for a while and fix it later. Rolling back to the
state of my computer before the system update and postponing the task of
addressing the issue introduced by the update was not an option.&lt;/p>
&lt;p>This was the moment when I remembered that the tools (Nix and NixOS) my friends
had been recommending could be useful to me.&lt;/p>
&lt;h1 id="what-is-nixnixos">What is Nix/NixOS?&lt;/h1>
&lt;p>In essence, Nix is a package manager (there&amp;rsquo;s also a programming language
called Nix, which can sometimes be confusing). What sets Nix apart from its
alternatives is the way it manages packages and much more, including your home
folder. It is designed to provide reliable and reproducible package management
by isolating packages from each other in a smart way, preventing issues like
dependency conflicts. It also allows users to configure their computers using
its configuration files, through its programming language. So, you&amp;rsquo;re not
limited to downloading specific versions of packages with their dependencies,
but you can also configure other files on your computer, such as your dotfiles.&lt;/p>
&lt;p>NixOS, on the other hand, is a Linux distribution that uses Nix as its default
package manager. It integrates Nix&amp;rsquo;s features to manage the entire system at
both the system and user levels.&lt;/p>
&lt;p>To stay within the scope of this essay, which is to share my Nix and NixOS
experiences rather than explain their inner workings, I&amp;rsquo;ll stop here. However,
if you&amp;rsquo;re curious to learn more, I found &lt;a href="nix.dev">nix.dev&lt;/a> and
&lt;a href="nixos.wiki">nixos.wiki&lt;/a> particularly helpful for learning more about Nix and NixOS.&lt;/p>
&lt;h1 id="the-learning-curve-and-initial-trial">The Learning Curve and Initial Trial&lt;/h1>
&lt;p>Since NixOS fundamentally provides a much different user experience than most
of the other Linux distributions. I thought it would be wiser to first try
NixOS in a VM instead of directly trying to figure out stuff after installing
the distro on my host machine.&lt;/p>
&lt;p>I can confidently say that during this period of testing NixOS on a VM, I had
more troubles related to &lt;code>QEMU&lt;/code> and network bridging than problems related to
understanding how Nix works. The same goes for the installation process as
well, for some reason &lt;code>Ventoy&lt;/code> did not work properly with the NixOS iso image
while formatting the disk with &lt;code>dd&lt;/code> just worked fine.&lt;/p>
&lt;p>My initial goal was to make the VM I was running function exactly like my host
machine. This way, once I got NixOS working as intended in the VM, I could
replicate the setup on my host machine. I just needed to copy the configuration
files from the VM to the host machine and run a few Nix and NixOS commands. And
this was exactly what happened when I switched to my host machine. Easy peasy.
:)&lt;/p>
&lt;p>In the end, it took me around 4-5 days, working 2-3 hours each day, to learn
Nix and NixOS and replicate about 95% of my Arch dotfiles in the VM. When I
installed NixOS on my host computer, I simply cloned my nix-config repo, ran a
few commands as described, and boom! Everything was set up. :) It was such a
nice experience.&lt;/p>
&lt;h1 id="initial-impressions-and-experience">Initial Impressions and Experience&lt;/h1>
&lt;p>Here are my first impressions after using NixOS for about a month:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>At first, it feels like the knowledge you&amp;rsquo;ve gained from using conventional
FHS Linux distros becomes redundant, as you no longer configure programs by
directly modifying their configuration files in the file system. Instead, you
use the settings provided by NixOS and home-manager (a standardized Nix
program that allows users to manage and configure their home environments
through Nix files without root privileges).&lt;/p>
&lt;p>Because most configurations are done through the settings provided by the
packages, it initially seemed like this might prevent users from
understanding what&amp;rsquo;s happening under the hood.&lt;/p>
&lt;p>However, after using NixOS for a while, I realized this was not true. The
abstraction that NixOS packages provide doesn&amp;rsquo;t hide everything from the user
to avoid confusion with irrelevant details. Instead, it offers a way to
configure your environment the Nix way, so the resulting configuration files
are created by Nix.&lt;/p>
&lt;p>Most of the prior knowledge I had about configuring the programs I use was
easily transferable to the NixOS domain. Also, you don&amp;rsquo;t have to configure
every dotfile through Nix. In fact, home-manager allows you to source files
to desired destinations (see the home.file.*.source option for home-manager).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The documentation is not in great shape. The Nix wiki is certainly not as
good as the Arch wiki. Sometimes, it&amp;rsquo;s outdated, and other times, it&amp;rsquo;s not
detailed enough. This is why it&amp;rsquo;s very important to learn the Nix programming
language well so you can easily read the options available for a package you
want to install. Once you understand the fundamentals of the Nix programming
language, the code itself becomes the documentation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is very confusing to have many alternatives for certain tasks. For
example, there are two different ways to install home-manager (standalone
installation vs. system modules), and how you install it affects the way you
interact with it later. Another example is Nix flakes, which are meant to
replace channels (an imperative way of downloading packages) but are still
considered an experimental feature by NixOS.&lt;/p>
&lt;p>To be fair, having to choose between many options is already an issue in
Linux (though many see this as a feature), and NixOS seems to have the same
problem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From my experience so far, most Nix packages are designed to allow
self-contained setups and installations, including plugins. Here are a few
examples:&lt;/p>
&lt;ul>
&lt;li>When installing Firefox or Chromium browser packages, you can set which
plugins you want to be installed by default.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L137">Example&lt;/a>&lt;/li>
&lt;li>For my default password manager &lt;code>pass&lt;/code> (a standard UNIX password
manager), the plugins I wanted to integrate with pass can be defined
through a derivation attribute &lt;code>withExtensions&lt;/code>.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L52">Example&lt;/a>&lt;/li>
&lt;li>When installing the Minecraft launcher prismlauncher, you can declare
which JDKs should be available and used by the launcher by simply
overriding one of the package attributes.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L81">Example&lt;/a>&lt;/li>
&lt;li>For Neovim, you can declare which dependencies and plugins you want to
install out of the box using the &lt;code>extraPackages&lt;/code> and &lt;code>plugins&lt;/code> options of the
home-manager&amp;rsquo;s &lt;code>programs.neovim&lt;/code> option.&lt;/li>
&lt;/ul>
&lt;p>These are just a few examples, and I am sure this is a standard for many
other programs. I really like this. Dependencies used only
by certain programs are self-contained within the program that will use them.&lt;/p>
&lt;p>You can even override some of the derivation attributes for the package you
are installing so that it is not installed from the git source repository
defined in the nixpkgs repo, but from your own source repository. I used this
technique to install and set up my window manager dwm using my own git fork
of dwm.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/main/home-manager/dwm.nix#L4">Example&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The configuration files and the nix-config repo I now have are much
more elegant and simpler than my previous dotfiles repo. It&amp;rsquo;s much easier to
organize configurations in a modular way now.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The rollback mechanisms that Nix provides (combined with the ease of using
other people&amp;rsquo;s configurations) make trying new things (like different window
managers, desktop environments, programs, or even other people&amp;rsquo;s setups) very
appealing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In Arch, there were a few instances where I had to use additional package
managers like &lt;code>yay&lt;/code> to access the AUR (Arch User Repository) alongside the
official Arch repository. I also recall compiling and building some tools,
like &lt;code>fzf&lt;/code>, from scratch. I haven&amp;rsquo;t needed to do any of this while using
NixOS.&lt;/p>
&lt;p>Overall, I&amp;rsquo;ve had a better experience with the Nix package manager itself
compared to using pacman and the AUR.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="to-conclude">To Conclude&lt;/h1>
&lt;p>In the end, I really think Nix and NixOS are very strong tools for achieving
reliable and reproducible system configurations and package management.
Unfortunately, though, I don&amp;rsquo;t think the benefits I&amp;rsquo;ve gotten in this one month
of using NixOS so far justified the cost I&amp;rsquo;ve initially spent and continue to
spend learning Nix and NixOS.&lt;/p>
&lt;p>But since I currently have no workload and enjoy the learning process, I
don&amp;rsquo;t see a serious problem here.&lt;/p>
&lt;p>Ultimately, whether the benefits of learning a particular technology outweigh
the costs depends on how much you take full advantage of its features. So, I
believe that if I experiment with more setups, try different programs, or start
managing servers with Nix, I will begin to see a better return on this
investment from what I have learned so far. :)&lt;/p></description></item><item><title>Introducing: Mark Scroll Positions</title><link>https://rugu.dev/en/blog/mark-scroll-positions/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/mark-scroll-positions/</guid><description>&lt;p>Try the extension in
&lt;a href="https://chromewebstore.google.com/detail/mark-scroll-positions/echejfhmdgnabmbihbmkdgeajmbojald">Chrome&lt;/a>
or in
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/mark-scroll-positions/">Firefox&lt;/a>
&lt;br>
See the source code
&lt;a href="https://github.com/kugurerdem/mark-scroll-positions">kugurerdem/mark-scroll-positions&lt;/a>&lt;/p>
&lt;h2 id="hahahugoshortcode18s0hbhb">&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BzbMsaQkt34?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>
&lt;/h2>
&lt;p>I like reading blog posts a lot. While some of them are short and easy to read,
most of them are long and require more time to finish. When reading those long
essays, I take a break most of the time. Thus, when I re-open an essay, I
often lose the original place where I was reading. And if I
can remember where I was, then I manually scroll back there. This makes the
reading experience less smooth and more time-consuming.&lt;/p>
&lt;h2 id="a-not-so-clever-workaround-fragmented-identifiers">A Not-So Clever Workaround (Fragmented Identifiers)&lt;/h2>
&lt;p>I have found a neat trick to work around this problem over time. I was already
using the bookmark feature of my Brave browser, but it was not tracking where I
left reading. So, I would proceed with the following procedure:&lt;/p>
&lt;p>(1) Open the inspect mode. &lt;br>
(2) Click an element that has an ID nearest to where I am at, get the element
ID. &lt;br>
(3) Append the element ID to the URL of the site in the form of a fragmented
identifier. &lt;br>
(4) Using the new URL with fragmented ID, either overwrite the existing
bookmark or create a new one.&lt;/p>
&lt;p>If you don&amp;rsquo;t know what fragmented identifiers are, they are the part of the URL
that follows the hash symbol (#). Consider the following URL:&lt;/p>
&lt;div style="text-align: center;">
&lt;a href="https://rugu.dev/en/blog/intentional-digital-consumption/#maintaining-balance">https://rugu.dev/en/blog/intentional-digital-consumption/#maintaining-balance&lt;/a>
&lt;/div>

&lt;p>Here &lt;code>#maintaining-balance&lt;/code> is the fragmented identifier and thanks to it the
browser directly knows where to jump when it opens the page.&lt;/p>
&lt;p>Anyways, this approach works, but there are some problems with it. First of
all, it requires manual labor which could have been automatized, secondly,
although the fragmented links directly jump to the element with the id
specified in the URL, if there is no element with id close to where you are,
the method fails.&lt;/p>
&lt;h2 id="seemingly-a-better-idea-storing-scroll-positions">Seemingly A Better Idea (Storing Scroll Positions)&lt;/h2>
&lt;p>So, I wanted a tool to save and jump to specific scroll positions on a webpage.&lt;/p>
&lt;p>I found some programs that are built for this purpose, but none of them met my
expectations.&lt;/p>
&lt;p>The most popular one I found was &lt;a href="https://chromewebstore.google.com/detail/scrroll-in/cjgjbjogfodppempgdlppgefojbcmjom">Scrroll
In&lt;/a>,
and even that could be improved a lot: For example, it forces you to name each
saved scroll position with an alert prompt. Why not automatically give a random
name that can be renamed later? The fetch and save UI/UX is confusing—why not
directly show the saved scrolls and allow users to jump to them? Additionally,
it lacks features like adding notes to scrolls and searching through saved
scrolls.&lt;/p>
&lt;p>So I decided to build my extension for storing/marking scroll positions on web
pages.&lt;/p>
&lt;h2 id="introducing-mark-scroll-positions">Introducing: Mark Scroll Positions&lt;/h2>
&lt;p>Here is my extension built for that purpose, you can download it from
&lt;a href="https://chromewebstore.google.com/detail/mark-scroll-positions/echejfhmdgnabmbihbmkdgeajmbojald">here&lt;/a>.&lt;/p>
&lt;p>You can save your scroll positions and resume reading later with ease. You can
save as many scroll positions as you want, add notes, rename them, and see and
manage all your saved spots on a separate page.&lt;/p>
&lt;h3 id="implementation-details">Implementation Details&lt;/h3>
&lt;p>I think there are 3 important aspects for understanding how this project works
under the hood.&lt;/p>
&lt;h4 id="1-interaction-between-the-popup-and-content-scripts">1) Interaction between the popup and content scripts&lt;/h4>
&lt;p>In modern browsers, the environment used by an extension&amp;rsquo;s popup is separate
from the environment of the current tab the user is viewing (i.e., the HTML,
CSS, and JavaScript files of the webpage).&lt;/p>
&lt;p>This separation isolates the extension from web content and prevents extensions
from directly accessing and modifying tab content. For this, extensions need
specific permissions like scripting and activeTab to interact between the
extension&amp;rsquo;s popup window and content scripts.&lt;/p>
&lt;p>In our case, when the user clicks the &amp;ldquo;Mark&amp;rdquo; button in the popup window, we
want to fetch the scroll position information from the active tab. However,
this can only be done in the content script environment. In such scenarios, you
can either create a content script that listens for events from the popup
(using &lt;code>chrome.runtime.onMessage&lt;/code> and &lt;code>chrome.runtime.sendMessage&lt;/code>) or inject
content scripts into the page environment (using
&lt;code>chrome.scripting.executeScript&lt;/code>) when the user clicks the &amp;ldquo;Mark&amp;rdquo; button. I
chose the second approach as it seemed cleaner. The same applies to the &amp;ldquo;Jump&amp;rdquo;
utility.&lt;/p>
&lt;p>This is basically to isolate the extension&amp;rsquo;s environment from the web content
so that extensions cannot directly access and modify tab content. As a
result of this, extensions need specific permissions such as &lt;code>scripting&lt;/code> and
&lt;code>activeTab&lt;/code> permissions to make an interaction between the extension&amp;rsquo;s
popup window and the content scripts.&lt;/p>
&lt;h4 id="2-the-data-structure-to-be-saved">2) The data structure to be saved&lt;/h4>
&lt;p>If you want your application to be persistent and remember what the user has
done, you need to store data in a persistent form.&lt;/p>
&lt;p>I chose to store the details like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
 [absoluteURL]: {
 scrolls,
 title,
 }
}
&lt;/code>&lt;/pre>&lt;p>So, the data is stored in &lt;code>chrome.storage.local&lt;/code> consists of keys of absolute
URLs and values of data related to that page.&lt;/p>
&lt;p>Each time a new scroll position is saved, the scrolls array is fetched and the
new scroll details are added to it. The same approach is used for deletion and
updates.&lt;/p>
&lt;h4 id="3-deciding-on-how-to-implement-the-jump-functionality">3) Deciding on how to implement the jump functionality.&lt;/h4>
&lt;p>Deciding how to implement the jump functionality was challenging. I could have
simply saved the &lt;code>window.pageYOffset&lt;/code> value when the user clicks &amp;ldquo;Mark&amp;rdquo; and
uses that value with &lt;code>window.scrollTo(0, offset)&lt;/code> when the user clicks &amp;ldquo;Jump&amp;rdquo;
(like &lt;a href="https://chromewebstore.google.com/detail/scrroll-in/cjgjbjogfodppempgdlppgefojbcmjom">Scrroll
In&lt;/a>
does). However, this would fail if the user resized the page or if the author
changed font sizes. So, I decided to save enough information to recalculate the
target offset based on a percentage.&lt;/p>
&lt;p>When the user clicks &amp;ldquo;Mark,&amp;rdquo; I save not only &lt;code>window.pageYOffset&lt;/code> but also
&lt;code>window.innerHeight&lt;/code> and &lt;code>document.body.scrollHeight&lt;/code>. Since
&lt;code>window.pageYOffset + window.innerHeight&lt;/code> roughly equals
&lt;code>document.body.scrollHeight&lt;/code> when the user scrolls to the bottom of the page,
we can adapt to page resizes with a normalization procedure when the user
clicks &amp;ldquo;Jump.&amp;rdquo;&lt;/p>
&lt;p>Is it that easy? Unfortunately, no. This method fails when the page gets longer
due to dynamic content updates (like new comments). In this case,
&lt;code>document.body.scrollHeight&lt;/code> gets bigger, but the offset where the user left
off and should continue to read on doesn&amp;rsquo;t actually change. Here, jumping
directly to the offset works better. You can still adjust the offset value in
comparison to &lt;code>window.innerHeight&lt;/code>, also known as the viewport.&lt;/p>
&lt;p>Currently, my extension uses the first method, but I might add a feature
allowing users to choose which jump method they prefer for certain pages.&lt;/p>
&lt;h2 id="an-alternative-idea-storing-uniquely-identifiable-text">An Alternative Idea (Storing Uniquely Identifiable Text)&lt;/h2>
&lt;p>Another option is to mark pages based on uniquely identifiable text so the user
can jump to specific text. The problem with this is if the author changes the
page or content. Even changing one word can break the mark. In contrast, if you
save scroll positions, you will still land somewhere close to the initial text.&lt;/p>
&lt;h2 id="last-thoughts">Last Thoughts&lt;/h2>
&lt;p>I believe all these ideas can be improved to create a better marking
application. Maybe a combination of these methods could work, or there might be
even simpler concepts that I have missed.&lt;/p>
&lt;p>The main problem is that pages can change, and it&amp;rsquo;s unclear how our application
should adapt to these changes.&lt;/p>
&lt;p>Anyway, I hope this application will be useful to some people. It will at least
be useful to me. If you want to contribute, please feel free to send your PRs
to
&lt;a href="https://github.com/kugurerdem/mark-scroll-positions">kugurerdem/mark-scroll-positions&lt;/a>&lt;/p></description></item><item><title>Importance of Intentionality in Digital Consumption</title><link>https://rugu.dev/en/blog/intentional-digital-consumption/</link><pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/intentional-digital-consumption/</guid><description>&lt;p>A significant amount of my time of the day is spent interacting with computers
and cell phones. Some of these are due to habits (like having a feeling of
missing out), some are due to reasons related to dopamine (like watching
movies, tv-series or content which are supposed to be fun), and some are
related to work (software development) or productivity (writing, communicating,
researching). So, I am regularly exposed to all kinds of stimulants that are
available on the internet.&lt;/p>
&lt;p>I am quite confident that it is not &amp;ldquo;normal&amp;rdquo; for us human beings to be exposed
to lots of different kinds of digital stimulants at such a fast, mindless pace.&lt;/p>
&lt;h2 id="we-cant-keep-up">We Can&amp;rsquo;t Keep Up&lt;/h2>
&lt;p>Ways to consume stuff always seem to get faster and faster. For most people,
the content they consume is transforming from deeper and wider content to
shorter content that is in the form of compensated &amp;ldquo;pill&amp;quot;s. The existence of
&amp;ldquo;YouTube Shorts&amp;rdquo; and &amp;ldquo;Instagram Reels&amp;rdquo; is a good example of this. I don&amp;rsquo;t think
there is an inherent problem with content presented in the form of &amp;ldquo;pills&amp;rdquo;. I
understand that they can be useful when we don&amp;rsquo;t have much time to grasp all
the details of a certain topic. However, the problem I see is that this way of
consuming content becoming the norm. Many of us constantly train our brains to
seek brief moments of feeling good, rather than deliberately focusing on one
concept and exploring it in more depth. And this happens all the time without
us even noticing it.&lt;/p>
&lt;p>I think the key thing that we need to recognize is that the amount of
satisfaction (or benefit) that we obtain from consuming these contents does not
always seem to increase at the rate they become available.&lt;/p>
&lt;p>The quality of our being, how we feel, and how we learn, are not solely
determined by the content or information we&amp;rsquo;re exposed to but also determined
by how we intentionally react to them. The way we do things is just as
important as what is being done. The effect of intentionally watching a certain
movie is not the same as watching randomly suggested YouTube videos &amp;hellip; The
effect of choosing a topic and taking the time to learn about it is not the
same as a random platform such as YouTube recommending a random video for
learning X in Y minutes.&lt;/p>
&lt;p>Think about it, even when it comes to learning and education, we see the
results of this. There are concepts well-known to many people such as &amp;ldquo;tutorial
hell&amp;rdquo;. It is also quite common for people to feel like they are improving yet
they are not.&lt;/p>
&lt;p>How content is consumed is just as important as the content that is being
consumed. We have to become more mindful when interacting in the realms of the
internet if we want to benefit from it.&lt;/p>
&lt;p>I think this is where the concepts of &lt;em>we pulling information&lt;/em> and &lt;em>information
being pushed to us&lt;/em> come in handy.&lt;/p>
&lt;h2 id="pulling-vs-being-pushed-to">Pulling vs Being Pushed To&lt;/h2>
&lt;p>In communication, &amp;lsquo;pulling&amp;rsquo; refers to the phenomenon where the receiver
actively requests specific information and then receives it. &amp;lsquo;Pushing&amp;rsquo;, on the
other hand, refers to the phenomenon where a particular piece of information is
sent to the receiver without them asking for it.&lt;/p>
&lt;p>You are essentially pulling information each time you search for stuff using
Google. You are the one who is intentionally asking Google what piece of
information they need to show it to you.&lt;/p>
&lt;p>In contrast, information is pushed to you when one of your favorite platforms
sends you a push notification from your phone or sends an email to recommend
you to check out their brand-new cool stuff.&lt;/p>
&lt;p>Keep in mind that it is not always as easy as this to distinguish whether
information or content you encountered was pulled by you or pushed onto you.
Consider the case where you open YouTube, it is you who initially triggered the
process to open the YouTube, but as soon as you open it, you are welcomed with
a page that is full of video recommendations that you did not specifically ask
for. While from a technical point of view, it might be our HTTP request that
triggered that piece of data to be fetched, from a user point of view, we
see a page that is full of things that we did not initially intend to see.&lt;/p>
&lt;h2 id="maintaining-balance">Maintaining Balance&lt;/h2>
&lt;p>While both pulling and pushing seem to be necessary, an unbalance between these
two concepts makes it harder for us to live mindfully. If you are constantly
being pushed information, you are not actively and intentionally spending your
time. You are like a leaf that is blown away in each wind. Not to mention you
can also be controlled more easily by those apps that you use thanks to their
recommendation algorithms. You converge into what is presented to you.
Likewise, if you are completely closed to information being pushed onto you,
then you are like a closed box, you might miss some of the important stuff
which are happening around you.&lt;/p>
&lt;p>The thing is, it is much more common for people to lose balance by constantly
information being pushed onto them. So what most of us need is to reduce the
amount to which we are being pushed.&lt;/p>
&lt;h2 id="pulling-is-usually-better-for-being-intentional">Pulling is Usually Better for Being Intentional&lt;/h2>
&lt;p>When I reflect on my old school days, most of the things I &lt;em>actually&lt;/em> learned
were not the ones enforced by the school curriculum. They were the topics I
found interesting anyway and took the initiative to learn on my own.&lt;/p>
&lt;p>Pulling information is a more engaging process than things being pushed onto
you and our brains seem to place higher importance on the subjects we are
actively engaged with.&lt;/p>
&lt;p>I think if we want to live our lives more intentionally, what we should aim for
is to be more active in the way we learn, watch, and do. The alternative is
leaving ourselves at the initiative of the companies&amp;rsquo; recommendation algorithms
which are purposefully designed by professionals so that they keep you on their
apps.&lt;/p>
&lt;p>&lt;em>Most of the things we are notified of, or shown are distractions.&lt;/em>&lt;/p>
&lt;p>This being said, what can we do if we want to reduce our exposure to pushed
informations?&lt;/p>
&lt;h2 id="reducing-our-exposure-to-pushed-content">Reducing Our Exposure To Pushed Content&lt;/h2>
&lt;p>I highly suggest that you go to the notification settings of the applications
you use. &lt;em>Disable all kinds of notifications that you think are not something
you want to see deliberately.&lt;/em> For example if you are using a social media
platform, try to disable all kinds of in-app notifications except mentions,
comments, and so on&amp;hellip; I also highly suggest that you disable push
notifications almost for all the apps you use unless the kind of notifications
that are being pushed to you are not related to things that are urgent like
calls, etc. &lt;em>The end-goal here is not to get rid of all notifications but to
get rid of notifications that are not important for us or neither urgent.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>Sometimes, an app might continue to push stuff onto you by sending emails and
so on. &lt;em>Using different emails for primary applications and secondary
applications might help with this as well.&lt;/em>&lt;/p>
&lt;p>&lt;em>Also, remember that it&amp;rsquo;s a mistake to register an app with your primary email
if you&amp;rsquo;ll only use the app for a brief moment. Use disposable emails for those
cases.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>We have talked about how it is sometimes hard to identify the stuff that is
being pushed on us. In some cases, even a UI element can be thought of as
something that is being pushed to us. And indeed, I think there are many cases
where certain UI designs cause more harm to us than good (while benefitting the
related company). I think &amp;ldquo;recommendations&amp;rdquo; sections are usually one of these.
&lt;em>Seek for alternative, lightweight frontends for the applications you use so
that you are less distracted.&lt;/em> Only Let the app direct you when you need a
direction, otherwise try to remove all the noise. &lt;em>If you can&amp;rsquo;t find
alternative frontends to the web applications you use, you can consider using
Browser extensions that help you to minify the content you see.&lt;/em>&lt;/p>
&lt;hr>
&lt;p>&lt;em>Practice mindfulness.&lt;/em> You can set reminders for yourself to check in
periodically (I use &lt;a href="https://chromewebstore.google.com/detail/bell-of-mindfulness/lggmmceliiaoddfnbaccgpfnpoifilic">Bell of
Mindfulness&lt;/a>).
Make it a habit to take a breath in and out while asking yourself specific
questions such as, &amp;ldquo;Am I consciously doing what I&amp;rsquo;m doing right now, or am I
just being controlled by the algorithms?&amp;rdquo; This self-reflection can provide
clarity and intentionality to your actions.&lt;/p>
&lt;hr>
&lt;p>And finally, remind yourself that the best thing we can do in order to be less
disturbed and distracted is actually to not use those apps which distract us at
the first place.&lt;/p>
&lt;h2 id="addendum">Addendum&lt;/h2>
&lt;p>&lt;em>2024-05-24&lt;/em> : I&amp;rsquo;ve been using a Chrome extension called
&lt;a href="https://chromewebstore.google.com/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne">Stylus&lt;/a>
that lets you customize the CSS styles of websites. One problem I had with both
the mobile and web versions of WhatsApp was that archived chats were still
easily accessible at the top, even showing a notification icon. I just hid that
section from the UI using this app.&lt;/p></description></item><item><title>Contemplating Simultaneous Thinking, God and Logos</title><link>https://rugu.dev/en/blog/contemplation-1/</link><pubDate>Sun, 28 Jan 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/contemplation-1/</guid><description>&lt;p>I usually enjoy listening to certain types of ambient music or sounds when
doing repetitive tasks or even when meditating. In the comment section of these
kinds of videos, there are often people spreading love and writing nice things
to each other. After consuming so many videos of this kind, I&amp;rsquo;ve started to
predict that these kinds of comments would be present in a video even before
opening them. Sometimes, it felt like I was reading those comments without even
opening them.&lt;/p>
&lt;p>Even right now, it&amp;rsquo;s highly likely that a random individual somewhere in the
world is contemplating spreading love and positive energy. I don&amp;rsquo;t know
anything about them, yet this statement probably holds true. Now, if I were to
feel a certain affection for this person and they also had the thought of
&amp;ldquo;there&amp;rsquo;s probably another random person out there spreading love,&amp;rdquo; would this
constitute a very basic form of interaction?&lt;/p>
&lt;p>Imagine a simple game, such as XOX. The algorithm you need to follow is pretty
straightforward. Even with the many possible game states, you can generally
categorize most of the outcomes &lt;a href="https://en.wikipedia.org/wiki/Without_loss_of_generality">without loss of
generality&lt;/a>. Now,
let&amp;rsquo;s suppose there are other people in different physical locations who know
the algorithm for playing the game. Assume that these people are also thinking
about the other people whom also contemplate this game in their heads. If these
people were to play O and X in their minds, the algorithm they follow would
dictate how they play which means that they could predict the other person&amp;rsquo;s
moves even without physically interacting with them. Given this scenario, could
we say that these individuals have actually played the game together although
never seeing each other?&lt;/p>
&lt;p>The points I&amp;rsquo;ve made above are basically results of our human ability for
abstract thinking. We can think reflectively and about specific phenomena, as
well as ponder those who thought about these phenomena before us, or thinking
about right now. In essence, it seems to be possible to think about specific
things simultaneously with other people and even predict their thoughts if the
domain in which the thinking is occurring has clear rules.&lt;/p>
&lt;p>If I were to become more rational, would I become more aware of others'
feelings or thoughts of those people whom I&amp;rsquo;ve never seen or physically
interacted with? Would I be able to have simple interactions with them?&lt;/p>
&lt;p>This could also be related to how an omniscient God would understand each of
us, as it would possess knowledge of all logical possibilities. This might even
explain why people who believe in God often feel less alone. If God does exist,
we would never be alone in our thoughts, as there would always be a presence
accompanying us &lt;strong>as long as we are aware&lt;/strong>.&lt;/p>
&lt;p>Honestly, I don&amp;rsquo;t know if any of these thoughts even make sense. However, all
of these concepts remind me of the Stoics&amp;rsquo; understanding of
&lt;a href="https://en.wikipedia.org/wiki/Logos">Logos&lt;/a>. Stoics believed that those who
are capable of reasoning are part of the same community as they were all
interconnected through Logos whether they are physically close to each other or
not.&lt;/p></description></item><item><title>Debloating My Android Phone with ADB</title><link>https://rugu.dev/en/blog/debloat-with-adb/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/debloat-with-adb/</guid><description>&lt;p>My mother recently mentioned that her phone is continually opening certain
windows and prompting her to use services she doesn’t need. After checking her
phone and doing some online research, I found out that many others have also
complained about this issue.&lt;/p>
&lt;p>Apparently, she was referring to pop-ups triggered by a pre-built program
called &amp;ldquo;SIM Menu&amp;rdquo;. This program basically allows operators to send
notifications and even generate pop-ups on your phone. And the frustrating part
is that most of these pop-ups seem to promote irrelevant services. If you
accidentally click &amp;ldquo;OK&amp;rdquo; when one of these pop-ups appears, you get charged by
your provider. It is a carefully set up trap designed to make you accidentally
subscribe to their unnecessary services and pay money.&lt;/p>
&lt;p>Since I prefer simplicity and like to have control over the tools I use. I was
already thinking about removing the bloatware on my phone that came
pre-installed and can&amp;rsquo;t be deleted through the interface. Hell, even some of
the fundamental apps, like a gallery or file manager, are filled with ads. It
gets on my nerves. So, I was already planning to learn how to remove these
bloatware and the situation I described earlier was the final straw for me.&lt;/p>
&lt;p>I&amp;rsquo;ve searched for tools to debloat Android phones and found &lt;code>adb&lt;/code>, Android
Developer Bridge. It&amp;rsquo;s basically a program which allows you to directly create
a shell session for your phone, similar to connecting to a remote server via
SSH (the only difference is that instead of connecting through the internet,
the connection is made via USB).&lt;/p>
&lt;p>Since Android is essentially an OS based on the Linux Kernel, the shell you
connect to will most likely be a variant of the sh dialect. So, for those who
are familiar with working in UNIX environments, its very convenient to remove
or install packages and customize your phone this way.&lt;/p>
&lt;p>In this essay, I document this process of removing bloatware from my phone
as a reference for future use. Hopefully, you find it helpful as well.&lt;/p>
&lt;h1 id="enabling-usb-debugging-mode">Enabling USB Debugging Mode&lt;/h1>
&lt;p>While it is possible to establish an ADB connection to your phone over Wi-Fi, I
chose to use ADB through a USB connection as using Wi-Fi involves certain
security risks. For instance, others on your Wi-Fi network could potentially
connect to your phone, especially if your phone doesn&amp;rsquo;t have proper security
settings. Not to mention that you would need to set up your phone using ADB
through a USB connection first before initiating a Wi-Fi connection anyways.
Which kind of makes using WiFi seem more pointless as the reasons for
preferring Wi-Fi over USB are usually just convenience or not having a USB
cable available.&lt;/p>
&lt;p>To connect your phone using adb via a USB connection, you need to enable USB
Debugging mode on your phone. I won&amp;rsquo;t go into the specifics of this process as
it varies by phone. But for my own phone, I simply navigated to the &amp;ldquo;About&amp;rdquo;
section and tapped &amp;ldquo;MIUI Version&amp;rdquo; multiple times to switch into Developer Mode.
Then, I searched for the &amp;ldquo;USB Debugging&amp;rdquo; option and enabled it.&lt;/p>
&lt;h1 id="connecting-to-your-phone-via-a-shell-session">Connecting to your phone via a Shell Session&lt;/h1>
&lt;p>Once you&amp;rsquo;ve installed &lt;code>adb&lt;/code>, you can view the manual by typing &lt;code>adb help&lt;/code>. You
can also refer to the &lt;a href="https://android.googlesource.com/platform/packages/modules/adb/&amp;#43;/refs/heads/master/docs/user/adb.1.md">online
documentation&lt;/a>.&lt;/p>
&lt;p>To connect to your phone via a shell session, simply type &lt;code>adb shell&lt;/code> and
you&amp;rsquo;re good to go. Most standard UNIX commands such as &lt;code>ls&lt;/code>, &lt;code>cat&lt;/code>, &lt;code>echo&lt;/code>,
&lt;code>grep&lt;/code>, and more can be used.&lt;/p>
&lt;p>Keep in mind that you don&amp;rsquo;t need to enter a shell session just to run specific
commands. You can also use the &lt;code>adb shell &amp;lt;cmd&amp;gt;&lt;/code> pattern to run your particular
command &lt;code>&amp;lt;cmd&amp;gt;&lt;/code>. This approach simply creates a shell session, executes your
command, and closes the session, while forwarding the stdout to your current
shell session.&lt;/p>
&lt;h1 id="uninstalling-bloatware">Uninstalling Bloatware&lt;/h1>
&lt;p>The Command Line Interface (CLI) tool used in Android for interaction with the
Android Package Manager is &lt;code>pm&lt;/code>. This tool basically allows you to list,
install, or uninstall software packages.&lt;/p>
&lt;p>To list the currently installed packages, execute the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages
&lt;/code>&lt;/pre>&lt;p>To view only the default apps on Android, enter this command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages | grep &amp;#39;android&amp;#39;
&lt;/code>&lt;/pre>&lt;p>At this point, I would advice you to search for other unwanted pre-installed
apps known to come with your phone&amp;rsquo;s brand as well as android packages which
are known to be bloatware. Take a list of these apps for future reference so
you can easily repeat this process if you need it later again.&lt;/p>
&lt;p>To delete a specific app from your phone, you first need to identify its
package name. You can accomplish this by searching for it on the internet.
However if you can&amp;rsquo;t still find it, you should be able to locate the app&amp;rsquo;s &amp;ldquo;apk
package code&amp;rdquo; directly on your phone. This process can vary depending on the
phone you&amp;rsquo;re using, so I suggest you look up how to find package codes for
applications on your specific phone model.&lt;/p>
&lt;p>Also, be careful to not to delete anything critical for your system to work. Do
not delete a package if you are not sure that it is not something system
critical.&lt;/p>
&lt;p>Once you get the package.name, you can just run the following command in the
adb shell:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Here, &lt;code>--user 0&lt;/code> specifies the user for which you want to uninstall the
package. User 0 is typically the device&amp;rsquo;s default or primary user. When I have
run the command &lt;code>pm uninstall&lt;/code> without this, it would say package is
successfully deleted but the package would still remain on my phone.&lt;/p>
&lt;p>Keep in mind that we could have also used the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb shell pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Or even:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;h1 id="automating-the-process">Automating the Process&lt;/h1>
&lt;p>Remember that I told you to make a list of the packages you remove. This was
for to make the debloating process easier if you need to do it a second
time on your phone.&lt;/p>
&lt;p>I use a specific &lt;a href="https://github.com/kugurerdem/android-bloatwares">git
repository&lt;/a> for this purpose.
In this repository, I have a file named &lt;code>bloatwares.txt&lt;/code> that contains the
package names of certain prebuilt applications for Mi, Xiaomi, Android, and
third-party applications.&lt;/p>
&lt;p>If I ever need to debloat my phone, or anyone else&amp;rsquo;s, all I need to do is to
run the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>cat bloatwares.txt | xargs adb shell pm uninstall -k --user 0
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you haven&amp;rsquo;t already started, I strongly encourage you to consider debloating
your phone. Install &lt;code>adb&lt;/code> on your computer, connect to your phone using it,
identify packages that seem unnecessary, and free your device from the unwanted
&amp;lsquo;guests.&amp;rsquo;&lt;/p>
&lt;p>Go ahead and take back at least a partial ownership of your phone by getting
rid of these intruders!&lt;/p></description></item><item><title>Incorporating AI Tools Into My Terminal Workflow</title><link>https://rugu.dev/en/blog/vi-llm/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/vi-llm/</guid><description>&lt;p>For those who may not be aware, Neovim is to me what a lightsaber is to a Jedi.
It forms an essential part of my routine, as I use it for nearly all my tasks
involving text. Be it drafting an essay, sending an email, or coding, Neovim is
my go-to tool.&lt;/p>
&lt;p>Moreover, I have a deep admiration for the UNIX philosophy and its command-line
interface programs. It&amp;rsquo;s quite fascinating to observe how these small,
uncomplicated UNIX programs, designed to do one thing flawlessly, interact
effectively using piping mechanisms. Tools like sed, grep, awk, count, cut, and
many others, often prove to be incredibly useful for text processing.&lt;/p>
&lt;p>I can confidently state that both Neovim and UNIX have proven themselves
invaluable in my work.&lt;/p>
&lt;p>However, like many others, I have been introduced to another set of efficient
tools for dealing with text, known as Large Language Models or LLMs. I&amp;rsquo;ve spent
several months experimenting with tools like Co-pilot and ChatGPT, and I&amp;rsquo;ve
found them to be highly beneficial for text-based tasks.&lt;/p>
&lt;p>Naturally, I wanted to utilize the true potential of all these tools in my
interactions including text. For this reason, I began searching for Neovim plugins
and command-line interface programs capable of integrating these AI tools.&lt;/p>
&lt;p>The process of integrating Co-pilot was relatively simple thanks to a
&lt;a href="https://github.com/github/copilot.vim">plugin&lt;/a> available on Neovim.&lt;/p>
&lt;p>However, incorporating ChatGPT into my workflow wasn&amp;rsquo;t as straightforward as I
had hoped. I looked into several neovim plugins, like
&lt;a href="https://github.com/jackMort/ChatGPT.nvim">ChatGPT.nvim&lt;/a>, which allow
interaction with ChatGPT through Neovim. However, the majority of these plugins
seemed like an overkill compared to what I expect from them. They also had many
features designed to simplify the programming process, a job that Co-pilot
already handles for me. Additionally, I would want llms to be accessible not
only in vim but also within my regular terminal environment. I would appreciate
it as a command-line interface tool, which would enable piping, giving
arguments, and flags for more complicated tasks. Unlike Co-pilot, I would like
to use a tool like ChatGPT in a more widespread context.&lt;/p>
&lt;p>Hanging around Twitter, I recently saw a post from
&lt;a href="https://twitter.com/garybernhardt/status/1735090271690637803">Gary&lt;/a>, giving a
credit to Simon Willison&amp;rsquo;s library, &lt;a href="https://github.com/simonw/llm">llm&lt;/a>. I was
surprised to find out that this library was exactly what I was looking for as
well. It was a command-line interface tool that allowed me to interact with
LLMs through my terminal, which is exactly what I wanted. I could pipe the
output of any command into llm, and it would return the result of the input.
For instance, I could pipe the output of a command like &lt;code>cat&lt;/code> into &lt;code>llm&lt;/code>, and
it would return a response from the AI model, which you could pipe or redirect
into another command or file.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Here are some of the examples that comes to my mind on how you could use the
&lt;code>llm&lt;/code> tool:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git diff | llm &lt;span style="color:#e6db74">&amp;#39;Recommend 5 different commit messages for these change&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat essay.txt | llm &lt;span style="color:#e6db74">&amp;#39;Summarize what these are about&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Furthermore, if you keep finding yourself using the same prompts over and over
again, you can create templates for them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for finding synonyms of a word&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;What are the synonyms of the following prompt&amp;#39;&lt;/span> --save synonyms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for rephrasing text&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;Fix grammar mistakes and rephrase the text&amp;#39;&lt;/span> --save rephrase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for finding titles for given content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;Recommend 5 titles for the following prompt&amp;#39;&lt;/span> --save titleize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can later use these templates by passing the &lt;code>-t&lt;/code> flag to the command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Rephrase the text which are copiod in your clipboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xsel -b | llm -t rephrase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find synonyms of the word &amp;#39;serenity&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;serenity&amp;#39;&lt;/span> | llm -t synonyms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find appropriate titles for your document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat vi-llm.md | llm -t titleize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also further specify system messages, choose language model you want to
interact with, and many more things, which you can examine on the
&lt;a href="https://llm.datasette.io/en/stable/help.html">documentation&lt;/a> of the app.&lt;/p>
&lt;h2 id="the-readline-issue">The Readline Issue&lt;/h2>
&lt;p>So, I was quite happy for finding this tool, but the only thing I did not like
about it was that when you try to use chat mode with &lt;code>llm chat&lt;/code> command, the
readline would break my initial GNU readline settings defined in my
&lt;code>~/.inputrc&lt;/code> file.&lt;/p>
&lt;p>When delved into the source code of the repo, I have seen that other people
have been encountering the same
&lt;a href="https://github.com/simonw/llm/issues/376">issue&lt;/a>.&lt;/p>
&lt;p>I figured out that the issue is likely caused by the readline libraries used to
build the &lt;code>llm chat&lt;/code> command overriding the default readline settings.
Because I&amp;rsquo;m not very familiar with these Python libraries, I decided not to try
fixing the issue by changing the source code. Instead, I have decided to use
the &lt;code>rlwrap&lt;/code> command to address this problem. Basically, &lt;code>rlwrap&lt;/code> is a
program that allows you the wrap the readline of the programs that you run so
that you can still use the application&amp;rsquo;s readline as it was respecting your
shell&amp;rsquo;s readline settings.&lt;/p>
&lt;p>I know that by the time you, the reader, come across this, the issue may
already be fixed. However, the purpose of this piece is not just to provide a
solution to this particular problem, but to share how I approached solving it
and what I learned from the experience.&lt;/p>
&lt;h2 id="the-vi-llm-wrapper">The vi-llm Wrapper&lt;/h2>
&lt;p>Anyways, the problem with the &lt;code>rlwrap&lt;/code> solution was that, yeah, it allowed me
to use my shell&amp;rsquo;s readline settings, so I could use vi keybindings when giving
prompts, but I still could not copy, highlight, and modify the answers that are
given to me, or the previous prompts that I have give. For this, I have built a
shell script called &lt;a href="https://github.com/kugurerdem/vi-llm">vi-llm&lt;/a> based around
one of my favorite unix utils &lt;a href="https://joeyh.name/code/moreutils/">vipe&lt;/a>, and
llm. &lt;code>vi-llm&lt;/code> is basically a wrapper for llm that gets all of its prompts
from Vim, enabling an interactive communication with ChatGPT using llm, by
letting you input a message through the vim editor, then sending that message
to the LLM interface. subsequently displaying any logs received from the
interface right back in your text editor, repeatedly, until the user quitting
the vim editor without doing any changes. In essence, it operates similarly to
a chat interface. You type in messages (or commands) which get sent to the LLM
system, and any response from the LLM system gets displayed back to you. This
cycle continues, enabling continuous, interactive communication with the LLM
from your command line.&lt;/p>
&lt;p>Here is a quick showcase:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kugurerdem/vi-llm/master/showcase.gif#center" alt="vi-llm-showcase">&lt;/p>
&lt;p>If you are interested, you can check out the &lt;a href="https://github.com/kugurerdem/vi-llm">github repo.&lt;/a>&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I&amp;rsquo;ve been using Copilot and ChatGPT for months and now I am using this tool for
a few days now. Now I have all the tools that I have needed in order to utilize
my workflow even more, a strong autocompletion tool such as Copilot, a program
that allows me to interact with large language models through shell: llm, and
finally, a wrapper vi-llm based around llm for my personal use case.&lt;/p>
&lt;p>I hope that this essay was helpful or at least interesting to some of you.&lt;/p></description></item><item><title>Understanding Keyboard Events Better</title><link>https://rugu.dev/en/blog/understanding-keyboard-events/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/understanding-keyboard-events/</guid><description>&lt;p>In this essay, I describe how I made a Node.js module to listen to keypresses
across the system on Linux machines using X. This experience helped me grasp
how the OS and Window Managers handle keyboard inputs, clarifying the reasons
behind an unexpected behavior I had encountered before, which I also mention in
the essay.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning more about how keyboard events are handled,
this essay might be of interest to you.&lt;/p>
&lt;h2 id="an-issue-about-remapping-keys">An Issue About Remapping Keys&lt;/h2>
&lt;p>As a person who uses VIM for many things I do, seamlessly transitioning between
VIM modes is essential for my workflow. However, the default key for returning
back to normal VIM mode is the Escape key, necessitating me to remove my hands
from the keyboard in order to reach it.&lt;/p>
&lt;p>This is exactly why many VIM users, including myself, remap the Escape key to
the Caps Lock key. This adjustment is particularly beneficial for those who are
already accustomed to pressing the Shift key for uppercase characters.&lt;/p>
&lt;p>However, I&amp;rsquo;ve encountered a minor issue with this setting: Certain applications
seem indifferent to the remappings I&amp;rsquo;ve configured. Occasionally, when I press
the Caps Lock key, the operating system interprets it as an Escape key press,
while the specific program I&amp;rsquo;m using still recognizes it as the original
physical key pressed.&lt;/p>
&lt;p>I have encountered this problem both in my Linux computer, and Windows
computer. So the problem itself is OS-agnostic. However I&amp;rsquo;ve unintentionally
identified the reason behind this occasional discrepancy while I was working on
a recreational project.&lt;/p>
&lt;h2 id="linux-and-keyboard-events">Linux and Keyboard Events&lt;/h2>
&lt;p>Recently, a friend asked me if it&amp;rsquo;s possible to create macros using Node.js. I
confidently said, &amp;lsquo;Sure, it&amp;rsquo;s probably easy.&amp;rsquo; After a quick search, I found a
desktop automation library called robotJS and wrote a simple script where
specific keys are pressed regularly by the script.&lt;/p>
&lt;p>However, I started wondering if it was possible to trigger those keypresses
after a user presses a certain key. To achieve this, I needed to listen to
keypress events on a system-wide level. I searched for suitable Node.js
libraries for this task on Linux, but I couldn&amp;rsquo;t find one that worked
seamlessly.&lt;/p>
&lt;p>There were libraries like &lt;code>iohook&lt;/code>, but they seemed to lack support for
listening to Linux keyboard events in the latest versions of Node.js. Some
solutions only focused on capturing keyboard events within the current window
associated with the process.&lt;/p>
&lt;p>I stumbled upon a library called &lt;code>xev-emitter&lt;/code> but it didn&amp;rsquo;t provide what I
needed as it mainly dealt with listening to xevents of a specific X windows.&lt;/p>
&lt;p>After some contemplation, I decided to create my own Node.js module using
&lt;code>xinput&lt;/code> underneath, just for the sake of it and out of curiosity. &lt;code>xinput&lt;/code>
is a Linux tool that allows listening to keyboard events and provides an
interface to monitor events from connected keyboards.&lt;/p>
&lt;p>For instance, running the command &lt;code>xinput&lt;/code> gives me a list of available input
devices connected to my PC:&lt;/p>
&lt;pre tabindex="0">&lt;code>⎡ Virtual core pointer 	id=2	[master pointer (3)]
⎜ ↳ Virtual core XTEST pointer 	id=4	[slave pointer (2)]
⎜ ↳ 2.4G Mouse 	id=10	[slave pointer (2)]
⎜ ↳ 2.4G Mouse Consumer Control 	id=11	[slave pointer (2)]
⎜ ↳ Synaptics TM3336-004 	id=14	[slave pointer (2)]
⎣ Virtual core keyboard 	id=3	[master keyboard (2)]
 ↳ Virtual core XTEST keyboard 	id=5	[slave keyboard (3)]
 ↳ Power Button 	id=6	[slave keyboard (3)]
 ↳ Video Bus 	id=7	[slave keyboard (3)]
 ↳ Power Button 	id=8	[slave keyboard (3)]
 ↳ 2.4G Mouse 	id=9	[slave keyboard (3)]
 ↳ 2.4G Mouse System Control 	id=12	[slave keyboard (3)]
 ↳ Ideapad extra buttons 	id=13	[slave keyboard (3)]
 ↳ AT Translated Set 2 keyboard 	id=15	[slave keyboard (3)]
 ↳ 2.4G Mouse Consumer Control 	id=16	[slave keyboard (3)]
&lt;/code>&lt;/pre>&lt;p>&lt;code>xinput&lt;/code> also has a command type that lets you listen to a specific input
device. For instance, if I use &lt;code>xinput test 15&lt;/code>, it listens to the device with
the specified ID 15. When I run the command &lt;code>xinput test 15&lt;/code> and then press the
&amp;lsquo;a,&amp;rsquo; &amp;rsquo;s,&amp;rsquo; and &amp;rsquo;d&amp;rsquo; keys on my keyboard, the output I get is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>key press 38
key release 38
key press 39
key release 39
key press 40
key release 40
&lt;/code>&lt;/pre>&lt;p>Now, with these two commands, we can iterate through all the input devices
related to keyboards and listen to them. We can create a script that first
lists the available input devices, filters them, and then runs the command
&lt;code>xinput test&lt;/code> for each of them.&lt;/p>
&lt;p>However, there is still a minor problem. How do we understand which key is
pressed just by looking at the numbers that xinput gave us? How can we know
that 38 stands for the key &amp;lsquo;a&amp;rsquo;?&lt;/p>
&lt;p>The numbers provided by xinput are known as X Key Codes. These codes represent
the physical keys pressed on the X layer. They are essentially similar to Linux
Input Event Codes, which the Linux Operating System generates to represent the
physical keys pressed. For reasons I&amp;rsquo;m not aware of, &lt;a href="https://wiki.archlinux.org/title/Keyboard_input#Identifying_keycodes_in_console">X Key Codes are
incremented by 8 compared to Linux
keycodes&lt;/a>&lt;/p>
&lt;p>Now, the challenge lies in making sense of each X Key Code. We need a mapping
between the X Key Codes and their corresponding keys. However, what they
correspond to can be configured by users. In fact, I&amp;rsquo;ve configured this using
the command &lt;code>setxkbmap -option &amp;quot;caps:swapescape&amp;quot;&lt;/code>. So, although pressing the
same keys on a physical keyboard will result in the same key codes, the
interpretation by your operating system or window management server can be
configured. Therefore, the correspondence of each keycode with what you&amp;rsquo;ve
pressed might vary from one environment to another. In the X protocol, you can
view the mapping between X Key Codes and X KeySyms by running the command
&lt;code>xmodmap -pke&lt;/code>.&lt;/p>
&lt;p>This is essentially what I did in the Node.js module I created to listen to
keyboard events using X:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Obtain the list of available input devices by running &lt;code>xinput&lt;/code> as a
subprocess.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Filter the devices; you don&amp;rsquo;t need all of them, just their IDs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For each ID, run the command &lt;code>xinput test id&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the result of &lt;code>xmodmap -pke&lt;/code> to understand the semantic meaning assigned
to each physical keypress, known as a KeySym.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re curious, you can check out the module I created,
&lt;a href="https://github.com/kugurerdem/node-xinput-events">Node XInput Events&lt;/a>.&lt;/p>
&lt;h2 id="probably-a-better-approach">Probably a Better Approach&lt;/h2>
&lt;p>After implementing the module mentioned earlier, I discovered the existence of
a Linux utility called showkey that allows listening to pressed keys.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to create a similar script using showkey under the hood. In
fact, this might have been a better approach compared to what I did above
because it operates on a more fundamental level than X.&lt;/p>
&lt;p>Similar to how we mapped between X Key Codes and their corresponding X Key
Codes, we could create a mapping between Linux Event Codes and their meanings
by examining the &lt;a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h">Linux source code for the input event
codes&lt;/a>&lt;/p>
&lt;p>Moreover, using scripts like xinput as subprocesses under our script might not
be the optimal approach for implementing an EventEmitter library to listen to
system-wide keypresses. The conventional way is likely to interact with the X
server using an X library. Unfortunately, I couldn&amp;rsquo;t build the nodeJS x11
library on my computer and chose not to delve into it much.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The series of experimental processes I went through greatly enhanced my
understanding of what happens behind the scenes when I simply press a key on my
physical keyboard.&lt;/p>
&lt;p>Returning to the initial scenario I described, when you&amp;rsquo;re developing a
program, you can act upon the values of key syms or key codes. While the key
codes might remain the same, the key syms—the meanings attached to those key
codes—can differ. It appears that some applications focus on key codes,
disregarding your local options.&lt;/p>
&lt;p>Essentially, at the kernel layer, there are only keycodes. Your operating
system assigns meaning to these keycodes through specific configuration files,
which you can either directly modify or use another program for modification
(in this case, the X Window Management server). Since it&amp;rsquo;s generally more
convenient to alter settings in the window management layer, most people
configure their preferences through utilities provided by their window manager,
and the window manager handles the interaction with the OS.&lt;/p>
&lt;p>This serves as a compelling example of how casually experimenting with things
can significantly contribute to one&amp;rsquo;s understanding of the core concepts they
are dealing with.&lt;/p></description></item><item><title>Sockets and Message Framing</title><link>https://rugu.dev/en/blog/sockets-and-message-framing/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/sockets-and-message-framing/</guid><description>&lt;p>I&amp;rsquo;ve recently been involved in a fintech project that demands high performance,
posing various challenges related to a solid understanding of low-level
concepts, concepts that are primarily relevant to the inner workings of the
tools and protocols used beneath the surface.&lt;/p>
&lt;p>One challenge involved separating two tasks into different processes:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The main process, responsible for constructing the necessary business state from
incoming messages through a specific socket connection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The monitoring process, allowing users to track relevant changes in the state.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>To enable communication between these processes, I implemented Inter-Process
Communication (IPC), and sockets naturally came to mind as a suitable solution.&lt;/p>
&lt;p>Since not all incoming protocol socket messages to the main process were
relevant to user interaction, I set up a mechanism to filter and process the
relevant messages for the front-end perspective. These refined messages were
then sent to the monitoring processes through a socket connection.&lt;/p>
&lt;p>However, acknowledging that sockets operate at a low level and suspecting I might
be overlooking something about the socket protocol, I aimed to confirm that each
piece of data sent from the main process would result in one received data on
each monitoring process. Delving into the self-assigned task of understanding
how sockets work, it turned out that one sent message does not always have to
correspond with one received data.&lt;/p>
&lt;p>When sending messages through a TCP socket, it separates our messages into
multiple parts called packets and sends those. The receiving socket then
reorders and reassembles those packets into a chunk of the original message which is
sent – a data – and appends it to the socket&amp;rsquo;s buffer. Since it is said that
these packets are reordered and reassembled by the TCP socket itself, most
people assume that one sent data will result in one data received. The thing is,
sockets do not wait for all incoming packets to be reordered and reassembled to
append them to their buffer. Instead, they append the chunks that are validated
and arrive in the correct order as they keep coming. A socket can essentially be
considered a Duplex Stream; it does not frame your messages and does not
necessarily know which parts of the incoming/outgoing data actually constitute a
meaningful message from your application layer&amp;rsquo;s perspective.&lt;/p>
&lt;p>From the perspective of socket users, the inner workings of &amp;ldquo;packets&amp;rdquo; are not
something to be worried about. The chunks added to the socket&amp;rsquo;s buffer are
simply referred to as &amp;ldquo;received data&amp;rdquo; or &amp;ldquo;data chunks&amp;rdquo;. The meaningful portions
of this data, converging as intended by the sender to convey a message, are
simply labeled as &amp;ldquo;messages&amp;rdquo;.&lt;/p>
&lt;p>Since the sockets lack awareness of the types of data and the desired format for
transmission, users of the socket must devise methods to identify which portions
of the incoming data constitute meaningful messages. This process, commonly
known as message framing, involves two approaches: the length prefix approach,
where each message is prefixed by the byte length of its content, and the
delimiter approach, where messages are separated by a designated delimiter
character or sequence of characters.&lt;/p>
&lt;p>What struck me the most about diving into these concepts was observing the
widespread tendency for people to misunderstand the behavior of one of the most
fundamental tools a developer may need to interact with – a socket. For
instance, consider the experience of a developer who highlights this issue:&lt;/p>
&lt;blockquote>
&lt;p>True story: I once worked for a company that developed custom client/server
software. The original communications code had made this common mistake.
However, they were all on dedicated networks with high-end hardware, so the
underlying problem only happened very rarely. When it did, the operators would
just chalk it up to “that buggy Windows OS” or “another network glitch” and
reboot. One of my tasks at this company was to change the communication to
include a lot more information; of course, this caused the problem to manifest
regularly, and the entire application protocol had to be changed to fix it. The
truly amazing thing is that this software had been used in countless 24x7
automation systems for 20 years; it was fundamentally broken and no one
noticed. [1]&lt;/p>&lt;/blockquote>
&lt;p>This entire process once again shows the importance of us developers being
genuinely curious about the tools and protocols we work with. If I hadn&amp;rsquo;t asked
such questions about the tool which I am using, just because the program works,
I might have fallen into the same pitfalls that others have encountered.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;p>1 - Cleary, Stephen. “Message Framing.” Message framing. Accessed November 21,
2023. &lt;a href="https://blog.stephencleary.com/2009/04/message-framing.html">https://blog.stephencleary.com/2009/04/message-framing.html&lt;/a>.&lt;/p></description></item><item><title>Reflections on My Journey into Software Development</title><link>https://rugu.dev/en/blog/computer-science-reflections/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/computer-science-reflections/</guid><description>&lt;p>In the following essay, I will reflect on my journey which led me to become a
software developer.&lt;/p>
&lt;p>I intend this essay to be more of a personal reflection than a technical
advisement. But whether you are a seasoned programmer or a newcomer to the
world of software development, I hope that my experiences and insights will
provide valuable guidance and inspiration for your journey.&lt;/p>
&lt;h1 id="before-college">Before College&lt;/h1>
&lt;p>When I was around 6 or 7 years old, I used to hang out with my
&lt;a href="https://www.yuempek.com">cousin&lt;/a> a lot. Whenever I would see him on his
computer, he would always be engaged in something interesting like developing
recreational applications.&lt;/p>
&lt;p>During those years, I had a strong interest in a game called &lt;a href="https://en.wikipedia.org/wiki/Peg_solitaire">Solo
Test&lt;/a>. When I introduced the game
to my cousin, he immediately had the idea of writing code to create &lt;a href="http://yuempek.com/examples/javascript/solotest-Javascript.htm">this
game&lt;/a> on his
computer and even devloping a solution engine for it.&lt;/p>
&lt;p>I witnessed the entire process of him writing lines of code and transforming
them into something visible on the computer screen. It felt like pure magic to
me. Since that moment, he has become one of my idols. Not only did he introduce
me to the concept of programming, but he also helped me explore the world of
creating games and animations with Macromedia Flash (which is no longer
supported in most browsers nowadays).&lt;/p>
&lt;p>Despite my early acquaintance and interest in programming, I didn’t seriously
start learning it until high school. My attention was often consumed by other
hobbies, such as playing games, reading books, and creating pivot animations.&lt;/p>
&lt;p>In high school, I started to become more aware of my analytical nature and my
inclination to approach things methodically. Even in my interest in philosophy,
I found myself more drawn to the schools of analytical philosophy rather than
continental philosophy. Given my frequent use of computers, I thought it would
be beneficial to apply my analytical tendencies to understand the tools I
already used daily, and with the guidance of my aforementioned cousin, I
decided to embark on the journey of learning programming.&lt;/p>
&lt;p>I started to learn Javascript as a programming language because it was the only
programming language that could be easily executed directly in a web browser,
my cousin saw it as a great investment for the future, and the learning
resources for Javascript were readily available.&lt;/p>
&lt;p>I don’t recall the exact courses I initially took to learn the syntax of
JavaScript, but I vividly remember the learning process itself. After grasping
a particular concept, I would seek guidance from my cousin on what to learn
next. He would assign me simple tasks for practice but with specific
constraints, such as not using library tools like sorting functions, string
manipulation utilities, and so on. Instead, he would usually expect me to
implement these functionalities from scratch. Despite being skeptical of this
approach, I experienced the plus of having learned things this way when I took
my first algorithm course in college. Everything was so easy on me and I could
focus on more advanced subjects like interpreter design, data structures,
programming language paradigms, and so on when my colleagues were trying to
learn the syntax of the programming language we were using.&lt;/p>
&lt;p>The tasks my cousin assigned to me included writing functions that returned
strings with specific patterns and creating functions to draw lines using only
pixel-drawing utilities. I was even challenged to implement sorting algorithms
like selection sort and quick sort on my own. Some the programs I have made
during my high school days are still available on my github repositories, if
you are intereseted in them, you can check: &lt;a href="https://kugurerdem.github.io/canvas-js-experiments/">My Canvas Javascript
Experiments&lt;/a>, &lt;a href="https://kugurerdem.github.io/js-experiments/">Javascript
Experiments&lt;/a>, and some other
projects that I have decided for the fun of it (such as &lt;a href="https://kugurerdem.github.io/physics-v0/">Physics
Simulator&lt;/a>, &lt;a href="https://github.com/kugurerdem/conway-s-game-of-life">Conway&amp;rsquo;s Game of
Life&lt;/a>, &lt;a href="https://kugurerdem.github.io/Running-Game/">Running
Game&lt;/a>, &lt;a href="https://kugurerdem.github.io/text-machine/">Text
Machine&lt;/a>, &lt;a href="https://kugurerdem.github.io/Wolfram-s-Elementary-CA/">Wolfram&amp;rsquo;s Elementary
Cellular Automata&lt;/a>).&lt;/p>
&lt;p>In summary, all these exercises allowed me to delve deeper into programming
concepts and sharpened my problem-solving skills. The combination of guidance
from my cousin and hands-on practice proved to be an invaluable learning
experience.&lt;/p>
&lt;h1 id="studying-mathematics-at-college">Studying Mathematics at College&lt;/h1>
&lt;p>In Turkey, the universities recruit their students through a score from a
central placement exam. For this, like all other students, I was supposed to
prepare for the entrance exam if I wanted to study a profession at one of the
top universities.&lt;/p>
&lt;p>When preparing for this exam, I had to interact extensively with mathematics
due to its significant influence on the test results. This, combined with my
existing interest in analytical philosophy, began to develop a greater
interest in mathematics. My initial plan was to study computer science at one
of the prestigious universities in Turkey (such as Boğaziçi, ITU, Bilkent,
ODTU) and also pursue a minor in mathematics. This way, I could satisfy my
interest in CS while maintaining my connection with mathematics, thus expanding
my options. However, various unfortunate events that occurred in my life during
my exam preparation period caused my focus to become scattered just 3-4 months
before the exam, and I couldn&amp;rsquo;t dedicate myself fully to studying. In the end,
I couldn&amp;rsquo;t achieve the desired score (I needed to be in the %0.1 but instead, I
was in %1), and I had to make a choice: either study CS at a mediocre
university or pursue mathematics at one of the prestigious universities
mentioned earlier while continuing my independent exploration of CS.&lt;/p>
&lt;p>Fortunately, with the recommendation of a friend, I discovered that Bilkent
University, one of the top universities I mentioned above, had a highly
flexible Bachelorship of Mathematics program. Realizing that I could take
around 14 elective courses, including the compulsory electives of the CS
department, I saw an opportunity to unofficially pursue a double major with CS.
I decided to study mathematics at Bilkent University and utilize my elective
courses to take the CS department&amp;rsquo;s curriculum. This turned out to be a wise
decision that I am currently satisfied with and have no regrets about.&lt;/p>
&lt;p>With the decision I made above, I started taking almost all of the compulsory
CS courses except two (Operating Systems, and 4th year Algorithms course) right
from the beginning of my first semester, despite being a Mathematics major.
Even though I wouldn&amp;rsquo;t have a CS diploma, I saw no problem with this because I
believed that as long as I had competence and knowledge in the subject matter,
I would have no trouble finding jobs in the software industry.&lt;/p>
&lt;p>Now, looking back, I realize that my thoughts were accurate. While I can&amp;rsquo;t
speak for other fields, in the realm of software development, the chances of
not finding a job despite being skilled in your area are very low. So, whether
or not you have a formal diploma isn&amp;rsquo;t a significant issue as long as you excel
in your work. Of course, having a formal background in CS can bring many
advantages to your career, including as it can provide networking
opportunities, access to internships, and a structured learning environment.
However, not having one will not be the end of the world as long as you possess
a strong command of your field.&lt;/p>
&lt;h1 id="some-of-the-problems-i-faced-during-college">Some of the problems I faced during College&lt;/h1>
&lt;p>Although I am satisfied with choosing mathematics department and progressing
from CS, it doesn&amp;rsquo;t mean everything about majoring in Mathematics was perfect
and without costs.&lt;/p>
&lt;p>One problem I faced was that the mathematics education often felt too pedantic
compared to other fields. This led to a loss of interest among some students,
including myself, in their major. Additionally, taking CS courses alongside Math
courses allowed me to see that the time and energy invested in the math classes
had potential opportunity costs. I realized that I could have directed that
energy toward the pursuits that are more relevant to me. The amount of energy
and time I spent on other courses like CS and Philosophy often resulted in
understanding the most important aspects, while in Mathematics, it felt more
binary - either you understood the topic as a whole or struggled with some
concepts.&lt;/p>
&lt;p>Furthermore, I frequently encountered the misconception that my degree in
mathematics limits me to math-related fields such as tutoring or academia. This
highlights a lack of awareness among people about the diverse career
opportunities available to mathematics graduates. It sometimes becomes
burdensome to explain myself to others and break free from this narrow
perception.&lt;/p>
&lt;h1 id="what-values-did-studying-math-provide-to-me-for-software-development">What values did studying Math provide to Me for Software Development&lt;/h1>
&lt;p>One of the important aspects of studying Mathematics is the need for caution in
our proofs. Skipping a step can undermine the validity of the entire proof. I
sometimes wonder whether this leads people who study math to not take things for
granted and be skeptical about implementation details. However, I believe that
it has certainly made me more mindful when implementing various concepts,
emphasizing the significance of considering potential errors or pitfalls and I
also believe that this skill is just as important in software development.
Similar to the caution required in mathematical proofs, being skeptical about
implementation details and not taking things for granted is vital in ensuring
the reliability of our software systems.&lt;/p>
&lt;p>In addition to this, like many other majors, studying mathematics has taught me
the importance of rigorously expressing my thoughts and ideas. It has also
enhanced my endurance when it comes to handling heavy workloads. Passing most of
my math courses required substantial study efforts; it was nearly impossible to
succeed without dedicated preparation. The time required to excel in math
courses often exceeded the time needed to achieve the same grade in other
subjects. While I&amp;rsquo;m unsure if there is a direct correlation between studying
math and developing patience, I certainly believe that mathematics demands a
significant amount of patience as most mathematical concepts necessitate
prolonged concentration and attention to detail.&lt;/p>
&lt;p>So is it reasonable for people who want to become programmers to study Math?
Probably not. As I mentioned earlier, while studying math can enhance one&amp;rsquo;s
understanding and approach to problem-solving in many ways, the decision
ultimately depends on your willingness to invest the required effort. It&amp;rsquo;s
crucial to consider the costs, especially for those who aren&amp;rsquo;t interested in
learning abstract concepts. I chose to study math because I genuinely believed I
had an interest in the subject. Moreover, the university I attended provided
convenient opportunities to take computer science courses alongside it. However,
over the past two years, my enthusiasm for academic mathematics waned as my
interests shifted more toward different areas such as Computer Science.
Nonetheless, I managed to successfully graduate.&lt;/p>
&lt;p>While studying math can bring benefits, I believe it should not be pursued
solely for pragmatic reasons. Otherwise, it is more likely to become a
burdensome experience rather than an enjoyable one.&lt;/p>
&lt;h1 id="my-first-works">My first Works&lt;/h1>
&lt;p>In the last 3 years of my college (out of 5), I have started to lose my
attention regarding my degree. I think this was triggered by the COVID 19 pandemic
case, combined with my increasing interest in more pragmatic areas such as
investment, financial technologies, and my existing interest in software
development. As a result, during the COVID-19 pandemic, I shifted my focus away
from mathematics and started exploring cryptocurrencies with a friend of mine. We
learned about blockchain and decentralized finance (DeFi) and pursued
opportunities combining my programming knowledge with his research skills.&lt;/p>
&lt;p>One of my first automations regarding DeFi was related to the concept of
airdrop. In the realm of decentralized finance (DeFi), an airdrop is a common
process of tokens being distributed as rewards for user engagement. What I have
done was create a script that bought tokens and sent them to various accounts
of ours in the chain to increase the amount of airdrop that we could
potentially gain. Although the project detected and addressed the activity,
despite not gaining any rewards, this experience introduced me to valuable
blockchain &amp;amp; programming concepts (like the patterns often used in the web3.js
library and async/await mechanisms).&lt;/p>
&lt;p>We didn&amp;rsquo;t just stop there. We continued to explore opportunities that could be
automated and created programs to benefit from it. Our projects included
creating an automation tool for purchasing tokens in Initial Dex Offerings
(IDOs), developing an &lt;a href="https://github.com/kugurerdem/yakFarmer">automated reinvesting
bot&lt;/a> for the &lt;a href="https://yieldyak.com/">Yield Yak Auto
Compounder&lt;/a>, and crafting a &lt;a href="https://github.com/kugurerdem/DVFBot">market-making
bot&lt;/a> for &lt;a href="https://rhino.fi/">DeversiFi&lt;/a>,
now known as Rhino Finance. While our work might not have been at a
professional level, these projects proved sophisticated enough to enhance our
skills and grant us the autonomy to research and explore new opportunities.
This experience was truly rewarding, as it demonstrated how my programming
knowledge could be put to practical use.&lt;/p>
&lt;h1 id="my-first-job">My first Job&lt;/h1>
&lt;p>As I mentioned in the previous section, I began building software projects in
the pursuit of earning money even before working for someone else. This
unconventional approach eventually made acquiring my first job in the field
very easy. It all began when I was casually discussing my recent projects with
a friend, who was a CTIS student. He was surprised that I hadn&amp;rsquo;t applied for a
software development job given my knowledge and skills. He
recommended me to one of his friends who was thinking about creating a startup
to make the opportunities in DeFi more accessible to traditional investors. I
underwent technical and non-technical interviews with the CEO and soon started
working as a part-time remote software developer for them.&lt;/p>
&lt;p>My primary responsibility was a project I had proposed myself. I was tasked
with developing a data analytics panel and a data aggregation mechanism to
support our researchers in managing funds effectively. The autonomy I had over
this project was exciting, but it quickly became evident that the scope of the
project exceeded my experience, and the value that it would provide once it was
done didn&amp;rsquo;t seem like would be able to match the effort required. This project
became my firsthand encounter with the challenges of project development; time
estimation (see: &lt;a href="https://en.wikipedia.org/wiki/Hofstadter%27s_law">Hofstadter&amp;rsquo;s
Law&lt;/a>), increasing complexity
due to not knowing best practices (see: &lt;a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver
Bullet&lt;/a>), etc.&lt;/p>
&lt;p>I often found myself in a place where I would want to discuss the decisions I
take while developing the project. As a result, all these experiences
emphasized the importance of having a mentor (especially in your Junior
Developer periods) in navigating such complexities.&lt;/p>
&lt;h1 id="a-new-mentor">A new Mentor&lt;/h1>
&lt;p>While working at my first Job, I got the opportunity to meet with a very
&lt;a href="https://gwn.wtf/mortals.html">interesting person&lt;/a>, as he likes to call himself
as well &amp;ldquo;not your usual hacker&amp;rdquo;.&lt;/p>
&lt;p>In one of my previous essays &lt;a href="https://rugu.dev/en/blog/switching-to-archlinux/">Switching to Arch Linux&lt;/a> I mention how we met in a short passage as follows:&lt;/p>
&lt;blockquote>
&lt;p>About a year ago, I was invited to a pair coding session at the startup where
I was working. The developers were receiving consultancy from a strange
person. At one point, he took control of the screen sharing while reviewing
some of the pull requests that had been made to our codebase. When he shared
his screen, there was nothing but a black screen. Suddenly, a terminal screen
appeared with his keystrokes and he quickly began examining the codebase,
providing feedback on people’s code at a speed I had never seen before. He was
able to jump between different files in an instant, examining the diffs that
were made in different git commits.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>After seeing what I saw, I thought to myself, ‘If I were able to develop and
refactor code at that speed, I would save a lot of time, I could have spent
more time thinking about the actual stuff with as little friction as possible.
I want to have this power.’ So I have looked at his CV and realized that he was
knowledgeable on topics that many developers, including myself, struggle with.
Influenced by this, I started asking him (he was our consultant, after all) as
many questions as I could and focused on the resources he suggested and the
technologies he used.&lt;/p>&lt;/blockquote>
&lt;p>From that point on, I began to frequently ask him questions about software
development and seek his guidance. Luckily, he was usually more than willing to
answer my questions. At some point, we admired each other’s thinking style and
approach to software development so much that we even started working together
on several projects, which have continued for a year now.&lt;/p>
&lt;p>Whether it&amp;rsquo;s related to software development or not, I consider having a mentor
to be a significant advantage for improvement. When it comes to
learning basic concepts like programming languages and certain frameworks,
which are well-documented, having a mentor may not matter much. However, when
dealing with complex problems that require interpretation, experience, and a
nuanced approach, having a mentor, or at least an advisor, becomes crucial.&lt;/p>
&lt;p>I view mentors as a means of gaining refined knowledge, especially in areas
where I could potentially stumble into common pitfalls, which could otherwise
cost me a significant amount of time.&lt;/p>
&lt;p>Mentors, like all things, can be good or bad. A mentor is good if they:&lt;/p>
&lt;ul>
&lt;li>Want to teach you how to fish instead of merely handing you a fish. This
teaching approach may involve providing you with essential keywords to search
for solutions to your problems or, at times, demonstrating their methods
and approaches through concepts like pair programming, acquainting you with
effective problem-solving techniques.&lt;/li>
&lt;li>Give constructive criticism, and they do so by explaining the reasoning
behind their assessments of your achievements. This not only helps you
understand your areas of improvement but also encourages a deeper
comprehension of your work.&lt;/li>
&lt;li>Maintain an open attitude toward new questions. They create an environment
where you feel comfortable seeking guidance, knowing that they are genuinely
interested in assisting your growth and development.&lt;/li>
&lt;/ul>
&lt;p>In my journey as a software developer, From &lt;a href="http://yuempek.com">yuempek&lt;/a> to
&lt;a href="https://gwn.wtf/mortals.html">gwn&lt;/a>. Whenever I&amp;rsquo;ve come across a new concept or
a challenging problem that needs a unique solution, seeking the advice of more
experienced individuals has been incredibly helpful.&lt;/p>
&lt;p>The bottom line is if you want to improve your skills as a software developer
and do it quickly, having a mentor is essential. They offer insights,
perspectives, and expertise that can speed up your progress and help you
navigate the complexities of the field more effectively.&lt;/p>
&lt;h1 id="in-summary">In Summary&lt;/h1>
&lt;p>Here are some of the claims I would make based on my computer science journey
so far:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When it comes to learning stuff, don&amp;rsquo;t ever shy away from getting your hands
dirty. You cannot just improve just by watching people doing stuff, after
learning new concepts regarding any programming language or so always try to
think about what things you can achieve with the limited tools you have at
your hand. You will be surprised how many things can be accomplished even
with very fundamental stuff. My initial learning process regarding
programming was just like this, I would usually just try to execute one of
the random ideas that would come which can be accomplished just with the tool
I have learned.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Whether it&amp;rsquo;s a small or large project, vault them in a place where you can
access them later. If possible, you can even make them public on platforms
like GitHub or similar platforms. This will not only motivate you to expand
your collection of your programs but also enable you to track your
progress. It&amp;rsquo;s a highly satisfying experience to be able to see and showcase
the first programs you have written.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you are pursuing a degree other than computer science, it&amp;rsquo;s important not
to overestimate the value of a formal computer science education. While such
an education certainly has its advantages, like providing a strong foundation
in theoretical concepts and algorithms, as well as granting you a legitimate
certificate of graduation that signals your proficiency in these subjects,
not having a CS degree will not hinder your entry into the software industry.
As long as you can demonstrate your ability to complete tasks effectively,
people will be interested in hiring you. Whether you hold a degree or not, if
you possess the determination and passion required, doors will likely open
for you in the software industry.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seek mentorship. Learn from those with refined experience. It will
significantly speed up your learning pace, especially when trying to
understand non-trivial stuff. However, keep in mind that the qualities of
your mentor also matter a lot. What I often see is that smart people, just
like in other areas as well, are usually better at picking the mentor of
their interests as well. It is not just important to have a mentor but also
to have a mentor that suits your taste, otherwise, a bad mentor with whom you
spent time might come at the cost of a better one.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>On the Importance of Typing Fast</title><link>https://rugu.dev/en/blog/on-typing-fast/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/on-typing-fast/</guid><description>&lt;h2 id="typing-fast-is-important">Typing Fast is Important&lt;/h2>
&lt;p>It is often mentioned that the bottleneck in building software projects is not
one&amp;rsquo;s typing ability but ability to think clearly, and to design the
architecture effectively. Afterall, if typing speed was so essential to
programming, the time difference between rewriting an already existing project
with that of creating it from scratch would not be as high as it is.&lt;/p>
&lt;p>While I agree that typing speed is not essential to programming, I cannot
relate on how this fact is used by lots of people to justify their thinking of
typing fast being not important for the development process.&lt;/p>
&lt;p>The comparison made above between writing a project by scratch and rewriting an
already existing one, is good for showing that typing speed itself cannot be a
sufficient criteria for being a good developer. But what it does not show is
the unimportance of typing fast. In an an ideal setting, we could have compare
the development speed of developers who almost have the identical cognitive
abilities and experiences with different typing speeds. Unfortunately, I do not
heard any such experiments. So what I will do to show you the importance of
typing is instead will give you my arguments for it.&lt;/p>
&lt;p>First of all, programming is not just about thinking and designing systems but
also about debugging bugs, refactoring code, experimenting, and finally
researching or discussing stuff. One commonality of all these exercises is that
they are being iterative processes. Any programmer with a sufficient experience
would probably understand what this means. I remember countless times where I
needed to put debug logs lots of different places in the code, so that I can
exactly point source of the bugs. Same applies for experimenting with the tools
I am not used to so that I can get an idea about the inner workings of them.
Even searching stuff on the internet is often an iterative process where one
search leads to another prompt so that you can understand the related concepts.
All of these processes are usually proceed by trial and error, where in each
iteration you are somehow bottlenecked by the necessary actions that are needed
to be done in order to proceed to the next iteration. I think what typing speed
is esentially helpfull for is to reduce the time between those iterations.&lt;/p>
&lt;p>Yes, it&amp;rsquo;s essential to spend time on the architecture of the code, technology
stack, algorithms which will be used and requirement specifications. However
this doesn&amp;rsquo;t diminish the importance of typing fast. To the contrary, this just
makes typing fast more important because reducing the time spent on typing
would allow us to allocate more time to the essential works.&lt;/p>
&lt;p>&lt;strong>Even though typing itself is not so important, typing fast would still be one
of the most critical skills for developers because it reduces the time spent on
an insignificant task of typing.&lt;/strong>&lt;/p>
&lt;p>This reasoning is similar to what &lt;em>Hans Hoffman&lt;/em> once said:&lt;/p>
&lt;blockquote>
&lt;p>“The ability to simplify means to eliminate the unnecessary so that the
necessary may speak.”&lt;/p>&lt;/blockquote>
&lt;p>Typing is the way we actualize our ideas into real programs.&lt;/p>
&lt;p>If you do not have the faculties to realise your ideas at the rate they occur,
then they can accumulate to a point where you eventually reach a position where
you have to abandon some of them. Essentially, the faster you can transform
your ideas into code and test them, the less likely you are to experience an
overflow of untested and undeveloped ideas.&lt;/p>
&lt;h2 id="improving-typing-speed">Improving Typing Speed&lt;/h2>
&lt;p>Given that the typing speed of an average person is around 40 WPM, even
reaching 70-80 WPM would be a significant leap for most people. While pursuing
further improvements is still admirable, its important to be aware of that
there comes a point where the cost-effectiveness of pushing ones typing speed
diminishes, as the challenge escalates when you approach your personal limits.
Although having a personal average typing speed of 105 WPM on
&lt;a href="https://10fastfingers.com">10FastFingers&lt;/a>, I still like to exercise typing
speed. But I do this as a kind of challenge rather than an expectation of being
more productive.&lt;/p>
&lt;p>The main advice I would like to give the people who want to improve their
typing speed is to learn touch typing, a technique where you become accustomed
to using all 10 of your fingers to type without looking at the keyboard.
Although increasing typing speed without a common technique like touch typing
is indeed possible, I still like to recommend touch typing as it is a
standardised way of typing which its know-how can also be transferred to other
people in a consistent way. I personally used sites like
&lt;a href="https://keybr.com">keybr&lt;/a> and &lt;a href="https://www.typingclub.com/">typing club&lt;/a> while
I was initially learning touch typing, whereas I still use
&lt;a href="10fastfingers.com">10FastFingers&lt;/a> and &lt;a href="https://play.typeracer.com/">Type
Racer&lt;/a> for exercise.&lt;/p>
&lt;p>For developers, I also strongly recommend becoming accustomed to using the
English keyboard layout even their native language is not English. Most
programming languages are designed to use symbols readily available on a US
keyboard, such as {}[]/`\&amp;quot;&amp;rsquo;, which may not be as easily accessible on other
layouts, (e.g. Turkish layout).&lt;/p></description></item><item><title>My Experience on Switching to Arch Linux</title><link>https://rugu.dev/en/blog/switching-to-archlinux/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/switching-to-archlinux/</guid><description>&lt;p>About a year ago, I was invited to a pair coding session at the startup where I
was working. The developers were receiving consultancy from a strange person. At
one point, he took control of the screen sharing while reviewing some of the
pull requests that had been made to our codebase. When he shared his screen,
there was nothing but a black screen. Suddenly, a terminal screen appeared with
his keystrokes and he quickly began examining the codebase, providing feedback
on people&amp;rsquo;s code at a speed I had never seen before. He was able to jump between
different files in an instant, examining the diffs that were made in different
git commits.&lt;/p>
&lt;p>After seeing what I saw, I thought to myself, ‘If I were able to develop and
refactor code at that speed, I would save a lot of time, I could have spent
more time thinking about the actual stuff with as little friction as possible.
I want to have this power.’ So I have looked at &lt;a href="https://gwn.wtf/resume.html">his
CV&lt;/a> and realized that he was knowledgeable on
topics that many developers, including myself, struggle with. Influenced by
this, I started asking him (he was our consultant, after all) as many questions
as I could and focused on the resources he suggested and the technologies he
used.&lt;/p>
&lt;p>The inspiration from this hacker guy, combined with the very precious help from
a friend of mine who had a strong interest in operating systems (he uses Arch in
Qubes OS btw), being libre, and having control over his computer, led me to
switch to Arch Linux. I have also benefited a lot from discussions on hackernews
and from youtubers like Luke Smith which I also heard from the Qubes OS friend
of mine.&lt;/p>
&lt;p>In this post, I will first provide a brief overview of Linux and Arch Linux in
particular. Then, I will discuss my reflections on the past few months,
including the downsides and upsides of switching to Arch Linux. Finally, I will
explain the programs that I currently use in my workflow.&lt;/p>
&lt;h2 id="what-are-my-reasons-for-using-linux">What are my reasons for using Linux?&lt;/h2>
&lt;p>Unlike MacOS or Windows, Linux is a free and open-source operating system.
Perhaps you are already know that a vast majority of servers actually run on
Linux. Android, which is the operating system most phones use, is a specific
variant of the Linux Operating System. By these means, many developers already
seem to acknowledge the importance of learning Linux for practical reasons.
However, the controversy usually arises when it comes to using Linux on a
personal computer.&lt;/p>
&lt;p>For an average computer user, it typically doesn&amp;rsquo;t matter which operating
system they use as long as it doesn&amp;rsquo;t interfere with their daily tasks.&lt;/p>
&lt;p>However, in my case, as my views have become more nuanced, switching to Linux
has started to be more appealing.&lt;/p>
&lt;p>Here are some of the reasons why I prefer using Linux over MacOS or Windows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Both Windows and MacOS forces you their ecosystem by their updates. With each
update, its more likely that your Desktop Environment is cluttered by a new
application which Microsoft added and most likely you will not even use. Most
of the prebuilt stuff that are coming with Windows, I do not use at all. I
think the same argument also holds for MacOS, as using one of their apps
usually forces you to use other Apple apps and you to stick with their
environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since both MacOS and Windows are closed-source, we don&amp;rsquo;t know for sure what
they do under the scenes. Windows, for example had a builtin keylogger. If
you are curious about this, please type &amp;ldquo;Windows builtin keylogger&amp;rdquo; to your
favorite search engine. You will encounter many entries explaining how to
disable builtin keylogging. Although I do not have sufficient reasons to
claim that the Apple is doing the same thing, in practice, there is nothing
preventing these Close Sourced applications to do things like that besides
legal issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You need to pay some money in order to use both MacOS and Windows, whereas
Linux is essentially free. You can set up Linux on a computer with no cost at
all except some finite amount of time you will put in to learn things.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux is highly customizable and allows users to modify and tailor their
environment to meet their specific needs. In contrast, Windows and Mac OS are
more limited in terms of customization. This partly makes Linux a better
choice for users who aim to be a power user, a user who wants to have control
over their operating system and want to modify or customize it to meet their
specific needs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux offers a variety of versions that cater to the different needs of
various users, which is a significant advantage. These versions, known as
Linux distros, are essentially Linux systems with additional packages
specifically designed for certain users. I have not come across a similar
phenomenon in either MacOS or Windows. Linux provides more options than any
other proprietary operating system can offer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using a product often means more than just using it; it also means becoming
part of a group. Using Linux involves you in a community populated by hacker
minded people. And whether you indend it or not being part of a group
influences your habits. By immersing yourself in an environment filled with
more experienced individuals, you become more exposed to their knowledge and
ideas.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I understand that similar points could be made for the sake of Windows or
MacOS. Examples include Linux not being able to run some proprietary software
that these operating systems can, or Linux not being as convenient because you
often have to figure out most things yourself. I get that. However, all things
considered, the value that Linux provides to me exceeds the values that those
proprietary OSes provide.&lt;/p>
&lt;h2 id="what-is-unique-about-arch-linux">What is unique about Arch Linux?&lt;/h2>
&lt;p>Essentially, a Linux distro is a version of the Linux operating system that
comes packaged with additional software and tools.&lt;/p>
&lt;p>Oversimplicated, but an intuitive formula can be given as:&lt;/p>
&lt;p>&lt;code>DISTRIBUTION = KERNEL + SOME ADDITIONAL DEPENDENCIES&lt;/code>&lt;/p>
&lt;p>Theoretically, there&amp;rsquo;s nothing stopping you from doing in one Linux
distribution what you can do in another simply by altering the &amp;lsquo;SOME ADDITIONAL
DEPENDENCIES&amp;rsquo; part of the above formula. These additional dependencies can
range from package managers to init systems, as well as the initial software
that comes with the distribution.&lt;/p>
&lt;p>When you examine the variety of potential distributions one can select from, it
can be overwhelming. Why are there so many different Linux distributions? The
answer is because many people have different objectives when using an operating
system and therefore require different dependencies. Additionally, numerous
organizations and communities each have their distinct views on what
constitutes a good Linux distribution.&lt;/p>
&lt;p>While distros like Ubuntu focus on being more friendly and welcoming to new
users, some distros, like Debian focus on stability and some like Arch, focus
on a certain combination of being minimal, cutting-edge and active.&lt;/p>
&lt;p>To me the key principles that Arch Linux were emphasasising (which can also be
read in their &lt;a href="https://wiki.archlinux.org/title/Arch_Linux">wiki&lt;/a>), were more
appealing than the other mainstream distros available.&lt;/p>
&lt;p>Arch Linux essentially distinguishes itself as a minimalist distribution with a
very knowledgeable community. This fact partially explains why Arch is
considered one of the most cutting-edge distributions out there &amp;ndash; its active
community maintains available packages that Arch users can install through a
community-driven repository called the Arch User Repository.&lt;/p>
&lt;p>When you install Arch, you don&amp;rsquo;t receive anything but a virtual console and
specific programs that you instructed the Arch installer to download. Unlike
other distributions that build many packages into your system by default, which
might include several programs that you may need but at the cost of downloading
additional unwanted programs, Arch Linux instead puts the customization
responsibility on the user. Which allows you to install and focus solely on
what you need.&lt;/p>
&lt;h2 id="some-reflections">Some Reflections&lt;/h2>
&lt;h3 id="getting-used-to-it">Getting used to it&lt;/h3>
&lt;p>Switching from Windows to Arch Linux was really challenging as in Arch Linux,
it is you that needs to bear practically all responsibilities regarding your
computer. As a result of this transition, I began to appreciate all the
features we often take for granted; screen lockers, clipboard functionalities,
power management, multimedia keys, and so on. These functionalities are usually
managed by specific processes running unseen in the background. The average
computer user might not realize that these are distinct programs that need
setup. However, when you are building your system on a minimalist distribution,
your knowledge of such details tends to increase.&lt;/p>
&lt;h3 id="variety-of-solutions">Variety of Solutions&lt;/h3>
&lt;p>When you want to accomplish something on Linux, there are many alternative ways
to do it. As a result, you&amp;rsquo;re often left wondering, &amp;ldquo;which method/approach
should I choose first?&amp;rdquo; I think that these kinds of questions frequently
puzzled me. Here are some examples:&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;I am using X as a Window Server Protocol but I heard that Wayland is a newer
protocol, should I switch to it?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;A program called pipeware for audio handling is recommended but some suggest
something called pulseaudio, which one shall I use?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;Shall I use vim or neovim? I heard that vim is organized by one person whereas
neovim is more community driven.&amp;rsquo;&lt;/p>&lt;/blockquote>
&lt;p>Don&amp;rsquo;t misunderstand me. I&amp;rsquo;m not suggesting that these questions are irrelevant.
They indeed become meaningful when the minor differences between them begin to
matter. However, I believe that the best approach is to simply select a tool
that resolves the problem at hand without overthinking and keep progressing in
our work. It&amp;rsquo;s not beneficial for beginners to obsessively search for the
&amp;lsquo;best&amp;rsquo; program. Often, opting for a &amp;lsquo;sufficient&amp;rsquo; solution can also be the
&amp;lsquo;best&amp;rsquo; choice, considering the time you might waste finding a program.&lt;/p>
&lt;h3 id="some-beginner-mistakes">Some beginner mistakes&lt;/h3>
&lt;p>One common mistake I see among beginners, which I also made myself, is
attempting to do things without understanding them properly. This is especially
common among new Linux users who may wind up breaking their system by copying
and pasting commands from some forum. They tend to install programs that
perform the same functions and use different package managers that configure
multiple dependencies and configuration files. Which often leads to one manager
disrupting the changes made by the other, and so on.&lt;/p>
&lt;p>While it&amp;rsquo;s understandable that people may want to work in the same way they&amp;rsquo;re
accustomed to, this habit can also hinder them from getting used to the Linux
environment. For instance, instead of looking for programs that allow
installations through GUI-based applications, it&amp;rsquo;s more beneficial to
understand how to operate the native package manager through a terminal, learn
how to build things from source code using makefiles, and so on.&lt;/p>
&lt;p>The solutions people try to replicate their previous workspace can become
overly complicated. In these cases, it can be better not to solve the &amp;lsquo;problem&amp;rsquo;
in the first place. Hell, even I&amp;rsquo;ve been guilty of this myself. Since I loved to
use MSPaint, whenever I needed to draw something on Linux, I used to run a
Windows instance on QEMU and start MSPaint with a bash alias that I had set up.
In retrospect, this was a poor solution as it would have been just simpler to
switch to another drawing program designed for Linux.&lt;/p>
&lt;h3 id="dual-boot">Dual Boot&lt;/h3>
&lt;p>Setting up a dual-boot computer with Linux and Windows could seem like a good
choice for those interested in learning Linux. However based on my experience,
it is usually a bad idea. I made the error of installing Linux Mint alongside
Windows few years ago only to find myself frequently trying to synchronize my
files between the two systems. The maintenance that was required increased due
to the usage of both systems. Moreover, having the option to fall back on
Windows when facing issues prevented me from engaging with the Linux
environment enough. I could not learn how to troubleshoot and resolve issues on
myself.&lt;/p>
&lt;p>In my view, what I have described above is like attempting to learn swimming
while using a flotation device. It&amp;rsquo;s probably more effective to dive in and
learn the Linux operating system without relying on Windows as a safety
net.&lt;/p>
&lt;p>I guess the only valid reason for wanting to keep Windows installed on a
computer is to play video games or use specific programs that are not available
on Linux. Other than that, I suggest using Linux for most things you do.&lt;/p>
&lt;h3 id="gui-vs-terminal">GUI vs Terminal&lt;/h3>
&lt;p>Linux users often use terminal programs as they sometimes offer more
flexibility and power for certain tasks. The tasks are usually completed by
using command-line interface (CLI) programs which allows users to enter
commands to perform various actions. This is different from programs with a
graphical user interface (GUI) which usually have buttons and menus.&lt;/p>
&lt;p>Even when using GUIs, we often end up performing repetitive tasks manually. In
these kinds of situations, using a terminal instead of a GUI program can become
really handy. As simple CLI can easily be used programmatically. They can be
used in loops, conditionally, and to pipe the output from one program to
another. This approach can be a game-changer, especially for those who aspire
to become power users. Here are a few simple examples of where this approach
has saved me a significant amount of time:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Recently, I had a batch of 113 weirdly rotated images, but I was able to
rotate them all to the desired orientation using the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code> for file in *.jpg;
 do
 convert $file -rotate 90 rotated-$file;
 done
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>I used &lt;code>yt-dlp&lt;/code> to easily download youtube videos and playlists. It was one
of the most comfortable downloading experiences I had.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I used &lt;code>pdfcrop&lt;/code> for cropping PDF files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I changed the structure of folders that have many files in them by using
simple for loops alongside with &lt;code>mv cp rm&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Not to mention how much its easier to install packages that are on AUR or Arch
Repository compared to installing stuff in Windows.&lt;/p>
&lt;p>Overall, I strongly believe that the power of interacting with programs through
terminal can increase one&amp;rsquo;s overall productivity.&lt;/p>
&lt;h3 id="arch-linux-manuals">Arch Linux manuals&lt;/h3>
&lt;p>One caveat of using command-line interfaces (CLIs) is that it can be easy to
forget the specifics of the interface. As a result, it is essential for terminal
users to know how to quickly open and find the information they need in manual
pages in order to effectively use CLIs.&lt;/p>
&lt;p>Thankfully, most programs in Linux already have their own manuals available
through the &lt;code>man&lt;/code> command. When I need to use a certain utility or CLI function,
all I do is open the terminal through a keybinding that I have set up and type
&lt;code>man programname&lt;/code>, then I can quickly scroll through the manual page using VI
keybindings.&lt;/p>
&lt;p>Despite the fact that I am already acquinted by heart with some of the most
important flags and utilities of the programs that I use, I am also a lot better
(faster) at finding the stuff I need. It is just as much important, if not more
important, to be able to find the stuff you need by knowing them by heart.&lt;/p>
&lt;h2 id="current-workflow">Current Workflow&lt;/h2>
&lt;p>All of the configs for the apps below can be found from my &lt;a href="https://www.github.com/kugurerdem/dotfiles">dotfiles
github repository&lt;/a>.&lt;/p>
&lt;h3 id="window-manager">Window Manager&lt;/h3>
&lt;p>I do not use any desktop environments. I use a tiling Window Manager (WM), a
type of software that automatically arranges and resizes application windows in
a non-overlapping fashion, without the need for manual dragging and resizing.
The particular WM I use now is called &lt;code>dwm&lt;/code>, it is one of the tools that are
built by the hacker organization &lt;a href="https://suckless.org/">suckless&lt;/a>.&lt;/p>
&lt;p>Having switching to a tiling window manager, I now realize that how much of a
hassle was it to manually resize, drag, and select all my application windows.
Besides slowing me down, your average desktop environment also takes a lot of
space with their tilebars and etc. which I might want to use for seeing more
content.&lt;/p>
&lt;p>dwm comes with another program called &lt;code>dmenu&lt;/code> which enables you to select list
of options from the menu and do whatever you want with it. Initially dwm uses
dmenu to make the user easily open the programs they want to open through a
certain shortcut.&lt;/p>
&lt;p>I also use &lt;code>dwmblocks&lt;/code> to control the contents of the info bar on the top left.
I only show Volume, Battery, Memory and Date info there.&lt;/p>
&lt;h3 id="keyboard-layout">Keyboard Layout&lt;/h3>
&lt;p>Since I am from Turkey, I need to use Turkish characters in my daily life a lot
especially when interacting with my friends. The thing is I also find English
keyboard layout very productive, especially when it comes to coding and using
Vim. As a result, I needed a mechanism to be able to benefit from both of these
functionalities. For this, I have attached a shortcut to switch between TR and
US layouts.&lt;/p>
&lt;p>I have also swapped the Escape key with the CapsLock key as I use the escaping
functionality a lot when using VIM but do not use Caps Lock that much. It is
ergonomically a lot more preferable to use the CapsLock key for the Escape
functionality.&lt;/p>
&lt;p>Here are my settings in .xinitrc that imply those changes:&lt;/p>
&lt;pre tabindex="0">&lt;code># ~/.xinitrc

setxkbmap -option &amp;#34;caps:swapescape&amp;#34;
setxkbmap -model pc104 -layout us,tr -option grp:win_space_toggle
&lt;/code>&lt;/pre>&lt;p>I am also aware that I could have used &lt;code>tr-alt-q&lt;/code> layout which is basically an
English keyboard layout but if you use AltGr, keys like &lt;code>i,o,u,g,c&lt;/code> turns into
&lt;code>ı,ö,ü,ğ,ç&lt;/code>. The problem is that the only way I found was to change the keycode
tables through &lt;code>.Xmodmap&lt;/code> and it was buggy. I could not find a simple and clean
way to implement this layout&lt;/p>
&lt;h3 id="terminal--shell">Terminal &amp;amp; Shell&lt;/h3>
&lt;p>As terminal, I use &lt;code>st&lt;/code>, so far I have not seen particular advantage of using st
over other possible terminals that I could have use Alacritty or so, I just
needed a terminal that is lightweight and st was one of the possibilities I
could choose.&lt;/p>
&lt;p>As shell, I mostly use bash. But I understand using zsh is perfectly fine in a
personal environment as well. The only possible problem that I can think of zsh
is portability problem of the scripts written for it.&lt;/p>
&lt;h3 id="text-editing-and-programming">Text editing and programming&lt;/h3>
&lt;p>I use &lt;code>neovim&lt;/code> for almost all my works involving text. Neovim is a fork of Vim,
a highly configurable text editor that is designed to be extendible and also
efficient through the maximal use of keyboard both with macros and
shortcuts. It also comes with a powerful syntax highlighting engine and support
for a wide range of programming languages and file formats. As a dialect of Vim,
Neovim is fully compatible with Vim and uses the same configuration files and
command syntax, but it includes additional functionality and improvements that
are not available in the original Vim. dialect of vim.&lt;/p>
&lt;p>&amp;lsquo;Why use neovim instead of vim?&amp;rsquo; you might ask. Right now, it does not matter to
me whether I use vim or neovim since in both of these the things I want is
available. I use neovim because it was my first decision to go with it and
because of this I already have my files configured for neovim. The reason why I
initially chose neovim over vim was because of a certain workflow video I have
seen on youtube: Vim had not some the plugins that were used in the video. Later
on, I thought that video was full of unnecessary stuff so I gave up on it.&lt;/p>
&lt;p>Getting used to vim has significantly improved my speed and comfort when
programming as its command mode is very efficient for text navigation and
manipulation without even having to use mouse or moving your hand much.
When my friends see me getting done stuff in VIM they sometimes refer to it as
&amp;lsquo;black magic&amp;rsquo;, I like this a lot too. =)&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8n-ylg-pw6s?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;p>I should also mention that I have started to convert some of my .odt, .docx
files like diaries, logs, records to plain text just because it gives me to
flexibility to be able to edit/read them through simple text editors such as
vim.&lt;/p>
&lt;h3 id="terminal-multiplexer">Terminal Multiplexer&lt;/h3>
&lt;p>A terminal multiplexer is a software program that allows multiple terminal
sessions to be created, accessed, and controlled from a single terminal window
or console. It enables users to have multiple terminal sessions running
simultaneously, switch between them, and manage them easily.&lt;/p>
&lt;p>Since I use terminal for almost all the text work I do including software
development, it is, thus, ergonomically important for me to have a way to manage
different programs through one terminal.&lt;/p>
&lt;p>I do this thorugh a program called &lt;code>dvtm&lt;/code>, an alternative for tmux.&lt;/p>
&lt;p>Although I can split screens in vim when doing software development, it does not
give the same flexibity and ease of use the dvtm gives. There are some
programs you might want to see running simultaneously through one terminal
instead in addition to being able to edit/write files. You can do the latter in
vim, but the former is not so trivial to achieve.&lt;/p>
&lt;p>Since &lt;code>dvtm&lt;/code> already solves a problem that vim splits solve, I do not use vim
splits anyways.&lt;/p>
&lt;p>Here is an example showcase of dvtm:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/martanne/dvtm/gh-pages/screencast.gif#fullsize" alt="Example DVTM
Showcase">&lt;/p>
&lt;h3 id="file-manager">File Manager&lt;/h3>
&lt;p>I use &lt;code>ranger&lt;/code>, considering to switch to &lt;code>lf&lt;/code> but also don&amp;rsquo;t see a reason for it
since I am already used to &lt;code>ranger&lt;/code>.&lt;/p>
&lt;p>As far as I remember the only thing I have changed in ranger is some of the
priorities on which programs to use when openning files and to enable image
preview mechanism.&lt;/p>
&lt;p>Before getting used to ranger I was using a file manager with GUI named
&lt;code>dolphin&lt;/code>.&lt;/p>
&lt;h3 id="taking-notes">Taking Notes&lt;/h3>
&lt;p>I used lots of different note-taking apps such as Google Keep, Obsidian, Notion…
The problem is, almost all of these apps come with features that I do not use at
all, I mostly use note-taking applications as a way to remember the things that
I intended to do and for this, all I need is a way to sync my files between my
Phone and Computer. I used telegram for this purpose for a while, but since its
purpose is not this, I then looked for some alternatives.&lt;/p>
&lt;p>Meanwhile, I found &lt;code>gitjournal&lt;/code>, it is a git based note taking application with
a Mobile App. On my phone, I use its own application whereas on my computer, I
just use the &lt;code>gitjournal&lt;/code> script that I created that updates the notes by
automatically running commands such as &lt;code>git pull&lt;/code> &lt;code>git commit&lt;/code> &lt;code>git push&lt;/code> before
and after opening &lt;code>nvim&lt;/code> to change note files.&lt;/p>
&lt;p>The script for this can be found &lt;a href="https://github.com/kugurerdem/dotfiles/commit/8eb5c90e3db4fe4e553e9caea23607c88333c0ce#diff-b756de9b4e56d77950c9933ad361337ca35b7a23f479d34d9ac28a8ac29db497">here&lt;/a>.&lt;/p>
&lt;h3 id="password-management-and-otp">Password Management and OTP&lt;/h3>
&lt;p>&lt;code>pass&lt;/code> and &lt;code>pass-otp&lt;/code>&lt;/p>
&lt;p>Also there is a very simple script called &lt;code>passmenu&lt;/code> which uses dmenu to fetch
the passwords from pass easily. For passphrase aplet to open, you need &lt;code>gtk2&lt;/code> or
&lt;code>gtk3&lt;/code> though.&lt;/p>
&lt;h3 id="wifi--bluetooth">Wifi &amp;amp; Bluetooth&lt;/h3>
&lt;p>I use &lt;code>bluetoothctl&lt;/code> to connect bluetooth devices and use &lt;code>networkmanager&lt;/code> &amp;amp;
&lt;code>nmcli&lt;/code> to connect to the internet.&lt;/p>
&lt;h3 id="web-browser">Web Browser&lt;/h3>
&lt;p>I just use &lt;code>brave&lt;/code> like a normal human being. I like that it has a builtin
adblocker. Since I like moving with vim keybindings, I have also installed an
extension called &lt;a href="https://vimium.github.io/">vimium&lt;/a>. This extension helps you to navigate your browser
through vim keybindings.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t67Sn0RGK54?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Switching to Arch Linux was a challenging experience due to its steep learning
curve. I had to deal with many things that I always used, but never realized
that there were actual programs for those functionalities, such as clipboard,
screen locks, and opening screens. It took some time to get used to it, but now
I am so accustomed to using Arch Linux that I don&amp;rsquo;t even want to use Windows
anymore, except for cases like playing video games (which I also don&amp;rsquo;t do it
much these days).&lt;/p>
&lt;p>It&amp;rsquo;s also fun to challenge yourself and succesfully get over those challenges.&lt;/p></description></item><item><title>An Argument for Idealism</title><link>https://rugu.dev/en/blog/idealism-argument/</link><pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/idealism-argument/</guid><description>&lt;p>&lt;em>This essay was originally written for the &amp;lsquo;Introduction to Philosophy I&amp;rsquo;
(PHIL103) course at Bilkent University, where we delved into various branches of
philosophy, including consciousness. It reflects some of the thought processes
that arose as I grappled with these philosophical questions. It&amp;rsquo;s important to
note that this essay is not an exact reflection of my personal beliefs, but
rather an exercise in argumentation.&lt;/em>&lt;/p>
&lt;p>&lt;em>Despite this, I believe the arguments presented in this essay hold value and are
worth exploring. My hope is that this essay provides you with insight and
provokes thought, and that you find value in engaging with the ideas presented
here.&lt;/em>&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Believing in a particular framework that describes the nature of existence,
known as an ontology, can greatly influence an individual&amp;rsquo;s perspective on life
and their actions. Three such ontologies are Physicalism, Dualism and Idealism.&lt;/p>
&lt;p>Physicalism states that all phenomena can be explained in terms of physical
concepts. If a person believes in Physicalism, they may prioritize material
possessions and physical experiences, and focus on achieving practical goals.
This belief can also affect their beliefs about the afterlife and the nature of
the self.&lt;/p>
&lt;p>Dualism, on the other hand, is a view that posits the existence of two
fundamental and distinct kinds of substances or principles: matter and mind.
This view is similar to Physicalism in that both agree that there exist physical
objects. But is different in the sense that it holds that the mind and the body
are distinct entities that cannot be reduced into one another.&lt;/p>
&lt;p>In this article, I argue that we have sufficient reason to believe that objects
that exist are not physical, refuting both Physicalism and Dualism. I do this by first
showing that the existence of physical objects cannot be known, and then
combining this belief with the principle of parsimony, also known as Ockham&amp;rsquo;s
Razor. As a result, this argument supports the ontology of Idealism, which is
the view that reality is ultimately mental in nature.&lt;/p>
&lt;h1 id="argument">Argument&lt;/h1>
&lt;p>Let me present you the outline of my argument:&lt;/p>
&lt;blockquote>
&lt;p>P1. If agents can know whether something exists, then they know so a priori
or a posteriori.&lt;br>
P2. Agents don’t know a priori whether physical objects exist.&lt;br>
P3. Agents don’t know a posteriori whether physical objects exist.&lt;br>
C1. Agents cannot know whether physical objects exist.&lt;br>
P4. If existance of a thing cannot be known and assuming it does not give us
more explanatory power than what we are left without it, then there is
no reason assuming it exists. (parsimony principle)&lt;br>
P5. Assuming existence of physical objects does not give us more explanatory
power than what we are left without it.&lt;br>
C2. There is no reason for assuming that physical objects exists.&lt;/p>&lt;/blockquote>
&lt;p>The first premise &lt;strong>(P1)&lt;/strong> is very easy to see, if not self-evident. By
definition, a priori knowledge means the knowledge we gain without experiencing
whereas a posteriori knowledge means the knowledge we gain with experience. It
is either one or the other.&lt;/p>
&lt;p>The real challenge is to show that P2 and P3 are true.&lt;/p>
&lt;p>For &lt;strong>(P2)&lt;/strong>, we can say that agents&amp;rsquo; understanding of physical objects are
fundamentally acquired through the sensory experiences they have. For example,
physicists do not know the behavior of an electron until they perform certain
experiments, such as observing its interactions with other particles or
measuring its properties using certain equipments.&lt;/p>
&lt;p>Also, keep in mind that a priori knowledge is the knowledge that is not
contingent. Whereas it is not possible to conceive a triangle that has 4 sides,
it is, possible to conceive physical objects not being exist.&lt;/p>
&lt;p>&lt;strong>(P3)&lt;/strong> can be deduced by claiming that a representation is not the same thing
as the thing it represents, and that what we don&amp;rsquo;t deal with physical objects
themselves, but with their representations.&lt;/p>
&lt;p>&lt;em>Representation of a thing, is not the same thing as it represents.&lt;/em> For
example, a wine in a menu is not the same thing as a wine, for you cannot drink
the wine in a menu but the wine itself. The words we use for describing stuff,
the concepts we have in minds are also representations of things. When it comes
to representations, there always are stuff that you can do with one but not with
another.&lt;/p>
&lt;p>Furthermore, our experiences of the world are limited by the capabilities of our
senses. We can only perceive a small range of colors and other sensory
information, and this information is not experienced directly but is interpreted
by our brains. This is why we can be susceptible to optical illusions and other
forms of sensory deception. Additionally, our experiences of physical objects
are not of the objects themselves, but of their representations in our minds.
This means that &lt;em>We don&amp;rsquo;t deal with physical objects themselves, but with their
representations.&lt;/em>&lt;/p>
&lt;p>This is analagous to one of the metaphors Donald Hoffman, a cognitive scientist,
likes to use. The sensory systems that humans possess (such as touch, smell,
sight, sound, and hearing) function as a user interface that hides the true
complexity of reality (e.g. the circuits and voltages in a computer) and allows
individuals to control and interact with it without needing to understand it. He
compares this to the way that a desktop interface on a computer hides the inner
workings of the device and allows users to control it through icons and actions
like dragging and clicking (Hoffman).&lt;/p>
&lt;p>&lt;strong>(P4)&lt;/strong> is also referred as principly of parsimony, or Ockham&amp;rsquo;s Razor. The
principle helps us to simplify our thinking by reducing the number of competing
frameworks that compete with each other. There are two reasons I follow this
reason.&lt;/p>
&lt;p>Firstly, whether we know reality is necessarily simple or not, unless there is a
good reason or advantage to believe a concept over other explanations, we are
justified in not believing it.&lt;/p>
&lt;p>Secondly, we already use this principle a lot when doing science. In general,
the massive embracement and success of this principle in scientific fields
provides a reason to think that it is a useful and reliable guide for
eliminating certain hypotheses.&lt;/p>
&lt;p>Finally, let us consider &lt;strong>(P5)&lt;/strong>,&lt;/p>
&lt;p>In P3, we demonstrated that our understanding of the world is derived from our
experiences and observations. This is based on representations, not the things
themselves. We do not obtain these representations after having the concept of
physical objects; rather, it is the other way around.&lt;/p>
&lt;p>Even without accepting the existence of physical objects, we are already capable
of conducting science. Our assumption of the existence of physical objects is
simply a mental shortcut that we use to try and comprehend our surroundings.
However, we do not necessarily need this assumption.&lt;/p>
&lt;p>Moreover, all of the regularities that we observe in the world would still be
possible even if we only accepted the existence of mental substances. In this
way, what we refer to as physical objects would be fundamentally a type of
mental substance. This does not violate Ockham&amp;rsquo;s Razor, as there are already
strong arguments, such as Descartes&amp;rsquo; cogito ergo sum, that support the existence
of mental things.&lt;/p>
&lt;h1 id="criticisms">Criticisms&lt;/h1>
&lt;p>Now that I have proposed my position in advance, it is now a good time to
consider some of the potential criticisms and misconceptions that could be
raised against this position.&lt;/p>
&lt;h2 id="what-is-it-that-is-represented">What is it that is represented?&lt;/h2>
&lt;p>&amp;ldquo;If physical objects does not exists, and the only thing that we deal with is
physical representations, then what is it that is represented? There cant be a
representation of a thing that does not exist.&amp;rdquo; one might say.&lt;/p>
&lt;p>Yes, I agree with the part that if something is represented, then a thing
exists. The part that I don&amp;rsquo;t agree with is that physical representations are
the representations of objects that are physical objects which are independent
of mind.&lt;/p>
&lt;p>It is now a great time to clarify what I mean by physical objects and physical
representations. In this argument, I used the expression &amp;ldquo;physical objects&amp;rdquo; not
in the sense that a substance that can be fully explainable through physics. If
that would be the case then it would be wild that I claim such objects does not
exist. By physical objects, I refer to objects that exists independently of
mind. Physical representation, on the other hand, are the kind of
representations that are made in Physics. This representations, by themselves,
does not require what is required to be independent of mind.&lt;/p>
&lt;p>In essence, idealists does not necessarily reject physical objects does not
exist in the sense that there are objects which can be explained by physics but
in the sense we prescribed above. When certain a spiritualist says &amp;ldquo;Matter is a
way of seeing, not something that is seen&amp;rdquo; (Spira) they seem to be agreeing that
there exists objects that can be understood from the perspective of Physics but
disagree with the part that those objects are abstract, mind-independent
substances by themselves.&lt;/p>
&lt;h2 id="ockhams-razor-is-not-reliable">Ockham&amp;rsquo;s Razor is not reliable&lt;/h2>
&lt;p>The argument relies on Ockham&amp;rsquo;s Razor, which states that the simplest
explanation is most likely to be true. However, this assumption may not always
hold true. Some may argue that we do not have sufficient evidence to assume that
reality is simple.&lt;/p>
&lt;p>Although one can believe that reality is not supposed to be ontologically
simple, they can still be epistemically justified to favor the simplest
explanation when faced with multiple possibilities. This does not have to be the
case because the reality is ontologically simple, but rather, it is the best we
can do: In the absence of other compelling evidence when comparing seemingly
equivalent explanations, it is already justified to choose one of the theories
randomly, so why not just choose the simpler one?&lt;/p>
&lt;h2 id="direct-perception-of-physical-objects">Direct Perception of Physical Objects&lt;/h2>
&lt;p>It is possible to reject P3 by saying that direct perception of physical objects
is possible. One could say that a representation of a thing can be seen as
identical to the thing itself if the function of the representation is the same
as the thing it represents. For example, one might argue that if a photograph of
a cup were able to serve the same function as the actual cup it represents, then
they could be seen as identical.&lt;/p>
&lt;p>However, this approach ignores all the other aspects of entities besides their
functions. Even though the photograph and the cup may function in the same way,
they are not necessarily the same thing unless they are made of the same
substances and share the same inner workings.&lt;/p>
&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>In conclusion, I have come to the conclusion that there is no reason for assume
that physical objects exist according to the principly of parsimony. I have done
this by first arguin that agents cannot know whether physical objects exist. And
then showing that assuming the existence of physical objects does not give us
more explanatory power than what we are left without it.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;p>&amp;ldquo;The Case Against Reality.&amp;rdquo; Performance by Donald Hoffman, Youtube, 8 Sep 2019,
&lt;a href="https://www.youtube.com/watch?v=4HFFr0-ybg0">https://www.youtube.com/watch?v=4HFFr0-ybg0&lt;/a>, Accessed 24 Dec. 2022.&lt;/p>
&lt;p>“Matter Is a Way of Seeing.” Performance by Rupert Spira, YouTube, 12 May 2015,
&lt;a href="https://www.youtube.com/watch?v=oqOjFC9MCDc">https://www.youtube.com/watch?v=oqOjFC9MCDc&lt;/a>. Accessed 24 Dec. 2022.&lt;/p></description></item><item><title>Should you use TypeScript?</title><link>https://rugu.dev/en/blog/typescript/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/typescript/</guid><description>&lt;p>&lt;a href="https://dives.fyi/blog/typescript">see&lt;/a>&lt;/p></description></item></channel></rss>