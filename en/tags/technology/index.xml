<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technology on ugur</title><link>https://rugu.dev/en/tags/technology/</link><description>Recent content in Technology on ugur</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rugu.dev/en/tags/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Concurrency, Parallelism and JS</title><link>https://rugu.dev/en/blog/concurrency-and-parallelism/</link><pubDate>Sun, 08 Sep 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/concurrency-and-parallelism/</guid><description>&lt;p>Up until now, I was not aware that concurrency and parallelism were actually
different things since they are often used interchangeably by some. I just
learned that this is not the case while reading &lt;a href="https://www.braveclojure.com/concurrency/">Chapter
9&lt;/a> of the book &amp;ldquo;Clojure for the
Brave and True.&amp;rdquo;&lt;/p>
&lt;p>This made me want to learn more about concepts related to concurrency and
parallelism, especially concerning the programming language I know best:
JavaScript. So this essay is basically a collection of notes I made during this
learning process.&lt;/p>
&lt;h2 id="sequential-concurrent-and-parallel">Sequential, Concurrent and Parallel&lt;/h2>
&lt;p>When executing tasks in our lives, we execute them sequentially, concurrently,
or parallel. And this applies to computing as well.&lt;/p>
&lt;p>Sequential execution is basically when tasks are done one after another without
any overlap. For instance, if someone first looks at their phone, finishes
their job with it, and only after that switches to another task, for example, to
eat their soup, they are working sequentially. The problem with this approach
is sometimes your tasks are getting blocked, like for example when you ask a
thing to your friend from your phone, if you don&amp;rsquo;t switch to other tasks until
your friend answers, you will basically lose time. So different forms of
multitasking can be of help from time to time to save time. Concurrency and
parallelism are ways to achieve multitasking. But there are subtle, yet
important differences between the two.&lt;/p>
&lt;p>Concurrency is like handling numerous tasks by alternating between subtasks
(aka interleaving), while parallelism is like performing multiple tasks
simultaneously. For example, if someone looks at their phone, puts it down
to take a spoonful of soup, and then returns to their phone after setting down
the spoon, they are working concurrently. In contrast, if a person is texting
with one hand while eating with the other at the same time, they are working in
parallel. In both cases, they are multitasking, but there is a subtle
difference in how they multitask.&lt;/p>
&lt;div style="text-align: center;">
&lt;img src="https://martin-thoma.com/images/2021/05/parallel-interleaved.png#75persize" alt="">
(Image taken from &lt;a href="https://martin-thoma.com/synchronous-asynchronous-concurrent-parallel/">Synchronous vs Asynchronous vs Concurrent vs Parallel&lt;/a>)
&lt;/div>

&lt;h2 id="threads">Threads&lt;/h2>
&lt;p>In the analogy above, I referred to eating soup and using the phone as
different tasks and each task consists of subtasks (for example eating soup,
you need to hold the spoon, then put it into your soup, then put that into your
mouth, and so on&amp;hellip;).&lt;/p>
&lt;p>Likewise, in the context of programming, the subtasks can be thought of as
individual segments of a larger set of instructions in a process. The
conventional way to operate on different subtasks simultaniously is to create
different kernel threads. Which are, kind of like separate workers each
handling their specific tasks while being able to work on the same set of
instructions as well as resources.&lt;/p>
&lt;p>Whether your threads run in parallel or concurrently actually depends on your
hardware. If your CPU has more cores than the number of threads running
simultaneously, each thread can be assigned to a different core, allowing them
to operate in parallel. However, if your CPU has fewer cores than the number of
threads, the operating system will start interleaving between the threads.&lt;/p>
&lt;p>When it comes to kernel threads, the developer&amp;rsquo;s experience remains the same,
whether the tasks are actually handled concurrently or parallelly does not make
much of a difference. The developer uses threads to improve performance and
avoid blocking. However, it’s the operating system that makes the final
decision on how to handle these threads depending on the resources available.
As long as the developer uses threads, whether they run concurrently or in
parallel, it doesn&amp;rsquo;t matter; in both cases, the order in which instructions
from different threads are executed is kind of unpredictable. Therefore, the
developer should be cautious of potential issues (like race conditions,
deadlocks, livelocks, etc) that can occur from two different threads operating
on the same data anyway!&lt;/p>
&lt;h2 id="spawning-processes-io-notifications">Spawning Processes, I/O Notifications&lt;/h2>
&lt;p>There are also other ways to achieve concurrency/parallelism other than using
threads, for example although not as efficient as threads, spawning multiple
processes is another way to go. Since the CPU runs different processes both
parallely and concurrently, you can multitask using many processes. The
disadvantages here are that each process comes with its own memory space
allocated and they don&amp;rsquo;t share their memory space by default like threads. So,
if you need different processes to operate in the same state, you might need
some sort of an IPC mechanism like shared memory segments, pipes, message
queues, or even databases.&lt;/p>
&lt;p>Kernels also implement their own way of I/O event notification mechanisms,
which again, can also be helpfull when building programs that you don&amp;rsquo;t want to
get blocked while doing certain tasks.&lt;/p>
&lt;p>I don&amp;rsquo;t want to delve into much details, since I don&amp;rsquo;t know much about it, but
the key idea is, kernel threads are not the only OS specific way that you can
achieve concurrency.&lt;/p>
&lt;h2 id="nodejs-an-example-for-user-space-concurrency">NodeJS, an Example for User-space Concurrency&lt;/h2>
&lt;p>Programming languages often provide their own concurrency mechanisms to
simplify the complexities associated with using the Operating System&amp;rsquo;s API
(system calls). This means that the compiler or interpreter can translate your
high-level code into low-level system calls that the operating system
understand so that you don&amp;rsquo;t have to think much.&lt;/p>
&lt;p>Node.js is a great example of this concept. Although your JavaScript program
runs in a single-threaded environment with a sequential execution flow,
blocking tasks such as IO operations are delegated to the Node.js Worker
Threads. So NodeJS uses threads behind the scenes to manage those blocking
tasks, without revealing the complexities of managing them to the developer.&lt;/p>
&lt;p>Here’s how it works: Blocking operations, such as writing to a file or reading
from a file, or sending a network request are typically handled using the
built-in functions provided by Node.js. You usually pass callback functions as
parameters when calling these functions, so that Node.js Worker Threads can
execute the callback functions that you provided when they complete their
tasks.&lt;/p>
&lt;div style="text-align: center;">
&lt;img src="https://miro.medium.com/v2/resize:fit:828/format:webp/1*U_zyHnKdlvjCdAQkoh0uuQ.png#75persize" alt="">
(Image taken from &lt;a href="https://medium.com/@abeythilakeudara3/nodejs-architecture-42a1d0efad8f">NodeJS Architecture&lt;/a>)
&lt;/div>

&lt;p>Having a bit of more idea how NodeJS concurrency works under the hood, we can
now start practicing this theory by examining certain cases/situations.&lt;/p>
&lt;p>Consider the following code (thanks to my friend
&lt;a href="https://github.com/onsah">Onur&lt;/a> for coming up with the example);&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">setTimeout&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#66d9ef">true&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;b&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, if you run this program, the only thing you will encounter on your screen
will be &amp;ldquo;a&amp;quot;s. This is because the NodeJS interpreter continue executing the
current callback as long as there are instructions still available.&lt;/p>
&lt;p>As soon as all instructions in the main code are executed, the NodeJS runtime
environment then starts calling the callback functions. You can also think of
the main code you write as being called by default as a callback. In the
example above, the first &lt;code>setTimeout&lt;/code> is executed with the callback function
provided, and the second &lt;code>setTimeout&lt;/code> is executed with the callback function
provided. After 1 second passes, it starts spamming &amp;ldquo;a&amp;quot;s. You never see &amp;ldquo;b&amp;quot;s
because, once the first callback is called, it dominates the main thread with
its ugly while loop, forever! So, the second callback is never called.&lt;/p>
&lt;p>This has a few important effects. First, it reduces the chance of issues like
race conditions, though they can still happen, especially compared to
multi-threaded languages like C. Why? In C-like languages, the CPU interleaves
threads at the instruction level, while here, it mostly happens at the callback
level. As long as you avoid having complicated logic that relies on &lt;code>async&lt;/code>
functions with nested callbacks, it is certain that the flow of execution
remains uninterrupted, basically sequential.&lt;/p>
&lt;p>If the programming logic contains many &lt;code>asynchronous callback-based functions&lt;/code>
(like &lt;code>fs.readFile()&lt;/code>, &lt;code>setTimeout()&lt;/code>, &lt;code>setImmediate()&lt;/code>, or even
&lt;code>Promise.then()&lt;/code>), the race conditions can easily start to occur.&lt;/p>
&lt;p>This also applies to the usage of &lt;code>await&lt;/code> because you can think of &lt;code>await&lt;/code>
statements as shorthand for wrapping the remaining code in the current scope
into a callback function that runs once the awaited &lt;code>Promise&lt;/code> is resolved.&lt;/p>
&lt;p>Consider the &lt;code>test&lt;/code> and &lt;code>test2&lt;/code> functions provided below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#a6e22e">scheduler&lt;/span>} &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;node:timers/promises&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> Promise.&lt;span style="color:#a6e22e">all&lt;/span>([&lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>) &lt;span style="color:#75715e">// Returns 1, not 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test2&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">await&lt;/span> Promise.&lt;span style="color:#a6e22e">all&lt;/span>([&lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>(), &lt;span style="color:#a6e22e">foo&lt;/span>()])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span>) &lt;span style="color:#75715e">// Returns 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test2&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">main&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reason &lt;code>test()&lt;/code> logs 1 is that when the foos functions are called, as soon
as they encounter &lt;code>await scheduler.wait(100)&lt;/code>, they essentially finish. Because
under the hood, using &lt;code>await scheduler.wait(100)&lt;/code> evaluates something like the
following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, the first &lt;code>foo&lt;/code> function finishes its job, it is now upto the callback
function to continue the business, but since it will only be called 100ms
after, the NodeJS interpreter does not stay idle but instead continues
executing the second and third foo functions by order. They also set &lt;code>y&lt;/code>
variable to the value of &lt;code>x&lt;/code> before the callback from the first foo is
triggered, and call &lt;code>scheduler.wait&lt;/code> with the callback function. As a result,
when the callbacks are eventually executed, they all update x using the
previous value of x, so we get 1, instead of 3.&lt;/p>
&lt;p>Why we get 3 logged out when running &lt;code>test2()&lt;/code>? Because the place where &lt;code>await&lt;/code>
is being run is different and it evaluates to something like&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">scheduler&lt;/span>.&lt;span style="color:#a6e22e">wait&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As soon as this callback function is called, nothing can interleave between&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">y&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, no race condition can occur.&lt;/p>
&lt;h2 id="to-conclude">To Conclude&lt;/h2>
&lt;p>The main idea here is that there is not just one way to achieve &amp;ldquo;concurrency&amp;rdquo;,
and the way you achieve it can also affect many things, like how performant
your programs will be or even what kind of problems you can encounter, or what
things to watch out for and so on.&lt;/p>
&lt;p>Just try to be mindful when working on programs that are supposed to work
concurrently/parallelly. Things can go wrong pretty fast.&lt;/p>
&lt;h2 id="addendum">Addendum&lt;/h2>
&lt;p>&lt;strong>2024-09-18&lt;/strong>: This essay received a lot of attention that I did not
anticipate. It got 99 upvotes on HackerNews and appeared on the front page for
a while. A few days later, my friend Carlo informed me that my essay was
featured in the &lt;a href="https://bytes.dev/archives/323">323rd issue&lt;/a> of the Bytes
newsletter, a JavaScript newsletter with over 200,000 subscribers.&lt;/p>
&lt;p>I’ve also received a few messages expressing appreciation for the essay and
even got the first &lt;a href="https://github.com/kugurerdem/rugudev/pull/1">pull request&lt;/a>
to my blog&amp;rsquo;s GitHub repository. Thanks to everyone who took the time to read
and provide feedback.&lt;/p>
&lt;p>In the HackerNews discussion, @duped and @donatj recommended &lt;a href="https://www.youtube.com/watch?v=oV9rvDllKEg">Concurrency is
not Parallelism&lt;/a> by Rob Pike. It
is a very good talk, so I wanted to mention it here as well for anyone else
further interested in the topic.&lt;/p></description></item><item><title>Switching from Arch to NixOS</title><link>https://rugu.dev/en/blog/nixos/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/nixos/</guid><description>&lt;p>I’ve switched my desktop computer environment from Arch Linux to NixOS and used
it for about a month. I want to share my migration experience in case it might
interest or even help others.&lt;/p>
&lt;p>I also want to thank my friends &lt;a href="https://github.com/onsah">Onur&lt;/a> and
&lt;a href="https://github.com/mk-nlp">Mert&lt;/a> for encouraging me to switch to NixOS and
providing help.&lt;/p>
&lt;h1 id="why-migrate-from-arch-in-the-first-place">Why Migrate from Arch in the first place?&lt;/h1>
&lt;p>As someone who likes playing with tools to understand how they work as well as
to match my preferences and ergonomic choices, I find myself frequently changing many
configurations on my system. However, it didn&amp;rsquo;t take long for me to realize
that I need a system to save and possibly automate these configuration
processes to save time in the future.&lt;/p>
&lt;p>A common solution is to create a git repository, often called &amp;ldquo;dotfiles,&amp;rdquo; where
you can store your configurations and changes. This approach helps you avoid
repeating the process of configuring the same stuff over and over when
switching to new host machines. You turn your home folder into a repository
itself by initializing git directly inside of it, set the remote address, and
pull the content. You can check out what my dotfiles looked like before
switching to NixOS &lt;a href="https://github.com/kugurerdem/dotfiles">here&lt;/a>.&lt;/p>
&lt;p>Yet, even with this &amp;ldquo;dotfiles&amp;rdquo; approach there are some problems:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It&amp;rsquo;s very easy to forget to add some configuration files from your computer
to the repo because, in a typical Linux setup, these files are often
scattered in different locations, and unstaged changes can be easily
overlooked. This is especially true for the home directory, where there are
many unstaged files by default, making it easier to miss the ones you want to
stage. I&amp;rsquo;ve had several instances where I realized I was missing some
configuration files from my old computer in the Git repo after formatting my
PC.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Your dotfiles are likely to become more complex over time, requiring you to
document how to configure certain aspects to avoid confusion the next time
you set up your environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Even if your dotfiles repo is perfect, there&amp;rsquo;s no guarantee your system will
work the same when you rebuild it. Changes might have occurred to some of the
packages that your dotfiles repo relies on. As a result, you might encounter
issues regarding package upgrades or even conflicts. This problem isn&amp;rsquo;t
specific to rebuilding systems from a dotfiles repo but also affects regular
users who just want to just update their systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In addition to these problems mentioned, although not very often, I would
encounter situations in Arch Linux where I had to look up an error message, a
specific bug, or a non-backward compatible update for some of the apps I use.
Why? Because a system update broke something! While this may not seem like a
big problem, it can be very inconvenient if you&amp;rsquo;re in a hurry to get a job
done. In these kind of situations, I often had to either fix the problem
immediately or ignore it for a while and fix it later. Rolling back to the
state of my computer before the system update and postponing the task of
addressing the issue introduced by the update was not an option.&lt;/p>
&lt;p>This was the moment when I remembered that the tools (Nix and NixOS) my friends
had been recommending could be useful to me.&lt;/p>
&lt;h1 id="what-is-nixnixos">What is Nix/NixOS?&lt;/h1>
&lt;p>In essence, Nix is a package manager (there&amp;rsquo;s also a programming language
called Nix, which can sometimes be confusing). What sets Nix apart from its
alternatives is the way it manages packages and much more, including your home
folder. It is designed to provide reliable and reproducible package management
by isolating packages from each other in a smart way, preventing issues like
dependency conflicts. It also allows users to configure their computers using
its configuration files, through its programming language. So, you&amp;rsquo;re not
limited to downloading specific versions of packages with their dependencies,
but you can also configure other files on your computer, such as your dotfiles.&lt;/p>
&lt;p>NixOS, on the other hand, is a Linux distribution that uses Nix as its default
package manager. It integrates Nix&amp;rsquo;s features to manage the entire system at
both the system and user levels.&lt;/p>
&lt;p>To stay within the scope of this essay, which is to share my Nix and NixOS
experiences rather than explain their inner workings, I&amp;rsquo;ll stop here. However,
if you&amp;rsquo;re curious to learn more, I found &lt;a href="nix.dev">nix.dev&lt;/a> and
&lt;a href="nixos.wiki">nixos.wiki&lt;/a> particularly helpful for learning more about Nix and NixOS.&lt;/p>
&lt;h1 id="the-learning-curve-and-initial-trial">The Learning Curve and Initial Trial&lt;/h1>
&lt;p>Since NixOS fundamentally provides a much different user experience than most
of the other Linux distributions. I thought it would be wiser to first try
NixOS in a VM instead of directly trying to figure out stuff after installing
the distro on my host machine.&lt;/p>
&lt;p>I can confidently say that during this period of testing NixOS on a VM, I had
more troubles related to &lt;code>QEMU&lt;/code> and network bridging than problems related to
understanding how Nix works. The same goes for the installation process as
well, for some reason &lt;code>Ventoy&lt;/code> did not work properly with the NixOS iso image
while formatting the disk with &lt;code>dd&lt;/code> just worked fine.&lt;/p>
&lt;p>My initial goal was to make the VM I was running function exactly like my host
machine. This way, once I got NixOS working as intended in the VM, I could
replicate the setup on my host machine. I just needed to copy the configuration
files from the VM to the host machine and run a few Nix and NixOS commands. And
this was exactly what happened when I switched to my host machine. Easy peasy.
:)&lt;/p>
&lt;p>In the end, it took me around 4-5 days, working 2-3 hours each day, to learn
Nix and NixOS and replicate about 95% of my Arch dotfiles in the VM. When I
installed NixOS on my host computer, I simply cloned my nix-config repo, ran a
few commands as described, and boom! Everything was set up. :) It was such a
nice experience.&lt;/p>
&lt;h1 id="initial-impressions-and-experience">Initial Impressions and Experience&lt;/h1>
&lt;p>Here are my first impressions after using NixOS for about a month:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>At first, it feels like the knowledge you&amp;rsquo;ve gained from using conventional
FHS Linux distros becomes redundant, as you no longer configure programs by
directly modifying their configuration files in the file system. Instead, you
use the settings provided by NixOS and home-manager (a standardized Nix
program that allows users to manage and configure their home environments
through Nix files without root privileges).&lt;/p>
&lt;p>Because most configurations are done through the settings provided by the
packages, it initially seemed like this might prevent users from
understanding what&amp;rsquo;s happening under the hood.&lt;/p>
&lt;p>However, after using NixOS for a while, I realized this was not true. The
abstraction that NixOS packages provide doesn&amp;rsquo;t hide everything from the user
to avoid confusion with irrelevant details. Instead, it offers a way to
configure your environment the Nix way, so the resulting configuration files
are created by Nix.&lt;/p>
&lt;p>Most of the prior knowledge I had about configuring the programs I use was
easily transferable to the NixOS domain. Also, you don&amp;rsquo;t have to configure
every dotfile through Nix. In fact, home-manager allows you to source files
to desired destinations (see the home.file.*.source option for home-manager).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The documentation is not in great shape. The Nix wiki is certainly not as
good as the Arch wiki. Sometimes, it&amp;rsquo;s outdated, and other times, it&amp;rsquo;s not
detailed enough. This is why it&amp;rsquo;s very important to learn the Nix programming
language well so you can easily read the options available for a package you
want to install. Once you understand the fundamentals of the Nix programming
language, the code itself becomes the documentation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is very confusing to have many alternatives for certain tasks. For
example, there are two different ways to install home-manager (standalone
installation vs. system modules), and how you install it affects the way you
interact with it later. Another example is Nix flakes, which are meant to
replace channels (an imperative way of downloading packages) but are still
considered an experimental feature by NixOS.&lt;/p>
&lt;p>To be fair, having to choose between many options is already an issue in
Linux (though many see this as a feature), and NixOS seems to have the same
problem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From my experience so far, most Nix packages are designed to allow
self-contained setups and installations, including plugins. Here are a few
examples:&lt;/p>
&lt;ul>
&lt;li>When installing Firefox or Chromium browser packages, you can set which
plugins you want to be installed by default.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L137">Example&lt;/a>&lt;/li>
&lt;li>For my default password manager &lt;code>pass&lt;/code> (a standard UNIX password
manager), the plugins I wanted to integrate with pass can be defined
through a derivation attribute &lt;code>withExtensions&lt;/code>.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L52">Example&lt;/a>&lt;/li>
&lt;li>When installing the Minecraft launcher prismlauncher, you can declare
which JDKs should be available and used by the launcher by simply
overriding one of the package attributes.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L81">Example&lt;/a>&lt;/li>
&lt;li>For Neovim, you can declare which dependencies and plugins you want to
install out of the box using the &lt;code>extraPackages&lt;/code> and &lt;code>plugins&lt;/code> options of the
home-manager&amp;rsquo;s &lt;code>programs.neovim&lt;/code> option.&lt;/li>
&lt;/ul>
&lt;p>These are just a few examples, and I am sure this is a standard for many
other programs. I really like this. Dependencies used only
by certain programs are self-contained within the program that will use them.&lt;/p>
&lt;p>You can even override some of the derivation attributes for the package you
are installing so that it is not installed from the git source repository
defined in the nixpkgs repo, but from your own source repository. I used this
technique to install and set up my window manager dwm using my own git fork
of dwm.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/main/home-manager/dwm.nix#L4">Example&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The configuration files and the nix-config repo I now have are much
more elegant and simpler than my previous dotfiles repo. It&amp;rsquo;s much easier to
organize configurations in a modular way now.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The rollback mechanisms that Nix provides (combined with the ease of using
other people&amp;rsquo;s configurations) make trying new things (like different window
managers, desktop environments, programs, or even other people&amp;rsquo;s setups) very
appealing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In Arch, there were a few instances where I had to use additional package
managers like &lt;code>yay&lt;/code> to access the AUR (Arch User Repository) alongside the
official Arch repository. I also recall compiling and building some tools,
like &lt;code>fzf&lt;/code>, from scratch. I haven&amp;rsquo;t needed to do any of this while using
NixOS.&lt;/p>
&lt;p>Overall, I&amp;rsquo;ve had a better experience with the Nix package manager itself
compared to using pacman and the AUR.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="to-conclude">To Conclude&lt;/h1>
&lt;p>In the end, I really think Nix and NixOS are very strong tools for achieving
reliable and reproducible system configurations and package management.
Unfortunately, though, I don&amp;rsquo;t think the benefits I&amp;rsquo;ve gotten in this one month
of using NixOS so far justified the cost I&amp;rsquo;ve initially spent and continue to
spend learning Nix and NixOS.&lt;/p>
&lt;p>But since I currently have no workload and enjoy the learning process, I
don&amp;rsquo;t see a serious problem here.&lt;/p>
&lt;p>Ultimately, whether the benefits of learning a particular technology outweigh
the costs depends on how much you take full advantage of its features. So, I
believe that if I experiment with more setups, try different programs, or start
managing servers with Nix, I will begin to see a better return on this
investment from what I have learned so far. :)&lt;/p></description></item><item><title>Introducing: Mark Scroll Positions</title><link>https://rugu.dev/en/blog/mark-scroll-positions/</link><pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/mark-scroll-positions/</guid><description>&lt;p>Try the extension in
&lt;a href="https://chromewebstore.google.com/detail/mark-scroll-positions/echejfhmdgnabmbihbmkdgeajmbojald">Chrome&lt;/a>
or in
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/mark-scroll-positions/">Firefox&lt;/a>
&lt;br>
See the source code
&lt;a href="https://github.com/kugurerdem/mark-scroll-positions">kugurerdem/mark-scroll-positions&lt;/a>&lt;/p>
&lt;h2 id="hahahugoshortcode17s0hbhb">&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BzbMsaQkt34?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>
&lt;/h2>
&lt;p>I like reading blog posts a lot. While some of them are short and easy to read,
most of them are long and require more time to finish. When reading those long
essays, I take a break most of the time. Thus, when I re-open an essay, I
often lose the original place where I was reading. And if I
can remember where I was, then I manually scroll back there. This makes the
reading experience less smooth and more time-consuming.&lt;/p>
&lt;h2 id="a-not-so-clever-workaround-fragmented-identifiers">A Not-So Clever Workaround (Fragmented Identifiers)&lt;/h2>
&lt;p>I have found a neat trick to work around this problem over time. I was already
using the bookmark feature of my Brave browser, but it was not tracking where I
left reading. So, I would proceed with the following procedure:&lt;/p>
&lt;p>(1) Open the inspect mode. &lt;br>
(2) Click an element that has an ID nearest to where I am at, get the element
ID. &lt;br>
(3) Append the element ID to the URL of the site in the form of a fragmented
identifier. &lt;br>
(4) Using the new URL with fragmented ID, either overwrite the existing
bookmark or create a new one.&lt;/p>
&lt;p>If you don&amp;rsquo;t know what fragmented identifiers are, they are the part of the URL
that follows the hash symbol (#). Consider the following URL:&lt;/p>
&lt;div style="text-align: center;">
&lt;a href="https://rugu.dev/en/blog/intentional-digital-consumption/#maintaining-balance">https://rugu.dev/en/blog/intentional-digital-consumption/#maintaining-balance&lt;/a>
&lt;/div>

&lt;p>Here &lt;code>#maintaining-balance&lt;/code> is the fragmented identifier and thanks to it the
browser directly knows where to jump when it opens the page.&lt;/p>
&lt;p>Anyways, this approach works, but there are some problems with it. First of
all, it requires manual labor which could have been automatized, secondly,
although the fragmented links directly jump to the element with the id
specified in the URL, if there is no element with id close to where you are,
the method fails.&lt;/p>
&lt;h2 id="seemingly-a-better-idea-storing-scroll-positions">Seemingly A Better Idea (Storing Scroll Positions)&lt;/h2>
&lt;p>So, I wanted a tool to save and jump to specific scroll positions on a webpage.&lt;/p>
&lt;p>I found some programs that are built for this purpose, but none of them met my
expectations.&lt;/p>
&lt;p>The most popular one I found was &lt;a href="https://chromewebstore.google.com/detail/scrroll-in/cjgjbjogfodppempgdlppgefojbcmjom">Scrroll
In&lt;/a>,
and even that could be improved a lot: For example, it forces you to name each
saved scroll position with an alert prompt. Why not automatically give a random
name that can be renamed later? The fetch and save UI/UX is confusing. Why not
directly show the saved scrolls and allow users to jump to them? Additionally,
it lacks features like adding notes to scrolls and searching through saved
scrolls.&lt;/p>
&lt;p>So I decided to build my extension for storing/marking scroll positions on web
pages.&lt;/p>
&lt;h2 id="introducing-mark-scroll-positions">Introducing: Mark Scroll Positions&lt;/h2>
&lt;p>Here is my extension built for that purpose, you can download it from
&lt;a href="https://chromewebstore.google.com/detail/mark-scroll-positions/echejfhmdgnabmbihbmkdgeajmbojald">here&lt;/a>.&lt;/p>
&lt;p>You can save your scroll positions and resume reading later with ease. You can
save as many scroll positions as you want, add notes, rename them, and see and
manage all your saved spots on a separate page.&lt;/p>
&lt;h3 id="implementation-details">Implementation Details&lt;/h3>
&lt;p>I think there are 3 important aspects for understanding how this project works
under the hood.&lt;/p>
&lt;h4 id="1-interaction-between-the-popup-and-content-scripts">1) Interaction between the popup and content scripts&lt;/h4>
&lt;p>In modern browsers, the environment used by an extension&amp;rsquo;s popup is separate
from the environment of the current tab the user is viewing (i.e., the HTML,
CSS, and JavaScript files of the webpage).&lt;/p>
&lt;p>This separation isolates the extension from web content and prevents extensions
from directly accessing and modifying tab content. For this, extensions need
specific permissions like scripting and activeTab to interact between the
extension&amp;rsquo;s popup window and content scripts.&lt;/p>
&lt;p>In our case, when the user clicks the &amp;ldquo;Mark&amp;rdquo; button in the popup window, we
want to fetch the scroll position information from the active tab. However,
this can only be done in the content script environment. In such scenarios, you
can either create a content script that listens for events from the popup
(using &lt;code>chrome.runtime.onMessage&lt;/code> and &lt;code>chrome.runtime.sendMessage&lt;/code>) or inject
content scripts into the page environment (using
&lt;code>chrome.scripting.executeScript&lt;/code>) when the user clicks the &amp;ldquo;Mark&amp;rdquo; button. I
chose the second approach as it seemed cleaner. The same applies to the &amp;ldquo;Jump&amp;rdquo;
utility.&lt;/p>
&lt;p>This is basically to isolate the extension&amp;rsquo;s environment from the web content
so that extensions cannot directly access and modify tab content. As a
result of this, extensions need specific permissions such as &lt;code>scripting&lt;/code> and
&lt;code>activeTab&lt;/code> permissions to make an interaction between the extension&amp;rsquo;s
popup window and the content scripts.&lt;/p>
&lt;h4 id="2-the-data-structure-to-be-saved">2) The data structure to be saved&lt;/h4>
&lt;p>If you want your application to be persistent and remember what the user has
done, you need to store data in a persistent form.&lt;/p>
&lt;p>I chose to store the details like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
 [absoluteURL]: {
 scrolls,
 title,
 }
}
&lt;/code>&lt;/pre>&lt;p>So, the data is stored in &lt;code>chrome.storage.local&lt;/code> consists of keys of absolute
URLs and values of data related to that page.&lt;/p>
&lt;p>Each time a new scroll position is saved, the scrolls array is fetched and the
new scroll details are added to it. The same approach is used for deletion and
updates.&lt;/p>
&lt;h4 id="3-deciding-on-how-to-implement-the-jump-functionality">3) Deciding on how to implement the jump functionality.&lt;/h4>
&lt;p>Deciding how to implement the jump functionality was challenging. I could have
simply saved the &lt;code>window.pageYOffset&lt;/code> value when the user clicks &amp;ldquo;Mark&amp;rdquo; and
uses that value with &lt;code>window.scrollTo(0, offset)&lt;/code> when the user clicks &amp;ldquo;Jump&amp;rdquo;
(like &lt;a href="https://chromewebstore.google.com/detail/scrroll-in/cjgjbjogfodppempgdlppgefojbcmjom">Scrroll
In&lt;/a>
does). However, this would fail if the user resized the page or if the author
changed font sizes. So, I decided to save enough information to recalculate the
target offset based on a percentage.&lt;/p>
&lt;p>When the user clicks &amp;ldquo;Mark,&amp;rdquo; I save not only &lt;code>window.pageYOffset&lt;/code> but also
&lt;code>window.innerHeight&lt;/code> and &lt;code>document.body.scrollHeight&lt;/code>. Since
&lt;code>window.pageYOffset + window.innerHeight&lt;/code> roughly equals
&lt;code>document.body.scrollHeight&lt;/code> when the user scrolls to the bottom of the page,
we can adapt to page resizes with a normalization procedure when the user
clicks &amp;ldquo;Jump.&amp;rdquo;&lt;/p>
&lt;p>Is it that easy? Unfortunately, no. This method fails when the page gets longer
due to dynamic content updates (like new comments). In this case,
&lt;code>document.body.scrollHeight&lt;/code> gets bigger, but the offset where the user left
off and should continue to read on doesn&amp;rsquo;t actually change. Here, jumping
directly to the offset works better. You can still adjust the offset value in
comparison to &lt;code>window.innerHeight&lt;/code>, also known as the viewport.&lt;/p>
&lt;p>Currently, my extension uses the first method, but I might add a feature
allowing users to choose which jump method they prefer for certain pages.&lt;/p>
&lt;h2 id="an-alternative-idea-storing-uniquely-identifiable-text">An Alternative Idea (Storing Uniquely Identifiable Text)&lt;/h2>
&lt;p>Another option is to mark pages based on uniquely identifiable text so the user
can jump to specific text. The problem with this is if the author changes the
page or content. Even changing one word can break the mark. In contrast, if you
save scroll positions, you will still land somewhere close to the initial text.&lt;/p>
&lt;h2 id="last-thoughts">Last Thoughts&lt;/h2>
&lt;p>I believe all these ideas can be improved to create a better marking
application. Maybe a combination of these methods could work, or there might be
even simpler concepts that I have missed.&lt;/p>
&lt;p>The main problem is that pages can change, and it&amp;rsquo;s unclear how our application
should adapt to these changes.&lt;/p>
&lt;p>Anyway, I hope this application will be useful to some people. It will at least
be useful to me. If you want to contribute, please feel free to send your PRs
to
&lt;a href="https://github.com/kugurerdem/mark-scroll-positions">kugurerdem/mark-scroll-positions&lt;/a>&lt;/p></description></item><item><title>Debloating My Android Phone with ADB</title><link>https://rugu.dev/en/blog/debloat-with-adb/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/debloat-with-adb/</guid><description>&lt;p>My mother recently mentioned that her phone is continually opening certain
windows and prompting her to use services she doesn’t need. After checking her
phone and doing some online research, I found out that many others have also
complained about this issue.&lt;/p>
&lt;p>Apparently, she was referring to pop-ups triggered by a pre-built program
called &amp;ldquo;SIM Menu&amp;rdquo;. This program basically allows operators to send
notifications and even generate pop-ups on your phone. And the frustrating part
is that most of these pop-ups seem to promote irrelevant services. If you
accidentally click &amp;ldquo;OK&amp;rdquo; when one of these pop-ups appears, you get charged by
your provider. It is a carefully set up trap designed to make you accidentally
subscribe to their unnecessary services and pay money.&lt;/p>
&lt;p>Since I prefer simplicity and like to have control over the tools I use. I was
already thinking about removing the bloatware on my phone that came
pre-installed and can&amp;rsquo;t be deleted through the interface. Hell, even some of
the fundamental apps, like a gallery or file manager, are filled with ads. It
gets on my nerves. So, I was already planning to learn how to remove these
bloatware and the situation I described earlier was the final straw for me.&lt;/p>
&lt;p>I&amp;rsquo;ve searched for tools to debloat Android phones and found &lt;code>adb&lt;/code>, Android
Developer Bridge. It&amp;rsquo;s basically a program which allows you to directly create
a shell session for your phone, similar to connecting to a remote server via
SSH (the only difference is that instead of connecting through the internet,
the connection is made via USB).&lt;/p>
&lt;p>Since Android is essentially an OS based on the Linux Kernel, the shell you
connect to will most likely be a variant of the sh dialect. So, for those who
are familiar with working in UNIX environments, its very convenient to remove
or install packages and customize your phone this way.&lt;/p>
&lt;p>In this essay, I document this process of removing bloatware from my phone
as a reference for future use. Hopefully, you find it helpful as well.&lt;/p>
&lt;h1 id="enabling-usb-debugging-mode">Enabling USB Debugging Mode&lt;/h1>
&lt;p>While it is possible to establish an ADB connection to your phone over Wi-Fi, I
chose to use ADB through a USB connection as using Wi-Fi involves certain
security risks. For instance, others on your Wi-Fi network could potentially
connect to your phone, especially if your phone doesn&amp;rsquo;t have proper security
settings. Not to mention that you would need to set up your phone using ADB
through a USB connection first before initiating a Wi-Fi connection anyways.
Which kind of makes using WiFi seem more pointless as the reasons for
preferring Wi-Fi over USB are usually just convenience or not having a USB
cable available.&lt;/p>
&lt;p>To connect your phone using adb via a USB connection, you need to enable USB
Debugging mode on your phone. I won&amp;rsquo;t go into the specifics of this process as
it varies by phone. But for my own phone, I simply navigated to the &amp;ldquo;About&amp;rdquo;
section and tapped &amp;ldquo;MIUI Version&amp;rdquo; multiple times to switch into Developer Mode.
Then, I searched for the &amp;ldquo;USB Debugging&amp;rdquo; option and enabled it.&lt;/p>
&lt;h1 id="connecting-to-your-phone-via-a-shell-session">Connecting to your phone via a Shell Session&lt;/h1>
&lt;p>Once you&amp;rsquo;ve installed &lt;code>adb&lt;/code>, you can view the manual by typing &lt;code>adb help&lt;/code>. You
can also refer to the &lt;a href="https://android.googlesource.com/platform/packages/modules/adb/&amp;#43;/refs/heads/master/docs/user/adb.1.md">online
documentation&lt;/a>.&lt;/p>
&lt;p>To connect to your phone via a shell session, simply type &lt;code>adb shell&lt;/code> and
you&amp;rsquo;re good to go. Most standard UNIX commands such as &lt;code>ls&lt;/code>, &lt;code>cat&lt;/code>, &lt;code>echo&lt;/code>,
&lt;code>grep&lt;/code>, and more can be used.&lt;/p>
&lt;p>Keep in mind that you don&amp;rsquo;t need to enter a shell session just to run specific
commands. You can also use the &lt;code>adb shell &amp;lt;cmd&amp;gt;&lt;/code> pattern to run your particular
command &lt;code>&amp;lt;cmd&amp;gt;&lt;/code>. This approach simply creates a shell session, executes your
command, and closes the session, while forwarding the stdout to your current
shell session.&lt;/p>
&lt;h1 id="uninstalling-bloatware">Uninstalling Bloatware&lt;/h1>
&lt;p>The Command Line Interface (CLI) tool used in Android for interaction with the
Android Package Manager is &lt;code>pm&lt;/code>. This tool basically allows you to list,
install, or uninstall software packages.&lt;/p>
&lt;p>To list the currently installed packages, execute the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages
&lt;/code>&lt;/pre>&lt;p>To view only the default apps on Android, enter this command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages | grep &amp;#39;android&amp;#39;
&lt;/code>&lt;/pre>&lt;p>At this point, I would advice you to search for other unwanted pre-installed
apps known to come with your phone&amp;rsquo;s brand as well as android packages which
are known to be bloatware. Take a list of these apps for future reference so
you can easily repeat this process if you need it later again.&lt;/p>
&lt;p>To delete a specific app from your phone, you first need to identify its
package name. You can accomplish this by searching for it on the internet.
However if you can&amp;rsquo;t still find it, you should be able to locate the app&amp;rsquo;s &amp;ldquo;apk
package code&amp;rdquo; directly on your phone. This process can vary depending on the
phone you&amp;rsquo;re using, so I suggest you look up how to find package codes for
applications on your specific phone model.&lt;/p>
&lt;p>Also, be careful to not to delete anything critical for your system to work. Do
not delete a package if you are not sure that it is not something system
critical.&lt;/p>
&lt;p>Once you get the package.name, you can just run the following command in the
adb shell:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Here, &lt;code>--user 0&lt;/code> specifies the user for which you want to uninstall the
package. User 0 is typically the device&amp;rsquo;s default or primary user. When I have
run the command &lt;code>pm uninstall&lt;/code> without this, it would say package is
successfully deleted but the package would still remain on my phone.&lt;/p>
&lt;p>Keep in mind that we could have also used the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb shell pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Or even:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;h1 id="automating-the-process">Automating the Process&lt;/h1>
&lt;p>Remember that I told you to make a list of the packages you remove. This was
for to make the debloating process easier if you need to do it a second
time on your phone.&lt;/p>
&lt;p>I use a specific &lt;a href="https://github.com/kugurerdem/android-bloatwares">git
repository&lt;/a> for this purpose.
In this repository, I have a file named &lt;code>bloatwares.txt&lt;/code> that contains the
package names of certain prebuilt applications for Mi, Xiaomi, Android, and
third-party applications.&lt;/p>
&lt;p>If I ever need to debloat my phone, or anyone else&amp;rsquo;s, all I need to do is to
run the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>cat bloatwares.txt | xargs adb shell pm uninstall -k --user 0
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you haven&amp;rsquo;t already started, I strongly encourage you to consider debloating
your phone. Install &lt;code>adb&lt;/code> on your computer, connect to your phone using it,
identify packages that seem unnecessary, and free your device from the unwanted
&amp;lsquo;guests.&amp;rsquo;&lt;/p>
&lt;p>Go ahead and take back at least a partial ownership of your phone by getting
rid of these intruders!&lt;/p></description></item><item><title>Incorporating AI Tools Into My Terminal Workflow</title><link>https://rugu.dev/en/blog/vi-llm/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/vi-llm/</guid><description>&lt;p>For those who may not be aware, Neovim is to me what a lightsaber is to a Jedi.
It forms an essential part of my routine, as I use it for nearly all my tasks
involving text. Be it drafting an essay, sending an email, or coding, Neovim is
my go-to tool.&lt;/p>
&lt;p>Moreover, I have a deep admiration for the UNIX philosophy and its command-line
interface programs. It&amp;rsquo;s quite fascinating to observe how these small,
uncomplicated UNIX programs, designed to do one thing flawlessly, interact
effectively using piping mechanisms. Tools like sed, grep, awk, count, cut, and
many others, often prove to be incredibly useful for text processing.&lt;/p>
&lt;p>I can confidently state that both Neovim and UNIX have proven themselves
invaluable in my work.&lt;/p>
&lt;p>However, like many others, I have been introduced to another set of efficient
tools for dealing with text, known as Large Language Models or LLMs. I&amp;rsquo;ve spent
several months experimenting with tools like Co-pilot and ChatGPT, and I&amp;rsquo;ve
found them to be highly beneficial for text-based tasks.&lt;/p>
&lt;p>Naturally, I wanted to utilize the true potential of all these tools in my
interactions including text. For this reason, I began searching for Neovim plugins
and command-line interface programs capable of integrating these AI tools.&lt;/p>
&lt;p>The process of integrating Co-pilot was relatively simple thanks to a
&lt;a href="https://github.com/github/copilot.vim">plugin&lt;/a> available on Neovim.&lt;/p>
&lt;p>However, incorporating ChatGPT into my workflow wasn&amp;rsquo;t as straightforward as I
had hoped. I looked into several neovim plugins, like
&lt;a href="https://github.com/jackMort/ChatGPT.nvim">ChatGPT.nvim&lt;/a>, which allow
interaction with ChatGPT through Neovim. However, the majority of these plugins
seemed like an overkill compared to what I expect from them. They also had many
features designed to simplify the programming process, a job that Co-pilot
already handles for me. Additionally, I would want llms to be accessible not
only in vim but also within my regular terminal environment. I would appreciate
it as a command-line interface tool, which would enable piping, giving
arguments, and flags for more complicated tasks. Unlike Co-pilot, I would like
to use a tool like ChatGPT in a more widespread context.&lt;/p>
&lt;p>Hanging around Twitter, I recently saw a post from
&lt;a href="https://twitter.com/garybernhardt/status/1735090271690637803">Gary&lt;/a>, giving a
credit to Simon Willison&amp;rsquo;s library, &lt;a href="https://github.com/simonw/llm">llm&lt;/a>. I was
surprised to find out that this library was exactly what I was looking for as
well. It was a command-line interface tool that allowed me to interact with
LLMs through my terminal, which is exactly what I wanted. I could pipe the
output of any command into llm, and it would return the result of the input.
For instance, I could pipe the output of a command like &lt;code>cat&lt;/code> into &lt;code>llm&lt;/code>, and
it would return a response from the AI model, which you could pipe or redirect
into another command or file.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Here are some of the examples that comes to my mind on how you could use the
&lt;code>llm&lt;/code> tool:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git diff | llm &lt;span style="color:#e6db74">&amp;#39;Recommend 5 different commit messages for these change&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat essay.txt | llm &lt;span style="color:#e6db74">&amp;#39;Summarize what these are about&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Furthermore, if you keep finding yourself using the same prompts over and over
again, you can create templates for them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for finding synonyms of a word&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;What are the synonyms of the following prompt&amp;#39;&lt;/span> --save synonyms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for rephrasing text&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;Fix grammar mistakes and rephrase the text&amp;#39;&lt;/span> --save rephrase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create a template for finding titles for given content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>llm --system &lt;span style="color:#e6db74">&amp;#39;Recommend 5 titles for the following prompt&amp;#39;&lt;/span> --save titleize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can later use these templates by passing the &lt;code>-t&lt;/code> flag to the command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Rephrase the text which are copiod in your clipboard&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xsel -b | llm -t rephrase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find synonyms of the word &amp;#39;serenity&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#39;serenity&amp;#39;&lt;/span> | llm -t synonyms
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Find appropriate titles for your document&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cat vi-llm.md | llm -t titleize
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also further specify system messages, choose language model you want to
interact with, and many more things, which you can examine on the
&lt;a href="https://llm.datasette.io/en/stable/help.html">documentation&lt;/a> of the app.&lt;/p>
&lt;h2 id="the-readline-issue">The Readline Issue&lt;/h2>
&lt;p>So, I was quite happy for finding this tool, but the only thing I did not like
about it was that when you try to use chat mode with &lt;code>llm chat&lt;/code> command, the
readline would break my initial GNU readline settings defined in my
&lt;code>~/.inputrc&lt;/code> file.&lt;/p>
&lt;p>When delved into the source code of the repo, I have seen that other people
have been encountering the same
&lt;a href="https://github.com/simonw/llm/issues/376">issue&lt;/a>.&lt;/p>
&lt;p>I figured out that the issue is likely caused by the readline libraries used to
build the &lt;code>llm chat&lt;/code> command overriding the default readline settings.
Because I&amp;rsquo;m not very familiar with these Python libraries, I decided not to try
fixing the issue by changing the source code. Instead, I have decided to use
the &lt;code>rlwrap&lt;/code> command to address this problem. Basically, &lt;code>rlwrap&lt;/code> is a
program that allows you the wrap the readline of the programs that you run so
that you can still use the application&amp;rsquo;s readline as it was respecting your
shell&amp;rsquo;s readline settings.&lt;/p>
&lt;p>I know that by the time you, the reader, come across this, the issue may
already be fixed. However, the purpose of this piece is not just to provide a
solution to this particular problem, but to share how I approached solving it
and what I learned from the experience.&lt;/p>
&lt;h2 id="the-vi-llm-wrapper">The vi-llm Wrapper&lt;/h2>
&lt;p>Anyways, the problem with the &lt;code>rlwrap&lt;/code> solution was that, yeah, it allowed me
to use my shell&amp;rsquo;s readline settings, so I could use vi keybindings when giving
prompts, but I still could not copy, highlight, and modify the answers that are
given to me, or the previous prompts that I have give. For this, I have built a
shell script called &lt;a href="https://github.com/kugurerdem/vi-llm">vi-llm&lt;/a> based around
one of my favorite unix utils &lt;a href="https://joeyh.name/code/moreutils/">vipe&lt;/a>, and
llm. &lt;code>vi-llm&lt;/code> is basically a wrapper for llm that gets all of its prompts
from Vim, enabling an interactive communication with ChatGPT using llm, by
letting you input a message through the vim editor, then sending that message
to the LLM interface. subsequently displaying any logs received from the
interface right back in your text editor, repeatedly, until the user quitting
the vim editor without doing any changes. In essence, it operates similarly to
a chat interface. You type in messages (or commands) which get sent to the LLM
system, and any response from the LLM system gets displayed back to you. This
cycle continues, enabling continuous, interactive communication with the LLM
from your command line.&lt;/p>
&lt;p>Here is a quick showcase:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kugurerdem/vi-llm/master/showcase.gif#center" alt="vi-llm-showcase">&lt;/p>
&lt;p>If you are interested, you can check out the &lt;a href="https://github.com/kugurerdem/vi-llm">github repo.&lt;/a>&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I&amp;rsquo;ve been using Copilot and ChatGPT for months and now I am using this tool for
a few days now. Now I have all the tools that I have needed in order to utilize
my workflow even more, a strong autocompletion tool such as Copilot, a program
that allows me to interact with large language models through shell: llm, and
finally, a wrapper vi-llm based around llm for my personal use case.&lt;/p>
&lt;p>I hope that this essay was helpful or at least interesting to some of you.&lt;/p></description></item><item><title>Understanding Keyboard Events Better</title><link>https://rugu.dev/en/blog/understanding-keyboard-events/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/understanding-keyboard-events/</guid><description>&lt;p>In this essay, I describe how I made a Node.js module to listen to keypresses
across the system on Linux machines using X. This experience helped me grasp
how the OS and Window Managers handle keyboard inputs, clarifying the reasons
behind an unexpected behavior I had encountered before, which I also mention in
the essay.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning more about how keyboard events are handled,
this essay might be of interest to you.&lt;/p>
&lt;h2 id="an-issue-about-remapping-keys">An Issue About Remapping Keys&lt;/h2>
&lt;p>As a person who uses VIM for many things I do, seamlessly transitioning between
VIM modes is essential for my workflow. However, the default key for returning
back to normal VIM mode is the Escape key, necessitating me to remove my hands
from the keyboard in order to reach it.&lt;/p>
&lt;p>This is exactly why many VIM users, including myself, remap the Escape key to
the Caps Lock key. This adjustment is particularly beneficial for those who are
already accustomed to pressing the Shift key for uppercase characters.&lt;/p>
&lt;p>However, I&amp;rsquo;ve encountered a minor issue with this setting: Certain applications
seem indifferent to the remappings I&amp;rsquo;ve configured. Occasionally, when I press
the Caps Lock key, the operating system interprets it as an Escape key press,
while the specific program I&amp;rsquo;m using still recognizes it as the original
physical key pressed.&lt;/p>
&lt;p>I have encountered this problem both in my Linux computer, and Windows
computer. So the problem itself is OS-agnostic. However I&amp;rsquo;ve unintentionally
identified the reason behind this occasional discrepancy while I was working on
a recreational project.&lt;/p>
&lt;h2 id="linux-and-keyboard-events">Linux and Keyboard Events&lt;/h2>
&lt;p>Recently, a friend asked me if it&amp;rsquo;s possible to create macros using Node.js. I
confidently said, &amp;lsquo;Sure, it&amp;rsquo;s probably easy.&amp;rsquo; After a quick search, I found a
desktop automation library called robotJS and wrote a simple script where
specific keys are pressed regularly by the script.&lt;/p>
&lt;p>However, I started wondering if it was possible to trigger those keypresses
after a user presses a certain key. To achieve this, I needed to listen to
keypress events on a system-wide level. I searched for suitable Node.js
libraries for this task on Linux, but I couldn&amp;rsquo;t find one that worked
seamlessly.&lt;/p>
&lt;p>There were libraries like &lt;code>iohook&lt;/code>, but they seemed to lack support for
listening to Linux keyboard events in the latest versions of Node.js. Some
solutions only focused on capturing keyboard events within the current window
associated with the process.&lt;/p>
&lt;p>I stumbled upon a library called &lt;code>xev-emitter&lt;/code> but it didn&amp;rsquo;t provide what I
needed as it mainly dealt with listening to xevents of a specific X windows.&lt;/p>
&lt;p>After some contemplation, I decided to create my own Node.js module using
&lt;code>xinput&lt;/code> underneath, just for the sake of it and out of curiosity. &lt;code>xinput&lt;/code>
is a Linux tool that allows listening to keyboard events and provides an
interface to monitor events from connected keyboards.&lt;/p>
&lt;p>For instance, running the command &lt;code>xinput&lt;/code> gives me a list of available input
devices connected to my PC:&lt;/p>
&lt;pre tabindex="0">&lt;code>⎡ Virtual core pointer 	id=2	[master pointer (3)]
⎜ ↳ Virtual core XTEST pointer 	id=4	[slave pointer (2)]
⎜ ↳ 2.4G Mouse 	id=10	[slave pointer (2)]
⎜ ↳ 2.4G Mouse Consumer Control 	id=11	[slave pointer (2)]
⎜ ↳ Synaptics TM3336-004 	id=14	[slave pointer (2)]
⎣ Virtual core keyboard 	id=3	[master keyboard (2)]
 ↳ Virtual core XTEST keyboard 	id=5	[slave keyboard (3)]
 ↳ Power Button 	id=6	[slave keyboard (3)]
 ↳ Video Bus 	id=7	[slave keyboard (3)]
 ↳ Power Button 	id=8	[slave keyboard (3)]
 ↳ 2.4G Mouse 	id=9	[slave keyboard (3)]
 ↳ 2.4G Mouse System Control 	id=12	[slave keyboard (3)]
 ↳ Ideapad extra buttons 	id=13	[slave keyboard (3)]
 ↳ AT Translated Set 2 keyboard 	id=15	[slave keyboard (3)]
 ↳ 2.4G Mouse Consumer Control 	id=16	[slave keyboard (3)]
&lt;/code>&lt;/pre>&lt;p>&lt;code>xinput&lt;/code> also has a command type that lets you listen to a specific input
device. For instance, if I use &lt;code>xinput test 15&lt;/code>, it listens to the device with
the specified ID 15. When I run the command &lt;code>xinput test 15&lt;/code> and then press the
&amp;lsquo;a,&amp;rsquo; &amp;rsquo;s,&amp;rsquo; and &amp;rsquo;d&amp;rsquo; keys on my keyboard, the output I get is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>key press 38
key release 38
key press 39
key release 39
key press 40
key release 40
&lt;/code>&lt;/pre>&lt;p>Now, with these two commands, we can iterate through all the input devices
related to keyboards and listen to them. We can create a script that first
lists the available input devices, filters them, and then runs the command
&lt;code>xinput test&lt;/code> for each of them.&lt;/p>
&lt;p>However, there is still a minor problem. How do we understand which key is
pressed just by looking at the numbers that xinput gave us? How can we know
that 38 stands for the key &amp;lsquo;a&amp;rsquo;?&lt;/p>
&lt;p>The numbers provided by xinput are known as X Key Codes. These codes represent
the physical keys pressed on the X layer. They are essentially similar to Linux
Input Event Codes, which the Linux Operating System generates to represent the
physical keys pressed. For reasons I&amp;rsquo;m not aware of, &lt;a href="https://wiki.archlinux.org/title/Keyboard_input#Identifying_keycodes_in_console">X Key Codes are
incremented by 8 compared to Linux
keycodes&lt;/a>&lt;/p>
&lt;p>Now, the challenge lies in making sense of each X Key Code. We need a mapping
between the X Key Codes and their corresponding keys. However, what they
correspond to can be configured by users. In fact, I&amp;rsquo;ve configured this using
the command &lt;code>setxkbmap -option &amp;quot;caps:swapescape&amp;quot;&lt;/code>. So, although pressing the
same keys on a physical keyboard will result in the same key codes, the
interpretation by your operating system or window management server can be
configured. Therefore, the correspondence of each keycode with what you&amp;rsquo;ve
pressed might vary from one environment to another. In the X protocol, you can
view the mapping between X Key Codes and X KeySyms by running the command
&lt;code>xmodmap -pke&lt;/code>.&lt;/p>
&lt;p>This is essentially what I did in the Node.js module I created to listen to
keyboard events using X:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Obtain the list of available input devices by running &lt;code>xinput&lt;/code> as a
subprocess.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Filter the devices; you don&amp;rsquo;t need all of them, just their IDs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For each ID, run the command &lt;code>xinput test id&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the result of &lt;code>xmodmap -pke&lt;/code> to understand the semantic meaning assigned
to each physical keypress, known as a KeySym.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re curious, you can check out the module I created,
&lt;a href="https://github.com/kugurerdem/node-xinput-events">Node XInput Events&lt;/a>.&lt;/p>
&lt;h2 id="probably-a-better-approach">Probably a Better Approach&lt;/h2>
&lt;p>After implementing the module mentioned earlier, I discovered the existence of
a Linux utility called showkey that allows listening to pressed keys.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to create a similar script using showkey under the hood. In
fact, this might have been a better approach compared to what I did above
because it operates on a more fundamental level than X.&lt;/p>
&lt;p>Similar to how we mapped between X Key Codes and their corresponding X Key
Codes, we could create a mapping between Linux Event Codes and their meanings
by examining the &lt;a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h">Linux source code for the input event
codes&lt;/a>&lt;/p>
&lt;p>Moreover, using scripts like xinput as subprocesses under our script might not
be the optimal approach for implementing an EventEmitter library to listen to
system-wide keypresses. The conventional way is likely to interact with the X
server using an X library. Unfortunately, I couldn&amp;rsquo;t build the nodeJS x11
library on my computer and chose not to delve into it much.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The series of experimental processes I went through greatly enhanced my
understanding of what happens behind the scenes when I simply press a key on my
physical keyboard.&lt;/p>
&lt;p>Returning to the initial scenario I described, when you&amp;rsquo;re developing a
program, you can act upon the values of key syms or key codes. While the key
codes might remain the same, the key syms (the meanings attached to those key
codes) can differ. It appears that some applications focus on key codes,
disregarding your local options.&lt;/p>
&lt;p>Essentially, at the kernel layer, there are only keycodes. Your operating
system assigns meaning to these keycodes through specific configuration files,
which you can either directly modify or use another program for modification
(in this case, the X Window Management server). Since it&amp;rsquo;s generally more
convenient to alter settings in the window management layer, most people
configure their preferences through utilities provided by their window manager,
and the window manager handles the interaction with the OS.&lt;/p>
&lt;p>This serves as a compelling example of how casually experimenting with things
can significantly contribute to one&amp;rsquo;s understanding of the core concepts they
are dealing with.&lt;/p></description></item><item><title>Sockets and Message Framing</title><link>https://rugu.dev/en/blog/sockets-and-message-framing/</link><pubDate>Tue, 21 Nov 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/sockets-and-message-framing/</guid><description>&lt;p>I&amp;rsquo;ve recently been involved in a fintech project that demands high performance,
posing various challenges related to a solid understanding of low-level
concepts, concepts that are primarily relevant to the inner workings of the
tools and protocols used beneath the surface.&lt;/p>
&lt;p>One challenge involved separating two tasks into different processes:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The main process, responsible for constructing the necessary business state from
incoming messages through a specific socket connection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The monitoring process, allowing users to track relevant changes in the state.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>To enable communication between these processes, I implemented Inter-Process
Communication (IPC), and sockets naturally came to mind as a suitable solution.&lt;/p>
&lt;p>Since not all incoming protocol socket messages to the main process were
relevant to user interaction, I set up a mechanism to filter and process the
relevant messages for the front-end perspective. These refined messages were
then sent to the monitoring processes through a socket connection.&lt;/p>
&lt;p>However, acknowledging that sockets operate at a low level and suspecting I might
be overlooking something about the socket protocol, I aimed to confirm that each
piece of data sent from the main process would result in one received data on
each monitoring process. Delving into the self-assigned task of understanding
how sockets work, it turned out that one sent message does not always have to
correspond with one received data.&lt;/p>
&lt;p>When sending messages through a TCP socket, it separates our messages into
multiple parts called packets and sends those. The receiving socket then
reorders and reassembles those packets into a chunk of the original message which is
sent – a data – and appends it to the socket&amp;rsquo;s buffer. Since it is said that
these packets are reordered and reassembled by the TCP socket itself, most
people assume that one sent data will result in one data received. The thing is,
sockets do not wait for all incoming packets to be reordered and reassembled to
append them to their buffer. Instead, they append the chunks that are validated
and arrive in the correct order as they keep coming. A socket can essentially be
considered a Duplex Stream; it does not frame your messages and does not
necessarily know which parts of the incoming/outgoing data actually constitute a
meaningful message from your application layer&amp;rsquo;s perspective.&lt;/p>
&lt;p>From the perspective of socket users, the inner workings of &amp;ldquo;packets&amp;rdquo; are not
something to be worried about. The chunks added to the socket&amp;rsquo;s buffer are
simply referred to as &amp;ldquo;received data&amp;rdquo; or &amp;ldquo;data chunks&amp;rdquo;. The meaningful portions
of this data, converging as intended by the sender to convey a message, are
simply labeled as &amp;ldquo;messages&amp;rdquo;.&lt;/p>
&lt;p>Since the sockets lack awareness of the types of data and the desired format for
transmission, users of the socket must devise methods to identify which portions
of the incoming data constitute meaningful messages. This process, commonly
known as message framing, involves two approaches: the length prefix approach,
where each message is prefixed by the byte length of its content, and the
delimiter approach, where messages are separated by a designated delimiter
character or sequence of characters.&lt;/p>
&lt;p>What struck me the most about diving into these concepts was observing the
widespread tendency for people to misunderstand the behavior of one of the most
fundamental tools a developer may need to interact with – a socket. For
instance, consider the experience of a developer who highlights this issue:&lt;/p>
&lt;blockquote>
&lt;p>True story: I once worked for a company that developed custom client/server
software. The original communications code had made this common mistake.
However, they were all on dedicated networks with high-end hardware, so the
underlying problem only happened very rarely. When it did, the operators would
just chalk it up to “that buggy Windows OS” or “another network glitch” and
reboot. One of my tasks at this company was to change the communication to
include a lot more information; of course, this caused the problem to manifest
regularly, and the entire application protocol had to be changed to fix it. The
truly amazing thing is that this software had been used in countless 24x7
automation systems for 20 years; it was fundamentally broken and no one
noticed. [1]&lt;/p>&lt;/blockquote>
&lt;p>This entire process once again shows the importance of us developers being
genuinely curious about the tools and protocols we work with. If I hadn&amp;rsquo;t asked
such questions about the tool which I am using, just because the program works,
I might have fallen into the same pitfalls that others have encountered.&lt;/p>
&lt;h1 id="references">References&lt;/h1>
&lt;p>1 - Cleary, Stephen. “Message Framing.” Message framing. Accessed November 21,
2023. &lt;a href="https://blog.stephencleary.com/2009/04/message-framing.html">https://blog.stephencleary.com/2009/04/message-framing.html&lt;/a>.&lt;/p></description></item><item><title>Reflections on My Journey into Software Development</title><link>https://rugu.dev/en/blog/computer-science-reflections/</link><pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/computer-science-reflections/</guid><description>&lt;p>In the following essay, I will reflect on my journey which led me to become a
software developer.&lt;/p>
&lt;p>I intend this essay to be more of a personal reflection than a technical
advisement. But whether you are a seasoned programmer or a newcomer to the
world of software development, I hope that my experiences and insights will
provide valuable guidance and inspiration for your journey.&lt;/p>
&lt;h1 id="before-college">Before College&lt;/h1>
&lt;p>When I was around 6 or 7 years old, I used to hang out with my
&lt;a href="https://www.yuempek.com">cousin&lt;/a> a lot. Whenever I would see him on his
computer, he would always be engaged in something interesting like developing
recreational applications.&lt;/p>
&lt;p>During those years, I had a strong interest in a game called &lt;a href="https://en.wikipedia.org/wiki/Peg_solitaire">Solo
Test&lt;/a>. When I introduced the game
to my cousin, he immediately had the idea of writing code to create &lt;a href="http://yuempek.com/examples/javascript/solotest-Javascript.htm">this
game&lt;/a> on his
computer and even devloping a solution engine for it.&lt;/p>
&lt;p>I witnessed the entire process of him writing lines of code and transforming
them into something visible on the computer screen. It felt like pure magic to
me. Since that moment, he has become one of my idols. Not only did he introduce
me to the concept of programming, but he also helped me explore the world of
creating games and animations with Macromedia Flash (which is no longer
supported in most browsers nowadays).&lt;/p>
&lt;p>Despite my early acquaintance and interest in programming, I didn’t seriously
start learning it until high school. My attention was often consumed by other
hobbies, such as playing games, reading books, and creating pivot animations.&lt;/p>
&lt;p>In high school, I started to become more aware of my analytical nature and my
inclination to approach things methodically. Even in my interest in philosophy,
I found myself more drawn to the schools of analytical philosophy rather than
continental philosophy. Given my frequent use of computers, I thought it would
be beneficial to apply my analytical tendencies to understand the tools I
already used daily, and with the guidance of my aforementioned cousin, I
decided to embark on the journey of learning programming.&lt;/p>
&lt;p>I started to learn Javascript as a programming language because it was the only
programming language that could be easily executed directly in a web browser,
my cousin saw it as a great investment for the future, and the learning
resources for Javascript were readily available.&lt;/p>
&lt;p>I don’t recall the exact courses I initially took to learn the syntax of
JavaScript, but I vividly remember the learning process itself. After grasping
a particular concept, I would seek guidance from my cousin on what to learn
next. He would assign me simple tasks for practice but with specific
constraints, such as not using library tools like sorting functions, string
manipulation utilities, and so on. Instead, he would usually expect me to
implement these functionalities from scratch. Despite being skeptical of this
approach, I experienced the plus of having learned things this way when I took
my first algorithm course in college. Everything was so easy on me and I could
focus on more advanced subjects like interpreter design, data structures,
programming language paradigms, and so on when my colleagues were trying to
learn the syntax of the programming language we were using.&lt;/p>
&lt;p>The tasks my cousin assigned to me included writing functions that returned
strings with specific patterns and creating functions to draw lines using only
pixel-drawing utilities. I was even challenged to implement sorting algorithms
like selection sort and quick sort on my own. Some the programs I have made
during my high school days are still available on my github repositories, if
you are intereseted in them, you can check: &lt;a href="https://kugurerdem.github.io/canvas-js-experiments/">My Canvas Javascript
Experiments&lt;/a>, &lt;a href="https://kugurerdem.github.io/js-experiments/">Javascript
Experiments&lt;/a>, and some other
projects that I have decided for the fun of it (such as &lt;a href="https://kugurerdem.github.io/physics-v0/">Physics
Simulator&lt;/a>, &lt;a href="https://github.com/kugurerdem/conway-s-game-of-life">Conway&amp;rsquo;s Game of
Life&lt;/a>, &lt;a href="https://kugurerdem.github.io/Running-Game/">Running
Game&lt;/a>, &lt;a href="https://kugurerdem.github.io/text-machine/">Text
Machine&lt;/a>, &lt;a href="https://kugurerdem.github.io/Wolfram-s-Elementary-CA/">Wolfram&amp;rsquo;s Elementary
Cellular Automata&lt;/a>).&lt;/p>
&lt;p>In summary, all these exercises allowed me to delve deeper into programming
concepts and sharpened my problem-solving skills. The combination of guidance
from my cousin and hands-on practice proved to be an invaluable learning
experience.&lt;/p>
&lt;h1 id="studying-mathematics-at-college">Studying Mathematics at College&lt;/h1>
&lt;p>In Turkey, the universities recruit their students through a score from a
central placement exam. For this, like all other students, I was supposed to
prepare for the entrance exam if I wanted to study a profession at one of the
top universities.&lt;/p>
&lt;p>When preparing for this exam, I had to interact extensively with mathematics
due to its significant influence on the test results. This, combined with my
existing interest in analytical philosophy, began to develop a greater
interest in mathematics. My initial plan was to study computer science at one
of the prestigious universities in Turkey (such as Boğaziçi, ITU, Bilkent,
ODTU) and also pursue a minor in mathematics. This way, I could satisfy my
interest in CS while maintaining my connection with mathematics, thus expanding
my options. However, various unfortunate events that occurred in my life during
my exam preparation period caused my focus to become scattered just 3-4 months
before the exam, and I couldn&amp;rsquo;t dedicate myself fully to studying. In the end,
I couldn&amp;rsquo;t achieve the desired score (I needed to be in the %0.1 but instead, I
was in %1), and I had to make a choice: either study CS at a mediocre
university or pursue mathematics at one of the prestigious universities
mentioned earlier while continuing my independent exploration of CS.&lt;/p>
&lt;p>Fortunately, with the recommendation of a friend, I discovered that Bilkent
University, one of the top universities I mentioned above, had a highly
flexible Bachelorship of Mathematics program. Realizing that I could take
around 14 elective courses, including the compulsory electives of the CS
department, I saw an opportunity to unofficially pursue a double major with CS.
I decided to study mathematics at Bilkent University and utilize my elective
courses to take the CS department&amp;rsquo;s curriculum. This turned out to be a wise
decision that I am currently satisfied with and have no regrets about.&lt;/p>
&lt;p>With the decision I made above, I started taking almost all of the compulsory
CS courses except two (Operating Systems, and 4th year Algorithms course) right
from the beginning of my first semester, despite being a Mathematics major.
Even though I wouldn&amp;rsquo;t have a CS diploma, I saw no problem with this because I
believed that as long as I had competence and knowledge in the subject matter,
I would have no trouble finding jobs in the software industry.&lt;/p>
&lt;p>Now, looking back, I realize that my thoughts were accurate. While I can&amp;rsquo;t
speak for other fields, in the realm of software development, the chances of
not finding a job despite being skilled in your area are very low. So, whether
or not you have a formal diploma isn&amp;rsquo;t a significant issue as long as you excel
in your work. Of course, having a formal background in CS can bring many
advantages to your career, including as it can provide networking
opportunities, access to internships, and a structured learning environment.
However, not having one will not be the end of the world as long as you possess
a strong command of your field.&lt;/p>
&lt;h1 id="some-of-the-problems-i-faced-during-college">Some of the problems I faced during College&lt;/h1>
&lt;p>Although I am satisfied with choosing mathematics department and progressing
from CS, it doesn&amp;rsquo;t mean everything about majoring in Mathematics was perfect
and without costs.&lt;/p>
&lt;p>One problem I faced was that the mathematics education often felt too pedantic
compared to other fields. This led to a loss of interest among some students,
including myself, in their major. Additionally, taking CS courses alongside Math
courses allowed me to see that the time and energy invested in the math classes
had potential opportunity costs. I realized that I could have directed that
energy toward the pursuits that are more relevant to me. The amount of energy
and time I spent on other courses like CS and Philosophy often resulted in
understanding the most important aspects, while in Mathematics, it felt more
binary - either you understood the topic as a whole or struggled with some
concepts.&lt;/p>
&lt;p>Furthermore, I frequently encountered the misconception that my degree in
mathematics limits me to math-related fields such as tutoring or academia. This
highlights a lack of awareness among people about the diverse career
opportunities available to mathematics graduates. It sometimes becomes
burdensome to explain myself to others and break free from this narrow
perception.&lt;/p>
&lt;h1 id="what-values-did-studying-math-provide-to-me-for-software-development">What values did studying Math provide to Me for Software Development&lt;/h1>
&lt;p>One of the important aspects of studying Mathematics is the need for caution in
our proofs. Skipping a step can undermine the validity of the entire proof. I
sometimes wonder whether this leads people who study math to not take things for
granted and be skeptical about implementation details. However, I believe that
it has certainly made me more mindful when implementing various concepts,
emphasizing the significance of considering potential errors or pitfalls and I
also believe that this skill is just as important in software development.
Similar to the caution required in mathematical proofs, being skeptical about
implementation details and not taking things for granted is vital in ensuring
the reliability of our software systems.&lt;/p>
&lt;p>In addition to this, like many other majors, studying mathematics has taught me
the importance of rigorously expressing my thoughts and ideas. It has also
enhanced my endurance when it comes to handling heavy workloads. Passing most of
my math courses required substantial study efforts; it was nearly impossible to
succeed without dedicated preparation. The time required to excel in math
courses often exceeded the time needed to achieve the same grade in other
subjects. While I&amp;rsquo;m unsure if there is a direct correlation between studying
math and developing patience, I certainly believe that mathematics demands a
significant amount of patience as most mathematical concepts necessitate
prolonged concentration and attention to detail.&lt;/p>
&lt;p>So is it reasonable for people who want to become programmers to study Math?
Probably not. As I mentioned earlier, while studying math can enhance one&amp;rsquo;s
understanding and approach to problem-solving in many ways, the decision
ultimately depends on your willingness to invest the required effort. It&amp;rsquo;s
crucial to consider the costs, especially for those who aren&amp;rsquo;t interested in
learning abstract concepts. I chose to study math because I genuinely believed I
had an interest in the subject. Moreover, the university I attended provided
convenient opportunities to take computer science courses alongside it. However,
over the past two years, my enthusiasm for academic mathematics waned as my
interests shifted more toward different areas such as Computer Science.
Nonetheless, I managed to successfully graduate.&lt;/p>
&lt;p>While studying math can bring benefits, I believe it should not be pursued
solely for pragmatic reasons. Otherwise, it is more likely to become a
burdensome experience rather than an enjoyable one.&lt;/p>
&lt;h1 id="my-first-works">My first Works&lt;/h1>
&lt;p>In the last 3 years of my college (out of 5), I have started to lose my
attention regarding my degree. I think this was triggered by the COVID 19 pandemic
case, combined with my increasing interest in more pragmatic areas such as
investment, financial technologies, and my existing interest in software
development. As a result, during the COVID-19 pandemic, I shifted my focus away
from mathematics and started exploring cryptocurrencies with a friend of mine. We
learned about blockchain and decentralized finance (DeFi) and pursued
opportunities combining my programming knowledge with his research skills.&lt;/p>
&lt;p>One of my first automations regarding DeFi was related to the concept of
airdrop. In the realm of decentralized finance (DeFi), an airdrop is a common
process of tokens being distributed as rewards for user engagement. What I have
done was create a script that bought tokens and sent them to various accounts
of ours in the chain to increase the amount of airdrop that we could
potentially gain. Although the project detected and addressed the activity,
despite not gaining any rewards, this experience introduced me to valuable
blockchain &amp;amp; programming concepts (like the patterns often used in the web3.js
library and async/await mechanisms).&lt;/p>
&lt;p>We didn&amp;rsquo;t just stop there. We continued to explore opportunities that could be
automated and created programs to benefit from it. Our projects included
creating an automation tool for purchasing tokens in Initial Dex Offerings
(IDOs), developing an &lt;a href="https://github.com/kugurerdem/yakFarmer">automated reinvesting
bot&lt;/a> for the &lt;a href="https://yieldyak.com/">Yield Yak Auto
Compounder&lt;/a>, and crafting a &lt;a href="https://github.com/kugurerdem/DVFBot">market-making
bot&lt;/a> for &lt;a href="https://rhino.fi/">DeversiFi&lt;/a>,
now known as Rhino Finance. While our work might not have been at a
professional level, these projects proved sophisticated enough to enhance our
skills and grant us the autonomy to research and explore new opportunities.
This experience was truly rewarding, as it demonstrated how my programming
knowledge could be put to practical use.&lt;/p>
&lt;h1 id="my-first-job">My first Job&lt;/h1>
&lt;p>As I mentioned in the previous section, I began building software projects in
the pursuit of earning money even before working for someone else. This
unconventional approach eventually made acquiring my first job in the field
very easy. It all began when I was casually discussing my recent projects with
a friend, who was a CTIS student. He was surprised that I hadn&amp;rsquo;t applied for a
software development job given my knowledge and skills. He
recommended me to one of his friends who was thinking about creating a startup
to make the opportunities in DeFi more accessible to traditional investors. I
underwent technical and non-technical interviews with the CEO and soon started
working as a part-time remote software developer for them.&lt;/p>
&lt;p>My primary responsibility was a project I had proposed myself. I was tasked
with developing a data analytics panel and a data aggregation mechanism to
support our researchers in managing funds effectively. The autonomy I had over
this project was exciting, but it quickly became evident that the scope of the
project exceeded my experience, and the value that it would provide once it was
done didn&amp;rsquo;t seem like would be able to match the effort required. This project
became my firsthand encounter with the challenges of project development; time
estimation (see: &lt;a href="https://en.wikipedia.org/wiki/Hofstadter%27s_law">Hofstadter&amp;rsquo;s
Law&lt;/a>), increasing complexity
due to not knowing best practices (see: &lt;a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">No Silver
Bullet&lt;/a>), etc.&lt;/p>
&lt;p>I often found myself in a place where I would want to discuss the decisions I
take while developing the project. As a result, all these experiences
emphasized the importance of having a mentor (especially in your Junior
Developer periods) in navigating such complexities.&lt;/p>
&lt;h1 id="a-new-mentor">A new Mentor&lt;/h1>
&lt;p>While working at my first Job, I got the opportunity to meet with a very
&lt;a href="https://gwn.wtf/mortals.html">interesting person&lt;/a>, as he likes to call himself
as well &amp;ldquo;not your usual hacker&amp;rdquo;.&lt;/p>
&lt;p>In one of my previous essays &lt;a href="https://rugu.dev/en/blog/switching-to-archlinux/">Switching to Arch Linux&lt;/a> I mention how we met in a short passage as follows:&lt;/p>
&lt;blockquote>
&lt;p>About a year ago, I was invited to a pair coding session at the startup where
I was working. The developers were receiving consultancy from a strange
person. At one point, he took control of the screen sharing while reviewing
some of the pull requests that had been made to our codebase. When he shared
his screen, there was nothing but a black screen. Suddenly, a terminal screen
appeared with his keystrokes and he quickly began examining the codebase,
providing feedback on people’s code at a speed I had never seen before. He was
able to jump between different files in an instant, examining the diffs that
were made in different git commits.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>After seeing what I saw, I thought to myself, ‘If I were able to develop and
refactor code at that speed, I would save a lot of time, I could have spent
more time thinking about the actual stuff with as little friction as possible.
I want to have this power.’ So I have looked at his CV and realized that he was
knowledgeable on topics that many developers, including myself, struggle with.
Influenced by this, I started asking him (he was our consultant, after all) as
many questions as I could and focused on the resources he suggested and the
technologies he used.&lt;/p>&lt;/blockquote>
&lt;p>From that point on, I began to frequently ask him questions about software
development and seek his guidance. Luckily, he was usually more than willing to
answer my questions. At some point, we admired each other’s thinking style and
approach to software development so much that we even started working together
on several projects, which have continued for a year now.&lt;/p>
&lt;p>Whether it&amp;rsquo;s related to software development or not, I consider having a mentor
to be a significant advantage for improvement. When it comes to
learning basic concepts like programming languages and certain frameworks,
which are well-documented, having a mentor may not matter much. However, when
dealing with complex problems that require interpretation, experience, and a
nuanced approach, having a mentor, or at least an advisor, becomes crucial.&lt;/p>
&lt;p>I view mentors as a means of gaining refined knowledge, especially in areas
where I could potentially stumble into common pitfalls, which could otherwise
cost me a significant amount of time.&lt;/p>
&lt;p>Mentors, like all things, can be good or bad. A mentor is good if they:&lt;/p>
&lt;ul>
&lt;li>Want to teach you how to fish instead of merely handing you a fish. This
teaching approach may involve providing you with essential keywords to search
for solutions to your problems or, at times, demonstrating their methods
and approaches through concepts like pair programming, acquainting you with
effective problem-solving techniques.&lt;/li>
&lt;li>Give constructive criticism, and they do so by explaining the reasoning
behind their assessments of your achievements. This not only helps you
understand your areas of improvement but also encourages a deeper
comprehension of your work.&lt;/li>
&lt;li>Maintain an open attitude toward new questions. They create an environment
where you feel comfortable seeking guidance, knowing that they are genuinely
interested in assisting your growth and development.&lt;/li>
&lt;/ul>
&lt;p>In my journey as a software developer, From &lt;a href="http://yuempek.com">yuempek&lt;/a> to
&lt;a href="https://gwn.wtf/mortals.html">gwn&lt;/a>. Whenever I&amp;rsquo;ve come across a new concept or
a challenging problem that needs a unique solution, seeking the advice of more
experienced individuals has been incredibly helpful.&lt;/p>
&lt;p>The bottom line is if you want to improve your skills as a software developer
and do it quickly, having a mentor is essential. They offer insights,
perspectives, and expertise that can speed up your progress and help you
navigate the complexities of the field more effectively.&lt;/p>
&lt;h1 id="in-summary">In Summary&lt;/h1>
&lt;p>Here are some of the claims I would make based on my computer science journey
so far:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When it comes to learning stuff, don&amp;rsquo;t ever shy away from getting your hands
dirty. You cannot just improve just by watching people doing stuff, after
learning new concepts regarding any programming language or so always try to
think about what things you can achieve with the limited tools you have at
your hand. You will be surprised how many things can be accomplished even
with very fundamental stuff. My initial learning process regarding
programming was just like this, I would usually just try to execute one of
the random ideas that would come which can be accomplished just with the tool
I have learned.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Whether it&amp;rsquo;s a small or large project, vault them in a place where you can
access them later. If possible, you can even make them public on platforms
like GitHub or similar platforms. This will not only motivate you to expand
your collection of your programs but also enable you to track your
progress. It&amp;rsquo;s a highly satisfying experience to be able to see and showcase
the first programs you have written.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>If you are pursuing a degree other than computer science, it&amp;rsquo;s important not
to overestimate the value of a formal computer science education. While such
an education certainly has its advantages, like providing a strong foundation
in theoretical concepts and algorithms, as well as granting you a legitimate
certificate of graduation that signals your proficiency in these subjects,
not having a CS degree will not hinder your entry into the software industry.
As long as you can demonstrate your ability to complete tasks effectively,
people will be interested in hiring you. Whether you hold a degree or not, if
you possess the determination and passion required, doors will likely open
for you in the software industry.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Seek mentorship. Learn from those with refined experience. It will
significantly speed up your learning pace, especially when trying to
understand non-trivial stuff. However, keep in mind that the qualities of
your mentor also matter a lot. What I often see is that smart people, just
like in other areas as well, are usually better at picking the mentor of
their interests as well. It is not just important to have a mentor but also
to have a mentor that suits your taste, otherwise, a bad mentor with whom you
spent time might come at the cost of a better one.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>On the Importance of Typing Fast</title><link>https://rugu.dev/en/blog/on-typing-fast/</link><pubDate>Fri, 03 Mar 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/on-typing-fast/</guid><description>&lt;h2 id="typing-fast-is-important">Typing Fast is Important&lt;/h2>
&lt;p>It is often mentioned that the bottleneck in building software projects is not
one&amp;rsquo;s typing ability but ability to think clearly, and to design the
architecture effectively. Afterall, if typing speed was so essential to
programming, the time difference between rewriting an already existing project
with that of creating it from scratch would not be as high as it is.&lt;/p>
&lt;p>While I agree that typing speed is not essential to programming, I cannot
relate on how this fact is used by lots of people to justify their thinking of
typing fast being not important for the development process.&lt;/p>
&lt;p>The comparison made above between writing a project by scratch and rewriting an
already existing one, is good for showing that typing speed itself cannot be a
sufficient criteria for being a good developer. But what it does not show is
the unimportance of typing fast. In an an ideal setting, we could have compare
the development speed of developers who almost have the identical cognitive
abilities and experiences with different typing speeds. Unfortunately, I do not
heard any such experiments. So what I will do to show you the importance of
typing is instead will give you my arguments for it.&lt;/p>
&lt;p>First of all, programming is not just about thinking and designing systems but
also about debugging bugs, refactoring code, experimenting, and finally
researching or discussing stuff. One commonality of all these exercises is that
they are being iterative processes. Any programmer with a sufficient experience
would probably understand what this means. I remember countless times where I
needed to put debug logs lots of different places in the code, so that I can
exactly point source of the bugs. Same applies for experimenting with the tools
I am not used to so that I can get an idea about the inner workings of them.
Even searching stuff on the internet is often an iterative process where one
search leads to another prompt so that you can understand the related concepts.
All of these processes are usually proceed by trial and error, where in each
iteration you are somehow bottlenecked by the necessary actions that are needed
to be done in order to proceed to the next iteration. I think what typing speed
is esentially helpfull for is to reduce the time between those iterations.&lt;/p>
&lt;p>Yes, it&amp;rsquo;s essential to spend time on the architecture of the code, technology
stack, algorithms which will be used and requirement specifications. However
this doesn&amp;rsquo;t diminish the importance of typing fast. To the contrary, this just
makes typing fast more important because reducing the time spent on typing
would allow us to allocate more time to the essential works.&lt;/p>
&lt;p>&lt;strong>Even though typing itself is not so important, typing fast would still be one
of the most critical skills for developers because it reduces the time spent on
an insignificant task of typing.&lt;/strong>&lt;/p>
&lt;p>This reasoning is similar to what &lt;em>Hans Hoffman&lt;/em> once said:&lt;/p>
&lt;blockquote>
&lt;p>“The ability to simplify means to eliminate the unnecessary so that the
necessary may speak.”&lt;/p>&lt;/blockquote>
&lt;p>Typing is the way we actualize our ideas into real programs.&lt;/p>
&lt;p>If you do not have the faculties to realise your ideas at the rate they occur,
then they can accumulate to a point where you eventually reach a position where
you have to abandon some of them. Essentially, the faster you can transform
your ideas into code and test them, the less likely you are to experience an
overflow of untested and undeveloped ideas.&lt;/p>
&lt;h2 id="improving-typing-speed">Improving Typing Speed&lt;/h2>
&lt;p>Given that the typing speed of an average person is around 40 WPM, even
reaching 70-80 WPM would be a significant leap for most people. While pursuing
further improvements is still admirable, its important to be aware of that
there comes a point where the cost-effectiveness of pushing ones typing speed
diminishes, as the challenge escalates when you approach your personal limits.
Although having a personal average typing speed of 105 WPM on
&lt;a href="https://10fastfingers.com">10FastFingers&lt;/a>, I still like to exercise typing
speed. But I do this as a kind of challenge rather than an expectation of being
more productive.&lt;/p>
&lt;p>The main advice I would like to give the people who want to improve their
typing speed is to learn touch typing, a technique where you become accustomed
to using all 10 of your fingers to type without looking at the keyboard.
Although increasing typing speed without a common technique like touch typing
is indeed possible, I still like to recommend touch typing as it is a
standardised way of typing which its know-how can also be transferred to other
people in a consistent way. I personally used sites like
&lt;a href="https://keybr.com">keybr&lt;/a> and &lt;a href="https://www.typingclub.com/">typing club&lt;/a> while
I was initially learning touch typing, whereas I still use
&lt;a href="10fastfingers.com">10FastFingers&lt;/a> and &lt;a href="https://play.typeracer.com/">Type
Racer&lt;/a> for exercise.&lt;/p>
&lt;p>For developers, I also strongly recommend becoming accustomed to using the
English keyboard layout even their native language is not English. Most
programming languages are designed to use symbols readily available on a US
keyboard, such as {}[]/`\&amp;quot;&amp;rsquo;, which may not be as easily accessible on other
layouts, (e.g. Turkish layout).&lt;/p></description></item><item><title>My Experience on Switching to Arch Linux</title><link>https://rugu.dev/en/blog/switching-to-archlinux/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/switching-to-archlinux/</guid><description>&lt;p>About a year ago, I was invited to a pair coding session at the startup where I
was working. The developers were receiving consultancy from a strange person. At
one point, he took control of the screen sharing while reviewing some of the
pull requests that had been made to our codebase. When he shared his screen,
there was nothing but a black screen. Suddenly, a terminal screen appeared with
his keystrokes and he quickly began examining the codebase, providing feedback
on people&amp;rsquo;s code at a speed I had never seen before. He was able to jump between
different files in an instant, examining the diffs that were made in different
git commits.&lt;/p>
&lt;p>After seeing what I saw, I thought to myself, ‘If I were able to develop and
refactor code at that speed, I would save a lot of time, I could have spent
more time thinking about the actual stuff with as little friction as possible.
I want to have this power.’ So I have looked at &lt;a href="https://gwn.wtf/resume.html">his
CV&lt;/a> and realized that he was knowledgeable on
topics that many developers, including myself, struggle with. Influenced by
this, I started asking him (he was our consultant, after all) as many questions
as I could and focused on the resources he suggested and the technologies he
used.&lt;/p>
&lt;p>The inspiration from this hacker guy, combined with the very precious help from
a friend of mine who had a strong interest in operating systems (he uses Arch in
Qubes OS btw), being libre, and having control over his computer, led me to
switch to Arch Linux. I have also benefited a lot from discussions on hackernews
and from youtubers like Luke Smith which I also heard from the Qubes OS friend
of mine.&lt;/p>
&lt;p>In this post, I will first provide a brief overview of Linux and Arch Linux in
particular. Then, I will discuss my reflections on the past few months,
including the downsides and upsides of switching to Arch Linux. Finally, I will
explain the programs that I currently use in my workflow.&lt;/p>
&lt;h2 id="what-are-my-reasons-for-using-linux">What are my reasons for using Linux?&lt;/h2>
&lt;p>Unlike MacOS or Windows, Linux is a free and open-source operating system.
Perhaps you are already know that a vast majority of servers actually run on
Linux. Android, which is the operating system most phones use, is a specific
variant of the Linux Operating System. By these means, many developers already
seem to acknowledge the importance of learning Linux for practical reasons.
However, the controversy usually arises when it comes to using Linux on a
personal computer.&lt;/p>
&lt;p>For an average computer user, it typically doesn&amp;rsquo;t matter which operating
system they use as long as it doesn&amp;rsquo;t interfere with their daily tasks.&lt;/p>
&lt;p>However, in my case, as my views have become more nuanced, switching to Linux
has started to be more appealing.&lt;/p>
&lt;p>Here are some of the reasons why I prefer using Linux over MacOS or Windows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Both Windows and MacOS forces you their ecosystem by their updates. With each
update, its more likely that your Desktop Environment is cluttered by a new
application which Microsoft added and most likely you will not even use. Most
of the prebuilt stuff that are coming with Windows, I do not use at all. I
think the same argument also holds for MacOS, as using one of their apps
usually forces you to use other Apple apps and you to stick with their
environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since both MacOS and Windows are closed-source, we don&amp;rsquo;t know for sure what
they do under the scenes. Windows, for example had a builtin keylogger. If
you are curious about this, please type &amp;ldquo;Windows builtin keylogger&amp;rdquo; to your
favorite search engine. You will encounter many entries explaining how to
disable builtin keylogging. Although I do not have sufficient reasons to
claim that the Apple is doing the same thing, in practice, there is nothing
preventing these Close Sourced applications to do things like that besides
legal issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You need to pay some money in order to use both MacOS and Windows, whereas
Linux is essentially free. You can set up Linux on a computer with no cost at
all except some finite amount of time you will put in to learn things.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux is highly customizable and allows users to modify and tailor their
environment to meet their specific needs. In contrast, Windows and Mac OS are
more limited in terms of customization. This partly makes Linux a better
choice for users who aim to be a power user, a user who wants to have control
over their operating system and want to modify or customize it to meet their
specific needs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux offers a variety of versions that cater to the different needs of
various users, which is a significant advantage. These versions, known as
Linux distros, are essentially Linux systems with additional packages
specifically designed for certain users. I have not come across a similar
phenomenon in either MacOS or Windows. Linux provides more options than any
other proprietary operating system can offer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using a product often means more than just using it; it also means becoming
part of a group. Using Linux involves you in a community populated by hacker
minded people. And whether you indend it or not being part of a group
influences your habits. By immersing yourself in an environment filled with
more experienced individuals, you become more exposed to their knowledge and
ideas.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I understand that similar points could be made for the sake of Windows or
MacOS. Examples include Linux not being able to run some proprietary software
that these operating systems can, or Linux not being as convenient because you
often have to figure out most things yourself. I get that. However, all things
considered, the value that Linux provides to me exceeds the values that those
proprietary OSes provide.&lt;/p>
&lt;h2 id="what-is-unique-about-arch-linux">What is unique about Arch Linux?&lt;/h2>
&lt;p>Essentially, a Linux distro is a version of the Linux operating system that
comes packaged with additional software and tools.&lt;/p>
&lt;p>Oversimplicated, but an intuitive formula can be given as:&lt;/p>
&lt;p>&lt;code>DISTRIBUTION = KERNEL + SOME ADDITIONAL DEPENDENCIES&lt;/code>&lt;/p>
&lt;p>Theoretically, there&amp;rsquo;s nothing stopping you from doing in one Linux
distribution what you can do in another simply by altering the &amp;lsquo;SOME ADDITIONAL
DEPENDENCIES&amp;rsquo; part of the above formula. These additional dependencies can
range from package managers to init systems, as well as the initial software
that comes with the distribution.&lt;/p>
&lt;p>When you examine the variety of potential distributions one can select from, it
can be overwhelming. Why are there so many different Linux distributions? The
answer is because many people have different objectives when using an operating
system and therefore require different dependencies. Additionally, numerous
organizations and communities each have their distinct views on what
constitutes a good Linux distribution.&lt;/p>
&lt;p>While distros like Ubuntu focus on being more friendly and welcoming to new
users, some distros, like Debian focus on stability and some like Arch, focus
on a certain combination of being minimal, cutting-edge and active.&lt;/p>
&lt;p>To me the key principles that Arch Linux were emphasasising (which can also be
read in their &lt;a href="https://wiki.archlinux.org/title/Arch_Linux">wiki&lt;/a>), were more
appealing than the other mainstream distros available.&lt;/p>
&lt;p>Arch Linux essentially distinguishes itself as a minimalist distribution with a
very knowledgeable community. This fact partially explains why Arch is
considered one of the most cutting-edge distributions out there &amp;ndash; its active
community maintains available packages that Arch users can install through a
community-driven repository called the Arch User Repository.&lt;/p>
&lt;p>When you install Arch, you don&amp;rsquo;t receive anything but a virtual console and
specific programs that you instructed the Arch installer to download. Unlike
other distributions that build many packages into your system by default, which
might include several programs that you may need but at the cost of downloading
additional unwanted programs, Arch Linux instead puts the customization
responsibility on the user. Which allows you to install and focus solely on
what you need.&lt;/p>
&lt;h2 id="some-reflections">Some Reflections&lt;/h2>
&lt;h3 id="getting-used-to-it">Getting used to it&lt;/h3>
&lt;p>Switching from Windows to Arch Linux was really challenging as in Arch Linux,
it is you that needs to bear practically all responsibilities regarding your
computer. As a result of this transition, I began to appreciate all the
features we often take for granted; screen lockers, clipboard functionalities,
power management, multimedia keys, and so on. These functionalities are usually
managed by specific processes running unseen in the background. The average
computer user might not realize that these are distinct programs that need
setup. However, when you are building your system on a minimalist distribution,
your knowledge of such details tends to increase.&lt;/p>
&lt;h3 id="variety-of-solutions">Variety of Solutions&lt;/h3>
&lt;p>When you want to accomplish something on Linux, there are many alternative ways
to do it. As a result, you&amp;rsquo;re often left wondering, &amp;ldquo;which method/approach
should I choose first?&amp;rdquo; I think that these kinds of questions frequently
puzzled me. Here are some examples:&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;I am using X as a Window Server Protocol but I heard that Wayland is a newer
protocol, should I switch to it?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;A program called pipeware for audio handling is recommended but some suggest
something called pulseaudio, which one shall I use?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;Shall I use vim or neovim? I heard that vim is organized by one person whereas
neovim is more community driven.&amp;rsquo;&lt;/p>&lt;/blockquote>
&lt;p>Don&amp;rsquo;t misunderstand me. I&amp;rsquo;m not suggesting that these questions are irrelevant.
They indeed become meaningful when the minor differences between them begin to
matter. However, I believe that the best approach is to simply select a tool
that resolves the problem at hand without overthinking and keep progressing in
our work. It&amp;rsquo;s not beneficial for beginners to obsessively search for the
&amp;lsquo;best&amp;rsquo; program. Often, opting for a &amp;lsquo;sufficient&amp;rsquo; solution can also be the
&amp;lsquo;best&amp;rsquo; choice, considering the time you might waste finding a program.&lt;/p>
&lt;h3 id="some-beginner-mistakes">Some beginner mistakes&lt;/h3>
&lt;p>One common mistake I see among beginners, which I also made myself, is
attempting to do things without understanding them properly. This is especially
common among new Linux users who may wind up breaking their system by copying
and pasting commands from some forum. They tend to install programs that
perform the same functions and use different package managers that configure
multiple dependencies and configuration files. Which often leads to one manager
disrupting the changes made by the other, and so on.&lt;/p>
&lt;p>While it&amp;rsquo;s understandable that people may want to work in the same way they&amp;rsquo;re
accustomed to, this habit can also hinder them from getting used to the Linux
environment. For instance, instead of looking for programs that allow
installations through GUI-based applications, it&amp;rsquo;s more beneficial to
understand how to operate the native package manager through a terminal, learn
how to build things from source code using makefiles, and so on.&lt;/p>
&lt;p>The solutions people try to replicate their previous workspace can become
overly complicated. In these cases, it can be better not to solve the &amp;lsquo;problem&amp;rsquo;
in the first place. Hell, even I&amp;rsquo;ve been guilty of this myself. Since I loved to
use MSPaint, whenever I needed to draw something on Linux, I used to run a
Windows instance on QEMU and start MSPaint with a bash alias that I had set up.
In retrospect, this was a poor solution as it would have been just simpler to
switch to another drawing program designed for Linux.&lt;/p>
&lt;h3 id="dual-boot">Dual Boot&lt;/h3>
&lt;p>Setting up a dual-boot computer with Linux and Windows could seem like a good
choice for those interested in learning Linux. However based on my experience,
it is usually a bad idea. I made the error of installing Linux Mint alongside
Windows few years ago only to find myself frequently trying to synchronize my
files between the two systems. The maintenance that was required increased due
to the usage of both systems. Moreover, having the option to fall back on
Windows when facing issues prevented me from engaging with the Linux
environment enough. I could not learn how to troubleshoot and resolve issues on
myself.&lt;/p>
&lt;p>In my view, what I have described above is like attempting to learn swimming
while using a flotation device. It&amp;rsquo;s probably more effective to dive in and
learn the Linux operating system without relying on Windows as a safety
net.&lt;/p>
&lt;p>I guess the only valid reason for wanting to keep Windows installed on a
computer is to play video games or use specific programs that are not available
on Linux. Other than that, I suggest using Linux for most things you do.&lt;/p>
&lt;h3 id="gui-vs-terminal">GUI vs Terminal&lt;/h3>
&lt;p>Linux users often use terminal programs as they sometimes offer more
flexibility and power for certain tasks. The tasks are usually completed by
using command-line interface (CLI) programs which allows users to enter
commands to perform various actions. This is different from programs with a
graphical user interface (GUI) which usually have buttons and menus.&lt;/p>
&lt;p>Even when using GUIs, we often end up performing repetitive tasks manually. In
these kinds of situations, using a terminal instead of a GUI program can become
really handy. As simple CLI can easily be used programmatically. They can be
used in loops, conditionally, and to pipe the output from one program to
another. This approach can be a game-changer, especially for those who aspire
to become power users. Here are a few simple examples of where this approach
has saved me a significant amount of time:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Recently, I had a batch of 113 weirdly rotated images, but I was able to
rotate them all to the desired orientation using the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code> for file in *.jpg;
 do
 convert $file -rotate 90 rotated-$file;
 done
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>I used &lt;code>yt-dlp&lt;/code> to easily download youtube videos and playlists. It was one
of the most comfortable downloading experiences I had.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I used &lt;code>pdfcrop&lt;/code> for cropping PDF files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I changed the structure of folders that have many files in them by using
simple for loops alongside with &lt;code>mv cp rm&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Not to mention how much its easier to install packages that are on AUR or Arch
Repository compared to installing stuff in Windows.&lt;/p>
&lt;p>Overall, I strongly believe that the power of interacting with programs through
terminal can increase one&amp;rsquo;s overall productivity.&lt;/p>
&lt;h3 id="arch-linux-manuals">Arch Linux manuals&lt;/h3>
&lt;p>One caveat of using command-line interfaces (CLIs) is that it can be easy to
forget the specifics of the interface. As a result, it is essential for terminal
users to know how to quickly open and find the information they need in manual
pages in order to effectively use CLIs.&lt;/p>
&lt;p>Thankfully, most programs in Linux already have their own manuals available
through the &lt;code>man&lt;/code> command. When I need to use a certain utility or CLI function,
all I do is open the terminal through a keybinding that I have set up and type
&lt;code>man programname&lt;/code>, then I can quickly scroll through the manual page using VI
keybindings.&lt;/p>
&lt;p>Despite the fact that I am already acquinted by heart with some of the most
important flags and utilities of the programs that I use, I am also a lot better
(faster) at finding the stuff I need. It is just as much important, if not more
important, to be able to find the stuff you need by knowing them by heart.&lt;/p>
&lt;h2 id="current-workflow">Current Workflow&lt;/h2>
&lt;p>All of the configs for the apps below can be found from my &lt;a href="https://www.github.com/kugurerdem/dotfiles">dotfiles
github repository&lt;/a>.&lt;/p>
&lt;h3 id="window-manager">Window Manager&lt;/h3>
&lt;p>I do not use any desktop environments. I use a tiling Window Manager (WM), a
type of software that automatically arranges and resizes application windows in
a non-overlapping fashion, without the need for manual dragging and resizing.
The particular WM I use now is called &lt;code>dwm&lt;/code>, it is one of the tools that are
built by the hacker organization &lt;a href="https://suckless.org/">suckless&lt;/a>.&lt;/p>
&lt;p>Having switching to a tiling window manager, I now realize that how much of a
hassle was it to manually resize, drag, and select all my application windows.
Besides slowing me down, your average desktop environment also takes a lot of
space with their tilebars and etc. which I might want to use for seeing more
content.&lt;/p>
&lt;p>dwm comes with another program called &lt;code>dmenu&lt;/code> which enables you to select list
of options from the menu and do whatever you want with it. Initially dwm uses
dmenu to make the user easily open the programs they want to open through a
certain shortcut.&lt;/p>
&lt;p>I also use &lt;code>dwmblocks&lt;/code> to control the contents of the info bar on the top left.
I only show Volume, Battery, Memory and Date info there.&lt;/p>
&lt;h3 id="keyboard-layout">Keyboard Layout&lt;/h3>
&lt;p>Since I am from Turkey, I need to use Turkish characters in my daily life a lot
especially when interacting with my friends. The thing is I also find English
keyboard layout very productive, especially when it comes to coding and using
Vim. As a result, I needed a mechanism to be able to benefit from both of these
functionalities. For this, I have attached a shortcut to switch between TR and
US layouts.&lt;/p>
&lt;p>I have also swapped the Escape key with the CapsLock key as I use the escaping
functionality a lot when using VIM but do not use Caps Lock that much. It is
ergonomically a lot more preferable to use the CapsLock key for the Escape
functionality.&lt;/p>
&lt;p>Here are my settings in .xinitrc that imply those changes:&lt;/p>
&lt;pre tabindex="0">&lt;code># ~/.xinitrc

setxkbmap -option &amp;#34;caps:swapescape&amp;#34;
setxkbmap -model pc104 -layout us,tr -option grp:win_space_toggle
&lt;/code>&lt;/pre>&lt;p>I am also aware that I could have used &lt;code>tr-alt-q&lt;/code> layout which is basically an
English keyboard layout but if you use AltGr, keys like &lt;code>i,o,u,g,c&lt;/code> turns into
&lt;code>ı,ö,ü,ğ,ç&lt;/code>. The problem is that the only way I found was to change the keycode
tables through &lt;code>.Xmodmap&lt;/code> and it was buggy. I could not find a simple and clean
way to implement this layout&lt;/p>
&lt;h3 id="terminal--shell">Terminal &amp;amp; Shell&lt;/h3>
&lt;p>As terminal, I use &lt;code>st&lt;/code>, so far I have not seen particular advantage of using st
over other possible terminals that I could have use Alacritty or so, I just
needed a terminal that is lightweight and st was one of the possibilities I
could choose.&lt;/p>
&lt;p>As shell, I mostly use bash. But I understand using zsh is perfectly fine in a
personal environment as well. The only possible problem that I can think of zsh
is portability problem of the scripts written for it.&lt;/p>
&lt;h3 id="text-editing-and-programming">Text editing and programming&lt;/h3>
&lt;p>I use &lt;code>neovim&lt;/code> for almost all my works involving text. Neovim is a fork of Vim,
a highly configurable text editor that is designed to be extendible and also
efficient through the maximal use of keyboard both with macros and
shortcuts. It also comes with a powerful syntax highlighting engine and support
for a wide range of programming languages and file formats. As a dialect of Vim,
Neovim is fully compatible with Vim and uses the same configuration files and
command syntax, but it includes additional functionality and improvements that
are not available in the original Vim. dialect of vim.&lt;/p>
&lt;p>&amp;lsquo;Why use neovim instead of vim?&amp;rsquo; you might ask. Right now, it does not matter to
me whether I use vim or neovim since in both of these the things I want is
available. I use neovim because it was my first decision to go with it and
because of this I already have my files configured for neovim. The reason why I
initially chose neovim over vim was because of a certain workflow video I have
seen on youtube: Vim had not some the plugins that were used in the video. Later
on, I thought that video was full of unnecessary stuff so I gave up on it.&lt;/p>
&lt;p>Getting used to vim has significantly improved my speed and comfort when
programming as its command mode is very efficient for text navigation and
manipulation without even having to use mouse or moving your hand much.
When my friends see me getting done stuff in VIM they sometimes refer to it as
&amp;lsquo;black magic&amp;rsquo;, I like this a lot too. =)&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8n-ylg-pw6s?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;p>I should also mention that I have started to convert some of my .odt, .docx
files like diaries, logs, records to plain text just because it gives me to
flexibility to be able to edit/read them through simple text editors such as
vim.&lt;/p>
&lt;h3 id="terminal-multiplexer">Terminal Multiplexer&lt;/h3>
&lt;p>A terminal multiplexer is a software program that allows multiple terminal
sessions to be created, accessed, and controlled from a single terminal window
or console. It enables users to have multiple terminal sessions running
simultaneously, switch between them, and manage them easily.&lt;/p>
&lt;p>Since I use terminal for almost all the text work I do including software
development, it is, thus, ergonomically important for me to have a way to manage
different programs through one terminal.&lt;/p>
&lt;p>I do this thorugh a program called &lt;code>dvtm&lt;/code>, an alternative for tmux.&lt;/p>
&lt;p>Although I can split screens in vim when doing software development, it does not
give the same flexibity and ease of use the dvtm gives. There are some
programs you might want to see running simultaneously through one terminal
instead in addition to being able to edit/write files. You can do the latter in
vim, but the former is not so trivial to achieve.&lt;/p>
&lt;p>Since &lt;code>dvtm&lt;/code> already solves a problem that vim splits solve, I do not use vim
splits anyways.&lt;/p>
&lt;p>Here is an example showcase of dvtm:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/martanne/dvtm/gh-pages/screencast.gif#fullsize" alt="Example DVTM
Showcase">&lt;/p>
&lt;h3 id="file-manager">File Manager&lt;/h3>
&lt;p>I use &lt;code>ranger&lt;/code>, considering to switch to &lt;code>lf&lt;/code> but also don&amp;rsquo;t see a reason for it
since I am already used to &lt;code>ranger&lt;/code>.&lt;/p>
&lt;p>As far as I remember the only thing I have changed in ranger is some of the
priorities on which programs to use when openning files and to enable image
preview mechanism.&lt;/p>
&lt;p>Before getting used to ranger I was using a file manager with GUI named
&lt;code>dolphin&lt;/code>.&lt;/p>
&lt;h3 id="taking-notes">Taking Notes&lt;/h3>
&lt;p>I used lots of different note-taking apps such as Google Keep, Obsidian, Notion…
The problem is, almost all of these apps come with features that I do not use at
all, I mostly use note-taking applications as a way to remember the things that
I intended to do and for this, all I need is a way to sync my files between my
Phone and Computer. I used telegram for this purpose for a while, but since its
purpose is not this, I then looked for some alternatives.&lt;/p>
&lt;p>Meanwhile, I found &lt;code>gitjournal&lt;/code>, it is a git based note taking application with
a Mobile App. On my phone, I use its own application whereas on my computer, I
just use the &lt;code>gitjournal&lt;/code> script that I created that updates the notes by
automatically running commands such as &lt;code>git pull&lt;/code> &lt;code>git commit&lt;/code> &lt;code>git push&lt;/code> before
and after opening &lt;code>nvim&lt;/code> to change note files.&lt;/p>
&lt;p>The script for this can be found &lt;a href="https://github.com/kugurerdem/dotfiles/commit/8eb5c90e3db4fe4e553e9caea23607c88333c0ce#diff-b756de9b4e56d77950c9933ad361337ca35b7a23f479d34d9ac28a8ac29db497">here&lt;/a>.&lt;/p>
&lt;h3 id="password-management-and-otp">Password Management and OTP&lt;/h3>
&lt;p>&lt;code>pass&lt;/code> and &lt;code>pass-otp&lt;/code>&lt;/p>
&lt;p>Also there is a very simple script called &lt;code>passmenu&lt;/code> which uses dmenu to fetch
the passwords from pass easily. For passphrase aplet to open, you need &lt;code>gtk2&lt;/code> or
&lt;code>gtk3&lt;/code> though.&lt;/p>
&lt;h3 id="wifi--bluetooth">Wifi &amp;amp; Bluetooth&lt;/h3>
&lt;p>I use &lt;code>bluetoothctl&lt;/code> to connect bluetooth devices and use &lt;code>networkmanager&lt;/code> &amp;amp;
&lt;code>nmcli&lt;/code> to connect to the internet.&lt;/p>
&lt;h3 id="web-browser">Web Browser&lt;/h3>
&lt;p>I just use &lt;code>brave&lt;/code> like a normal human being. I like that it has a builtin
adblocker. Since I like moving with vim keybindings, I have also installed an
extension called &lt;a href="https://vimium.github.io/">vimium&lt;/a>. This extension helps you to navigate your browser
through vim keybindings.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t67Sn0RGK54?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Switching to Arch Linux was a challenging experience due to its steep learning
curve. I had to deal with many things that I always used, but never realized
that there were actual programs for those functionalities, such as clipboard,
screen locks, and opening screens. It took some time to get used to it, but now
I am so accustomed to using Arch Linux that I don&amp;rsquo;t even want to use Windows
anymore, except for cases like playing video games (which I also don&amp;rsquo;t do it
much these days).&lt;/p>
&lt;p>It&amp;rsquo;s also fun to challenge yourself and succesfully get over those challenges.&lt;/p></description></item></channel></rss>