<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on ugur</title><link>https://rugu.dev/en/tags/linux/</link><description>Recent content in Linux on ugur</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 23 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://rugu.dev/en/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Switching from Arch to NixOS</title><link>https://rugu.dev/en/blog/nixos/</link><pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/nixos/</guid><description>&lt;p>Iâ€™ve switched my desktop computer environment from Arch Linux to NixOS and used
it for about a month. I want to share my migration experience in case it might
interest or even help others.&lt;/p>
&lt;p>I also want to thank my friends &lt;a href="https://github.com/onsah">Onur&lt;/a> and
&lt;a href="https://github.com/mk-nlp">Mert&lt;/a> for encouraging me to switch to NixOS and
providing help.&lt;/p>
&lt;h1 id="why-migrate-from-arch-in-the-first-place">Why Migrate from Arch in the first place?&lt;/h1>
&lt;p>As someone who likes playing with tools to understand how they work as well as
to match my preferences and ergonomic choices, I find myself frequently changing many
configurations on my system. However, it didn&amp;rsquo;t take long for me to realize
that I need a system to save and possibly automate these configuration
processes to save time in the future.&lt;/p>
&lt;p>A common solution is to create a git repository, often called &amp;ldquo;dotfiles,&amp;rdquo; where
you can store your configurations and changes. This approach helps you avoid
repeating the process of configuring the same stuff over and over when
switching to new host machines. You turn your home folder into a repository
itself by initializing git directly inside of it, set the remote address, and
pull the content. You can check out what my dotfiles looked like before
switching to NixOS &lt;a href="https://github.com/kugurerdem/dotfiles">here&lt;/a>.&lt;/p>
&lt;p>Yet, even with this &amp;ldquo;dotfiles&amp;rdquo; approach there are some problems:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It&amp;rsquo;s very easy to forget to add some configuration files from your computer
to the repo because, in a typical Linux setup, these files are often
scattered in different locations, and unstaged changes can be easily
overlooked. This is especially true for the home directory, where there are
many unstaged files by default, making it easier to miss the ones you want to
stage. I&amp;rsquo;ve had several instances where I realized I was missing some
configuration files from my old computer in the Git repo after formatting my
PC.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Your dotfiles are likely to become more complex over time, requiring you to
document how to configure certain aspects to avoid confusion the next time
you set up your environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Even if your dotfiles repo is perfect, there&amp;rsquo;s no guarantee your system will
work the same when you rebuild it. Changes might have occurred to some of the
packages that your dotfiles repo relies on. As a result, you might encounter
issues regarding package upgrades or even conflicts. This problem isn&amp;rsquo;t
specific to rebuilding systems from a dotfiles repo but also affects regular
users who just want to just update their systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In addition to these problems mentioned, although not very often, I would
encounter situations in Arch Linux where I had to look up an error message, a
specific bug, or a non-backward compatible update for some of the apps I use.
Why? Because a system update broke something! While this may not seem like a
big problem, it can be very inconvenient if you&amp;rsquo;re in a hurry to get a job
done. In these kind of situations, I often had to either fix the problem
immediately or ignore it for a while and fix it later. Rolling back to the
state of my computer before the system update and postponing the task of
addressing the issue introduced by the update was not an option.&lt;/p>
&lt;p>This was the moment when I remembered that the tools (Nix and NixOS) my friends
had been recommending could be useful to me.&lt;/p>
&lt;h1 id="what-is-nixnixos">What is Nix/NixOS?&lt;/h1>
&lt;p>In essence, Nix is a package manager (there&amp;rsquo;s also a programming language
called Nix, which can sometimes be confusing). What sets Nix apart from its
alternatives is the way it manages packages and much more, including your home
folder. It is designed to provide reliable and reproducible package management
by isolating packages from each other in a smart way, preventing issues like
dependency conflicts. It also allows users to configure their computers using
its configuration files, through its programming language. So, you&amp;rsquo;re not
limited to downloading specific versions of packages with their dependencies,
but you can also configure other files on your computer, such as your dotfiles.&lt;/p>
&lt;p>NixOS, on the other hand, is a Linux distribution that uses Nix as its default
package manager. It integrates Nix&amp;rsquo;s features to manage the entire system at
both the system and user levels.&lt;/p>
&lt;p>To stay within the scope of this essay, which is to share my Nix and NixOS
experiences rather than explain their inner workings, I&amp;rsquo;ll stop here. However,
if you&amp;rsquo;re curious to learn more, I found &lt;a href="nix.dev">nix.dev&lt;/a> and
&lt;a href="nixos.wiki">nixos.wiki&lt;/a> particularly helpful for learning more about Nix and NixOS.&lt;/p>
&lt;h1 id="the-learning-curve-and-initial-trial">The Learning Curve and Initial Trial&lt;/h1>
&lt;p>Since NixOS fundamentally provides a much different user experience than most
of the other Linux distributions. I thought it would be wiser to first try
NixOS in a VM instead of directly trying to figure out stuff after installing
the distro on my host machine.&lt;/p>
&lt;p>I can confidently say that during this period of testing NixOS on a VM, I had
more troubles related to &lt;code>QEMU&lt;/code> and network bridging than problems related to
understanding how Nix works. The same goes for the installation process as
well, for some reason &lt;code>Ventoy&lt;/code> did not work properly with the NixOS iso image
while formatting the disk with &lt;code>dd&lt;/code> just worked fine.&lt;/p>
&lt;p>My initial goal was to make the VM I was running function exactly like my host
machine. This way, once I got NixOS working as intended in the VM, I could
replicate the setup on my host machine. I just needed to copy the configuration
files from the VM to the host machine and run a few Nix and NixOS commands. And
this was exactly what happened when I switched to my host machine. Easy peasy.
:)&lt;/p>
&lt;p>In the end, it took me around 4-5 days, working 2-3 hours each day, to learn
Nix and NixOS and replicate about 95% of my Arch dotfiles in the VM. When I
installed NixOS on my host computer, I simply cloned my nix-config repo, ran a
few commands as described, and boom! Everything was set up. :) It was such a
nice experience.&lt;/p>
&lt;h1 id="initial-impressions-and-experience">Initial Impressions and Experience&lt;/h1>
&lt;p>Here are my first impressions after using NixOS for about a month:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>At first, it feels like the knowledge you&amp;rsquo;ve gained from using conventional
FHS Linux distros becomes redundant, as you no longer configure programs by
directly modifying their configuration files in the file system. Instead, you
use the settings provided by NixOS and home-manager (a standardized Nix
program that allows users to manage and configure their home environments
through Nix files without root privileges).&lt;/p>
&lt;p>Because most configurations are done through the settings provided by the
packages, it initially seemed like this might prevent users from
understanding what&amp;rsquo;s happening under the hood.&lt;/p>
&lt;p>However, after using NixOS for a while, I realized this was not true. The
abstraction that NixOS packages provide doesn&amp;rsquo;t hide everything from the user
to avoid confusion with irrelevant details. Instead, it offers a way to
configure your environment the Nix way, so the resulting configuration files
are created by Nix.&lt;/p>
&lt;p>Most of the prior knowledge I had about configuring the programs I use was
easily transferable to the NixOS domain. Also, you don&amp;rsquo;t have to configure
every dotfile through Nix. In fact, home-manager allows you to source files
to desired destinations (see the home.file.*.source option for home-manager).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The documentation is not in great shape. The Nix wiki is certainly not as
good as the Arch wiki. Sometimes, it&amp;rsquo;s outdated, and other times, it&amp;rsquo;s not
detailed enough. This is why it&amp;rsquo;s very important to learn the Nix programming
language well so you can easily read the options available for a package you
want to install. Once you understand the fundamentals of the Nix programming
language, the code itself becomes the documentation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It is very confusing to have many alternatives for certain tasks. For
example, there are two different ways to install home-manager (standalone
installation vs. system modules), and how you install it affects the way you
interact with it later. Another example is Nix flakes, which are meant to
replace channels (an imperative way of downloading packages) but are still
considered an experimental feature by NixOS.&lt;/p>
&lt;p>To be fair, having to choose between many options is already an issue in
Linux (though many see this as a feature), and NixOS seems to have the same
problem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>From my experience so far, most Nix packages are designed to allow
self-contained setups and installations, including plugins. Here are a few
examples:&lt;/p>
&lt;ul>
&lt;li>When installing Firefox or Chromium browser packages, you can set which
plugins you want to be installed by default.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L137">Example&lt;/a>&lt;/li>
&lt;li>For my default password manager &lt;code>pass&lt;/code> (a standard UNIX password
manager), the plugins I wanted to integrate with pass can be defined
through a derivation attribute &lt;code>withExtensions&lt;/code>.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L52">Example&lt;/a>&lt;/li>
&lt;li>When installing the Minecraft launcher prismlauncher, you can declare
which JDKs should be available and used by the launcher by simply
overriding one of the package attributes.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/963f8a99545fa648e31edf085299fd96802e7d04/home-manager/home.nix#L81">Example&lt;/a>&lt;/li>
&lt;li>For Neovim, you can declare which dependencies and plugins you want to
install out of the box using the &lt;code>extraPackages&lt;/code> and &lt;code>plugins&lt;/code> options of the
home-manager&amp;rsquo;s &lt;code>programs.neovim&lt;/code> option.&lt;/li>
&lt;/ul>
&lt;p>These are just a few examples, and I am sure this is a standard for many
other programs. I really like this. Dependencies used only
by certain programs are self-contained within the program that will use them.&lt;/p>
&lt;p>You can even override some of the derivation attributes for the package you
are installing so that it is not installed from the git source repository
defined in the nixpkgs repo, but from your own source repository. I used this
technique to install and set up my window manager dwm using my own git fork
of dwm.
&lt;a href="https://github.com/kugurerdem/nix-config/blob/main/home-manager/dwm.nix#L4">Example&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The configuration files and the nix-config repo I now have are much
more elegant and simpler than my previous dotfiles repo. It&amp;rsquo;s much easier to
organize configurations in a modular way now.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The rollback mechanisms that Nix provides (combined with the ease of using
other people&amp;rsquo;s configurations) make trying new things (like different window
managers, desktop environments, programs, or even other people&amp;rsquo;s setups) very
appealing.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In Arch, there were a few instances where I had to use additional package
managers like &lt;code>yay&lt;/code> to access the AUR (Arch User Repository) alongside the
official Arch repository. I also recall compiling and building some tools,
like &lt;code>fzf&lt;/code>, from scratch. I haven&amp;rsquo;t needed to do any of this while using
NixOS.&lt;/p>
&lt;p>Overall, I&amp;rsquo;ve had a better experience with the Nix package manager itself
compared to using pacman and the AUR.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="to-conclude">To Conclude&lt;/h1>
&lt;p>In the end, I really think Nix and NixOS are very strong tools for achieving
reliable and reproducible system configurations and package management.
Unfortunately, though, I don&amp;rsquo;t think the benefits I&amp;rsquo;ve gotten in this one month
of using NixOS so far justified the cost I&amp;rsquo;ve initially spent and continue to
spend learning Nix and NixOS.&lt;/p>
&lt;p>But since I currently have no workload and enjoy the learning process, I
don&amp;rsquo;t see a serious problem here.&lt;/p>
&lt;p>Ultimately, whether the benefits of learning a particular technology outweigh
the costs depends on how much you take full advantage of its features. So, I
believe that if I experiment with more setups, try different programs, or start
managing servers with Nix, I will begin to see a better return on this
investment from what I have learned so far. :)&lt;/p></description></item><item><title>Debloating My Android Phone with ADB</title><link>https://rugu.dev/en/blog/debloat-with-adb/</link><pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/debloat-with-adb/</guid><description>&lt;p>My mother recently mentioned that her phone is continually opening certain
windows and prompting her to use services she doesnâ€™t need. After checking her
phone and doing some online research, I found out that many others have also
complained about this issue.&lt;/p>
&lt;p>Apparently, she was referring to pop-ups triggered by a pre-built program
called &amp;ldquo;SIM Menu&amp;rdquo;. This program basically allows operators to send
notifications and even generate pop-ups on your phone. And the frustrating part
is that most of these pop-ups seem to promote irrelevant services. If you
accidentally click &amp;ldquo;OK&amp;rdquo; when one of these pop-ups appears, you get charged by
your provider. It is a carefully set up trap designed to make you accidentally
subscribe to their unnecessary services and pay money.&lt;/p>
&lt;p>Since I prefer simplicity and like to have control over the tools I use. I was
already thinking about removing the bloatware on my phone that came
pre-installed and can&amp;rsquo;t be deleted through the interface. Hell, even some of
the fundamental apps, like a gallery or file manager, are filled with ads. It
gets on my nerves. So, I was already planning to learn how to remove these
bloatware and the situation I described earlier was the final straw for me.&lt;/p>
&lt;p>I&amp;rsquo;ve searched for tools to debloat Android phones and found &lt;code>adb&lt;/code>, Android
Developer Bridge. It&amp;rsquo;s basically a program which allows you to directly create
a shell session for your phone, similar to connecting to a remote server via
SSH (the only difference is that instead of connecting through the internet,
the connection is made via USB).&lt;/p>
&lt;p>Since Android is essentially an OS based on the Linux Kernel, the shell you
connect to will most likely be a variant of the sh dialect. So, for those who
are familiar with working in UNIX environments, its very convenient to remove
or install packages and customize your phone this way.&lt;/p>
&lt;p>In this essay, I document this process of removing bloatware from my phone
as a reference for future use. Hopefully, you find it helpful as well.&lt;/p>
&lt;h1 id="enabling-usb-debugging-mode">Enabling USB Debugging Mode&lt;/h1>
&lt;p>While it is possible to establish an ADB connection to your phone over Wi-Fi, I
chose to use ADB through a USB connection as using Wi-Fi involves certain
security risks. For instance, others on your Wi-Fi network could potentially
connect to your phone, especially if your phone doesn&amp;rsquo;t have proper security
settings. Not to mention that you would need to set up your phone using ADB
through a USB connection first before initiating a Wi-Fi connection anyways.
Which kind of makes using WiFi seem more pointless as the reasons for
preferring Wi-Fi over USB are usually just convenience or not having a USB
cable available.&lt;/p>
&lt;p>To connect your phone using adb via a USB connection, you need to enable USB
Debugging mode on your phone. I won&amp;rsquo;t go into the specifics of this process as
it varies by phone. But for my own phone, I simply navigated to the &amp;ldquo;About&amp;rdquo;
section and tapped &amp;ldquo;MIUI Version&amp;rdquo; multiple times to switch into Developer Mode.
Then, I searched for the &amp;ldquo;USB Debugging&amp;rdquo; option and enabled it.&lt;/p>
&lt;h1 id="connecting-to-your-phone-via-a-shell-session">Connecting to your phone via a Shell Session&lt;/h1>
&lt;p>Once you&amp;rsquo;ve installed &lt;code>adb&lt;/code>, you can view the manual by typing &lt;code>adb help&lt;/code>. You
can also refer to the &lt;a href="https://android.googlesource.com/platform/packages/modules/adb/&amp;#43;/refs/heads/master/docs/user/adb.1.md">online
documentation&lt;/a>.&lt;/p>
&lt;p>To connect to your phone via a shell session, simply type &lt;code>adb shell&lt;/code> and
you&amp;rsquo;re good to go. Most standard UNIX commands such as &lt;code>ls&lt;/code>, &lt;code>cat&lt;/code>, &lt;code>echo&lt;/code>,
&lt;code>grep&lt;/code>, and more can be used.&lt;/p>
&lt;p>Keep in mind that you don&amp;rsquo;t need to enter a shell session just to run specific
commands. You can also use the &lt;code>adb shell &amp;lt;cmd&amp;gt;&lt;/code> pattern to run your particular
command &lt;code>&amp;lt;cmd&amp;gt;&lt;/code>. This approach simply creates a shell session, executes your
command, and closes the session, while forwarding the stdout to your current
shell session.&lt;/p>
&lt;h1 id="uninstalling-bloatware">Uninstalling Bloatware&lt;/h1>
&lt;p>The Command Line Interface (CLI) tool used in Android for interaction with the
Android Package Manager is &lt;code>pm&lt;/code>. This tool basically allows you to list,
install, or uninstall software packages.&lt;/p>
&lt;p>To list the currently installed packages, execute the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages
&lt;/code>&lt;/pre>&lt;p>To view only the default apps on Android, enter this command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm list packages | grep &amp;#39;android&amp;#39;
&lt;/code>&lt;/pre>&lt;p>At this point, I would advice you to search for other unwanted pre-installed
apps known to come with your phone&amp;rsquo;s brand as well as android packages which
are known to be bloatware. Take a list of these apps for future reference so
you can easily repeat this process if you need it later again.&lt;/p>
&lt;p>To delete a specific app from your phone, you first need to identify its
package name. You can accomplish this by searching for it on the internet.
However if you can&amp;rsquo;t still find it, you should be able to locate the app&amp;rsquo;s &amp;ldquo;apk
package code&amp;rdquo; directly on your phone. This process can vary depending on the
phone you&amp;rsquo;re using, so I suggest you look up how to find package codes for
applications on your specific phone model.&lt;/p>
&lt;p>Also, be careful to not to delete anything critical for your system to work. Do
not delete a package if you are not sure that it is not something system
critical.&lt;/p>
&lt;p>Once you get the package.name, you can just run the following command in the
adb shell:&lt;/p>
&lt;pre tabindex="0">&lt;code>pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Here, &lt;code>--user 0&lt;/code> specifies the user for which you want to uninstall the
package. User 0 is typically the device&amp;rsquo;s default or primary user. When I have
run the command &lt;code>pm uninstall&lt;/code> without this, it would say package is
successfully deleted but the package would still remain on my phone.&lt;/p>
&lt;p>Keep in mind that we could have also used the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb shell pm uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;p>Or even:&lt;/p>
&lt;pre tabindex="0">&lt;code>adb uninstall --user 0 package.name
&lt;/code>&lt;/pre>&lt;h1 id="automating-the-process">Automating the Process&lt;/h1>
&lt;p>Remember that I told you to make a list of the packages you remove. This was
for to make the debloating process easier if you need to do it a second
time on your phone.&lt;/p>
&lt;p>I use a specific &lt;a href="https://github.com/kugurerdem/android-bloatwares">git
repository&lt;/a> for this purpose.
In this repository, I have a file named &lt;code>bloatwares.txt&lt;/code> that contains the
package names of certain prebuilt applications for Mi, Xiaomi, Android, and
third-party applications.&lt;/p>
&lt;p>If I ever need to debloat my phone, or anyone else&amp;rsquo;s, all I need to do is to
run the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>cat bloatwares.txt | xargs adb shell pm uninstall -k --user 0
&lt;/code>&lt;/pre>&lt;h1 id="conclusion">Conclusion&lt;/h1>
&lt;p>If you haven&amp;rsquo;t already started, I strongly encourage you to consider debloating
your phone. Install &lt;code>adb&lt;/code> on your computer, connect to your phone using it,
identify packages that seem unnecessary, and free your device from the unwanted
&amp;lsquo;guests.&amp;rsquo;&lt;/p>
&lt;p>Go ahead and take back at least a partial ownership of your phone by getting
rid of these intruders!&lt;/p></description></item><item><title>Understanding Keyboard Events Better</title><link>https://rugu.dev/en/blog/understanding-keyboard-events/</link><pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/understanding-keyboard-events/</guid><description>&lt;p>In this essay, I describe how I made a Node.js module to listen to keypresses
across the system on Linux machines using X. This experience helped me grasp
how the OS and Window Managers handle keyboard inputs, clarifying the reasons
behind an unexpected behavior I had encountered before, which I also mention in
the essay.&lt;/p>
&lt;p>If you&amp;rsquo;re interested in learning more about how keyboard events are handled,
this essay might be of interest to you.&lt;/p>
&lt;h2 id="an-issue-about-remapping-keys">An Issue About Remapping Keys&lt;/h2>
&lt;p>As a person who uses VIM for many things I do, seamlessly transitioning between
VIM modes is essential for my workflow. However, the default key for returning
back to normal VIM mode is the Escape key, necessitating me to remove my hands
from the keyboard in order to reach it.&lt;/p>
&lt;p>This is exactly why many VIM users, including myself, remap the Escape key to
the Caps Lock key. This adjustment is particularly beneficial for those who are
already accustomed to pressing the Shift key for uppercase characters.&lt;/p>
&lt;p>However, I&amp;rsquo;ve encountered a minor issue with this setting: Certain applications
seem indifferent to the remappings I&amp;rsquo;ve configured. Occasionally, when I press
the Caps Lock key, the operating system interprets it as an Escape key press,
while the specific program I&amp;rsquo;m using still recognizes it as the original
physical key pressed.&lt;/p>
&lt;p>I have encountered this problem both in my Linux computer, and Windows
computer. So the problem itself is OS-agnostic. However I&amp;rsquo;ve unintentionally
identified the reason behind this occasional discrepancy while I was working on
a recreational project.&lt;/p>
&lt;h2 id="linux-and-keyboard-events">Linux and Keyboard Events&lt;/h2>
&lt;p>Recently, a friend asked me if it&amp;rsquo;s possible to create macros using Node.js. I
confidently said, &amp;lsquo;Sure, it&amp;rsquo;s probably easy.&amp;rsquo; After a quick search, I found a
desktop automation library called robotJS and wrote a simple script where
specific keys are pressed regularly by the script.&lt;/p>
&lt;p>However, I started wondering if it was possible to trigger those keypresses
after a user presses a certain key. To achieve this, I needed to listen to
keypress events on a system-wide level. I searched for suitable Node.js
libraries for this task on Linux, but I couldn&amp;rsquo;t find one that worked
seamlessly.&lt;/p>
&lt;p>There were libraries like &lt;code>iohook&lt;/code>, but they seemed to lack support for
listening to Linux keyboard events in the latest versions of Node.js. Some
solutions only focused on capturing keyboard events within the current window
associated with the process.&lt;/p>
&lt;p>I stumbled upon a library called &lt;code>xev-emitter&lt;/code> but it didn&amp;rsquo;t provide what I
needed as it mainly dealt with listening to xevents of a specific X windows.&lt;/p>
&lt;p>After some contemplation, I decided to create my own Node.js module using
&lt;code>xinput&lt;/code> underneath, just for the sake of it and out of curiosity. &lt;code>xinput&lt;/code>
is a Linux tool that allows listening to keyboard events and provides an
interface to monitor events from connected keyboards.&lt;/p>
&lt;p>For instance, running the command &lt;code>xinput&lt;/code> gives me a list of available input
devices connected to my PC:&lt;/p>
&lt;pre tabindex="0">&lt;code>âŽ¡ Virtual core pointer 	id=2	[master pointer (3)]
âŽœ â†³ Virtual core XTEST pointer 	id=4	[slave pointer (2)]
âŽœ â†³ 2.4G Mouse 	id=10	[slave pointer (2)]
âŽœ â†³ 2.4G Mouse Consumer Control 	id=11	[slave pointer (2)]
âŽœ â†³ Synaptics TM3336-004 	id=14	[slave pointer (2)]
âŽ£ Virtual core keyboard 	id=3	[master keyboard (2)]
 â†³ Virtual core XTEST keyboard 	id=5	[slave keyboard (3)]
 â†³ Power Button 	id=6	[slave keyboard (3)]
 â†³ Video Bus 	id=7	[slave keyboard (3)]
 â†³ Power Button 	id=8	[slave keyboard (3)]
 â†³ 2.4G Mouse 	id=9	[slave keyboard (3)]
 â†³ 2.4G Mouse System Control 	id=12	[slave keyboard (3)]
 â†³ Ideapad extra buttons 	id=13	[slave keyboard (3)]
 â†³ AT Translated Set 2 keyboard 	id=15	[slave keyboard (3)]
 â†³ 2.4G Mouse Consumer Control 	id=16	[slave keyboard (3)]
&lt;/code>&lt;/pre>&lt;p>&lt;code>xinput&lt;/code> also has a command type that lets you listen to a specific input
device. For instance, if I use &lt;code>xinput test 15&lt;/code>, it listens to the device with
the specified ID 15. When I run the command &lt;code>xinput test 15&lt;/code> and then press the
&amp;lsquo;a,&amp;rsquo; &amp;rsquo;s,&amp;rsquo; and &amp;rsquo;d&amp;rsquo; keys on my keyboard, the output I get is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>key press 38
key release 38
key press 39
key release 39
key press 40
key release 40
&lt;/code>&lt;/pre>&lt;p>Now, with these two commands, we can iterate through all the input devices
related to keyboards and listen to them. We can create a script that first
lists the available input devices, filters them, and then runs the command
&lt;code>xinput test&lt;/code> for each of them.&lt;/p>
&lt;p>However, there is still a minor problem. How do we understand which key is
pressed just by looking at the numbers that xinput gave us? How can we know
that 38 stands for the key &amp;lsquo;a&amp;rsquo;?&lt;/p>
&lt;p>The numbers provided by xinput are known as X Key Codes. These codes represent
the physical keys pressed on the X layer. They are essentially similar to Linux
Input Event Codes, which the Linux Operating System generates to represent the
physical keys pressed. For reasons I&amp;rsquo;m not aware of, &lt;a href="https://wiki.archlinux.org/title/Keyboard_input#Identifying_keycodes_in_console">X Key Codes are
incremented by 8 compared to Linux
keycodes&lt;/a>&lt;/p>
&lt;p>Now, the challenge lies in making sense of each X Key Code. We need a mapping
between the X Key Codes and their corresponding keys. However, what they
correspond to can be configured by users. In fact, I&amp;rsquo;ve configured this using
the command &lt;code>setxkbmap -option &amp;quot;caps:swapescape&amp;quot;&lt;/code>. So, although pressing the
same keys on a physical keyboard will result in the same key codes, the
interpretation by your operating system or window management server can be
configured. Therefore, the correspondence of each keycode with what you&amp;rsquo;ve
pressed might vary from one environment to another. In the X protocol, you can
view the mapping between X Key Codes and X KeySyms by running the command
&lt;code>xmodmap -pke&lt;/code>.&lt;/p>
&lt;p>This is essentially what I did in the Node.js module I created to listen to
keyboard events using X:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Obtain the list of available input devices by running &lt;code>xinput&lt;/code> as a
subprocess.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Filter the devices; you don&amp;rsquo;t need all of them, just their IDs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>For each ID, run the command &lt;code>xinput test id&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the result of &lt;code>xmodmap -pke&lt;/code> to understand the semantic meaning assigned
to each physical keypress, known as a KeySym.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>If you&amp;rsquo;re curious, you can check out the module I created,
&lt;a href="https://github.com/kugurerdem/node-xinput-events">Node XInput Events&lt;/a>.&lt;/p>
&lt;h2 id="probably-a-better-approach">Probably a Better Approach&lt;/h2>
&lt;p>After implementing the module mentioned earlier, I discovered the existence of
a Linux utility called showkey that allows listening to pressed keys.&lt;/p>
&lt;p>It&amp;rsquo;s also possible to create a similar script using showkey under the hood. In
fact, this might have been a better approach compared to what I did above
because it operates on a more fundamental level than X.&lt;/p>
&lt;p>Similar to how we mapped between X Key Codes and their corresponding X Key
Codes, we could create a mapping between Linux Event Codes and their meanings
by examining the &lt;a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h">Linux source code for the input event
codes&lt;/a>&lt;/p>
&lt;p>Moreover, using scripts like xinput as subprocesses under our script might not
be the optimal approach for implementing an EventEmitter library to listen to
system-wide keypresses. The conventional way is likely to interact with the X
server using an X library. Unfortunately, I couldn&amp;rsquo;t build the nodeJS x11
library on my computer and chose not to delve into it much.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The series of experimental processes I went through greatly enhanced my
understanding of what happens behind the scenes when I simply press a key on my
physical keyboard.&lt;/p>
&lt;p>Returning to the initial scenario I described, when you&amp;rsquo;re developing a
program, you can act upon the values of key syms or key codes. While the key
codes might remain the same, the key syms (the meanings attached to those key
codes) can differ. It appears that some applications focus on key codes,
disregarding your local options.&lt;/p>
&lt;p>Essentially, at the kernel layer, there are only keycodes. Your operating
system assigns meaning to these keycodes through specific configuration files,
which you can either directly modify or use another program for modification
(in this case, the X Window Management server). Since it&amp;rsquo;s generally more
convenient to alter settings in the window management layer, most people
configure their preferences through utilities provided by their window manager,
and the window manager handles the interaction with the OS.&lt;/p>
&lt;p>This serves as a compelling example of how casually experimenting with things
can significantly contribute to one&amp;rsquo;s understanding of the core concepts they
are dealing with.&lt;/p></description></item><item><title>My Experience on Switching to Arch Linux</title><link>https://rugu.dev/en/blog/switching-to-archlinux/</link><pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate><guid>https://rugu.dev/en/blog/switching-to-archlinux/</guid><description>&lt;p>About a year ago, I was invited to a pair coding session at the startup where I
was working. The developers were receiving consultancy from a strange person. At
one point, he took control of the screen sharing while reviewing some of the
pull requests that had been made to our codebase. When he shared his screen,
there was nothing but a black screen. Suddenly, a terminal screen appeared with
his keystrokes and he quickly began examining the codebase, providing feedback
on people&amp;rsquo;s code at a speed I had never seen before. He was able to jump between
different files in an instant, examining the diffs that were made in different
git commits.&lt;/p>
&lt;p>After seeing what I saw, I thought to myself, â€˜If I were able to develop and
refactor code at that speed, I would save a lot of time, I could have spent
more time thinking about the actual stuff with as little friction as possible.
I want to have this power.â€™ So I have looked at &lt;a href="https://gwn.wtf/resume.html">his
CV&lt;/a> and realized that he was knowledgeable on
topics that many developers, including myself, struggle with. Influenced by
this, I started asking him (he was our consultant, after all) as many questions
as I could and focused on the resources he suggested and the technologies he
used.&lt;/p>
&lt;p>The inspiration from this hacker guy, combined with the very precious help from
a friend of mine who had a strong interest in operating systems (he uses Arch in
Qubes OS btw), being libre, and having control over his computer, led me to
switch to Arch Linux. I have also benefited a lot from discussions on hackernews
and from youtubers like Luke Smith which I also heard from the Qubes OS friend
of mine.&lt;/p>
&lt;p>In this post, I will first provide a brief overview of Linux and Arch Linux in
particular. Then, I will discuss my reflections on the past few months,
including the downsides and upsides of switching to Arch Linux. Finally, I will
explain the programs that I currently use in my workflow.&lt;/p>
&lt;h2 id="what-are-my-reasons-for-using-linux">What are my reasons for using Linux?&lt;/h2>
&lt;p>Unlike MacOS or Windows, Linux is a free and open-source operating system.
Perhaps you are already know that a vast majority of servers actually run on
Linux. Android, which is the operating system most phones use, is a specific
variant of the Linux Operating System. By these means, many developers already
seem to acknowledge the importance of learning Linux for practical reasons.
However, the controversy usually arises when it comes to using Linux on a
personal computer.&lt;/p>
&lt;p>For an average computer user, it typically doesn&amp;rsquo;t matter which operating
system they use as long as it doesn&amp;rsquo;t interfere with their daily tasks.&lt;/p>
&lt;p>However, in my case, as my views have become more nuanced, switching to Linux
has started to be more appealing.&lt;/p>
&lt;p>Here are some of the reasons why I prefer using Linux over MacOS or Windows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Both Windows and MacOS forces you their ecosystem by their updates. With each
update, its more likely that your Desktop Environment is cluttered by a new
application which Microsoft added and most likely you will not even use. Most
of the prebuilt stuff that are coming with Windows, I do not use at all. I
think the same argument also holds for MacOS, as using one of their apps
usually forces you to use other Apple apps and you to stick with their
environment.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Since both MacOS and Windows are closed-source, we don&amp;rsquo;t know for sure what
they do under the scenes. Windows, for example had a builtin keylogger. If
you are curious about this, please type &amp;ldquo;Windows builtin keylogger&amp;rdquo; to your
favorite search engine. You will encounter many entries explaining how to
disable builtin keylogging. Although I do not have sufficient reasons to
claim that the Apple is doing the same thing, in practice, there is nothing
preventing these Close Sourced applications to do things like that besides
legal issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You need to pay some money in order to use both MacOS and Windows, whereas
Linux is essentially free. You can set up Linux on a computer with no cost at
all except some finite amount of time you will put in to learn things.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux is highly customizable and allows users to modify and tailor their
environment to meet their specific needs. In contrast, Windows and Mac OS are
more limited in terms of customization. This partly makes Linux a better
choice for users who aim to be a power user, a user who wants to have control
over their operating system and want to modify or customize it to meet their
specific needs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Linux offers a variety of versions that cater to the different needs of
various users, which is a significant advantage. These versions, known as
Linux distros, are essentially Linux systems with additional packages
specifically designed for certain users. I have not come across a similar
phenomenon in either MacOS or Windows. Linux provides more options than any
other proprietary operating system can offer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Using a product often means more than just using it; it also means becoming
part of a group. Using Linux involves you in a community populated by hacker
minded people. And whether you indend it or not being part of a group
influences your habits. By immersing yourself in an environment filled with
more experienced individuals, you become more exposed to their knowledge and
ideas.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>I understand that similar points could be made for the sake of Windows or
MacOS. Examples include Linux not being able to run some proprietary software
that these operating systems can, or Linux not being as convenient because you
often have to figure out most things yourself. I get that. However, all things
considered, the value that Linux provides to me exceeds the values that those
proprietary OSes provide.&lt;/p>
&lt;h2 id="what-is-unique-about-arch-linux">What is unique about Arch Linux?&lt;/h2>
&lt;p>Essentially, a Linux distro is a version of the Linux operating system that
comes packaged with additional software and tools.&lt;/p>
&lt;p>Oversimplicated, but an intuitive formula can be given as:&lt;/p>
&lt;p>&lt;code>DISTRIBUTION = KERNEL + SOME ADDITIONAL DEPENDENCIES&lt;/code>&lt;/p>
&lt;p>Theoretically, there&amp;rsquo;s nothing stopping you from doing in one Linux
distribution what you can do in another simply by altering the &amp;lsquo;SOME ADDITIONAL
DEPENDENCIES&amp;rsquo; part of the above formula. These additional dependencies can
range from package managers to init systems, as well as the initial software
that comes with the distribution.&lt;/p>
&lt;p>When you examine the variety of potential distributions one can select from, it
can be overwhelming. Why are there so many different Linux distributions? The
answer is because many people have different objectives when using an operating
system and therefore require different dependencies. Additionally, numerous
organizations and communities each have their distinct views on what
constitutes a good Linux distribution.&lt;/p>
&lt;p>While distros like Ubuntu focus on being more friendly and welcoming to new
users, some distros, like Debian focus on stability and some like Arch, focus
on a certain combination of being minimal, cutting-edge and active.&lt;/p>
&lt;p>To me the key principles that Arch Linux were emphasasising (which can also be
read in their &lt;a href="https://wiki.archlinux.org/title/Arch_Linux">wiki&lt;/a>), were more
appealing than the other mainstream distros available.&lt;/p>
&lt;p>Arch Linux essentially distinguishes itself as a minimalist distribution with a
very knowledgeable community. This fact partially explains why Arch is
considered one of the most cutting-edge distributions out there &amp;ndash; its active
community maintains available packages that Arch users can install through a
community-driven repository called the Arch User Repository.&lt;/p>
&lt;p>When you install Arch, you don&amp;rsquo;t receive anything but a virtual console and
specific programs that you instructed the Arch installer to download. Unlike
other distributions that build many packages into your system by default, which
might include several programs that you may need but at the cost of downloading
additional unwanted programs, Arch Linux instead puts the customization
responsibility on the user. Which allows you to install and focus solely on
what you need.&lt;/p>
&lt;h2 id="some-reflections">Some Reflections&lt;/h2>
&lt;h3 id="getting-used-to-it">Getting used to it&lt;/h3>
&lt;p>Switching from Windows to Arch Linux was really challenging as in Arch Linux,
it is you that needs to bear practically all responsibilities regarding your
computer. As a result of this transition, I began to appreciate all the
features we often take for granted; screen lockers, clipboard functionalities,
power management, multimedia keys, and so on. These functionalities are usually
managed by specific processes running unseen in the background. The average
computer user might not realize that these are distinct programs that need
setup. However, when you are building your system on a minimalist distribution,
your knowledge of such details tends to increase.&lt;/p>
&lt;h3 id="variety-of-solutions">Variety of Solutions&lt;/h3>
&lt;p>When you want to accomplish something on Linux, there are many alternative ways
to do it. As a result, you&amp;rsquo;re often left wondering, &amp;ldquo;which method/approach
should I choose first?&amp;rdquo; I think that these kinds of questions frequently
puzzled me. Here are some examples:&lt;/p>
&lt;blockquote>
&lt;p>&amp;lsquo;I am using X as a Window Server Protocol but I heard that Wayland is a newer
protocol, should I switch to it?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;A program called pipeware for audio handling is recommended but some suggest
something called pulseaudio, which one shall I use?&amp;rsquo;&lt;/p>
&lt;p>&amp;lsquo;Shall I use vim or neovim? I heard that vim is organized by one person whereas
neovim is more community driven.&amp;rsquo;&lt;/p>&lt;/blockquote>
&lt;p>Don&amp;rsquo;t misunderstand me. I&amp;rsquo;m not suggesting that these questions are irrelevant.
They indeed become meaningful when the minor differences between them begin to
matter. However, I believe that the best approach is to simply select a tool
that resolves the problem at hand without overthinking and keep progressing in
our work. It&amp;rsquo;s not beneficial for beginners to obsessively search for the
&amp;lsquo;best&amp;rsquo; program. Often, opting for a &amp;lsquo;sufficient&amp;rsquo; solution can also be the
&amp;lsquo;best&amp;rsquo; choice, considering the time you might waste finding a program.&lt;/p>
&lt;h3 id="some-beginner-mistakes">Some beginner mistakes&lt;/h3>
&lt;p>One common mistake I see among beginners, which I also made myself, is
attempting to do things without understanding them properly. This is especially
common among new Linux users who may wind up breaking their system by copying
and pasting commands from some forum. They tend to install programs that
perform the same functions and use different package managers that configure
multiple dependencies and configuration files. Which often leads to one manager
disrupting the changes made by the other, and so on.&lt;/p>
&lt;p>While it&amp;rsquo;s understandable that people may want to work in the same way they&amp;rsquo;re
accustomed to, this habit can also hinder them from getting used to the Linux
environment. For instance, instead of looking for programs that allow
installations through GUI-based applications, it&amp;rsquo;s more beneficial to
understand how to operate the native package manager through a terminal, learn
how to build things from source code using makefiles, and so on.&lt;/p>
&lt;p>The solutions people try to replicate their previous workspace can become
overly complicated. In these cases, it can be better not to solve the &amp;lsquo;problem&amp;rsquo;
in the first place. Hell, even I&amp;rsquo;ve been guilty of this myself. Since I loved to
use MSPaint, whenever I needed to draw something on Linux, I used to run a
Windows instance on QEMU and start MSPaint with a bash alias that I had set up.
In retrospect, this was a poor solution as it would have been just simpler to
switch to another drawing program designed for Linux.&lt;/p>
&lt;h3 id="dual-boot">Dual Boot&lt;/h3>
&lt;p>Setting up a dual-boot computer with Linux and Windows could seem like a good
choice for those interested in learning Linux. However based on my experience,
it is usually a bad idea. I made the error of installing Linux Mint alongside
Windows few years ago only to find myself frequently trying to synchronize my
files between the two systems. The maintenance that was required increased due
to the usage of both systems. Moreover, having the option to fall back on
Windows when facing issues prevented me from engaging with the Linux
environment enough. I could not learn how to troubleshoot and resolve issues on
myself.&lt;/p>
&lt;p>In my view, what I have described above is like attempting to learn swimming
while using a flotation device. It&amp;rsquo;s probably more effective to dive in and
learn the Linux operating system without relying on Windows as a safety
net.&lt;/p>
&lt;p>I guess the only valid reason for wanting to keep Windows installed on a
computer is to play video games or use specific programs that are not available
on Linux. Other than that, I suggest using Linux for most things you do.&lt;/p>
&lt;h3 id="gui-vs-terminal">GUI vs Terminal&lt;/h3>
&lt;p>Linux users often use terminal programs as they sometimes offer more
flexibility and power for certain tasks. The tasks are usually completed by
using command-line interface (CLI) programs which allows users to enter
commands to perform various actions. This is different from programs with a
graphical user interface (GUI) which usually have buttons and menus.&lt;/p>
&lt;p>Even when using GUIs, we often end up performing repetitive tasks manually. In
these kinds of situations, using a terminal instead of a GUI program can become
really handy. As simple CLI can easily be used programmatically. They can be
used in loops, conditionally, and to pipe the output from one program to
another. This approach can be a game-changer, especially for those who aspire
to become power users. Here are a few simple examples of where this approach
has saved me a significant amount of time:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Recently, I had a batch of 113 weirdly rotated images, but I was able to
rotate them all to the desired orientation using the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code> for file in *.jpg;
 do
 convert $file -rotate 90 rotated-$file;
 done
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>I used &lt;code>yt-dlp&lt;/code> to easily download youtube videos and playlists. It was one
of the most comfortable downloading experiences I had.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I used &lt;code>pdfcrop&lt;/code> for cropping PDF files.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I changed the structure of folders that have many files in them by using
simple for loops alongside with &lt;code>mv cp rm&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Not to mention how much its easier to install packages that are on AUR or Arch
Repository compared to installing stuff in Windows.&lt;/p>
&lt;p>Overall, I strongly believe that the power of interacting with programs through
terminal can increase one&amp;rsquo;s overall productivity.&lt;/p>
&lt;h3 id="arch-linux-manuals">Arch Linux manuals&lt;/h3>
&lt;p>One caveat of using command-line interfaces (CLIs) is that it can be easy to
forget the specifics of the interface. As a result, it is essential for terminal
users to know how to quickly open and find the information they need in manual
pages in order to effectively use CLIs.&lt;/p>
&lt;p>Thankfully, most programs in Linux already have their own manuals available
through the &lt;code>man&lt;/code> command. When I need to use a certain utility or CLI function,
all I do is open the terminal through a keybinding that I have set up and type
&lt;code>man programname&lt;/code>, then I can quickly scroll through the manual page using VI
keybindings.&lt;/p>
&lt;p>Despite the fact that I am already acquinted by heart with some of the most
important flags and utilities of the programs that I use, I am also a lot better
(faster) at finding the stuff I need. It is just as much important, if not more
important, to be able to find the stuff you need by knowing them by heart.&lt;/p>
&lt;h2 id="current-workflow">Current Workflow&lt;/h2>
&lt;p>All of the configs for the apps below can be found from my &lt;a href="https://www.github.com/kugurerdem/dotfiles">dotfiles
github repository&lt;/a>.&lt;/p>
&lt;h3 id="window-manager">Window Manager&lt;/h3>
&lt;p>I do not use any desktop environments. I use a tiling Window Manager (WM), a
type of software that automatically arranges and resizes application windows in
a non-overlapping fashion, without the need for manual dragging and resizing.
The particular WM I use now is called &lt;code>dwm&lt;/code>, it is one of the tools that are
built by the hacker organization &lt;a href="https://suckless.org/">suckless&lt;/a>.&lt;/p>
&lt;p>Having switching to a tiling window manager, I now realize that how much of a
hassle was it to manually resize, drag, and select all my application windows.
Besides slowing me down, your average desktop environment also takes a lot of
space with their tilebars and etc. which I might want to use for seeing more
content.&lt;/p>
&lt;p>dwm comes with another program called &lt;code>dmenu&lt;/code> which enables you to select list
of options from the menu and do whatever you want with it. Initially dwm uses
dmenu to make the user easily open the programs they want to open through a
certain shortcut.&lt;/p>
&lt;p>I also use &lt;code>dwmblocks&lt;/code> to control the contents of the info bar on the top left.
I only show Volume, Battery, Memory and Date info there.&lt;/p>
&lt;h3 id="keyboard-layout">Keyboard Layout&lt;/h3>
&lt;p>Since I am from Turkey, I need to use Turkish characters in my daily life a lot
especially when interacting with my friends. The thing is I also find English
keyboard layout very productive, especially when it comes to coding and using
Vim. As a result, I needed a mechanism to be able to benefit from both of these
functionalities. For this, I have attached a shortcut to switch between TR and
US layouts.&lt;/p>
&lt;p>I have also swapped the Escape key with the CapsLock key as I use the escaping
functionality a lot when using VIM but do not use Caps Lock that much. It is
ergonomically a lot more preferable to use the CapsLock key for the Escape
functionality.&lt;/p>
&lt;p>Here are my settings in .xinitrc that imply those changes:&lt;/p>
&lt;pre tabindex="0">&lt;code># ~/.xinitrc

setxkbmap -option &amp;#34;caps:swapescape&amp;#34;
setxkbmap -model pc104 -layout us,tr -option grp:win_space_toggle
&lt;/code>&lt;/pre>&lt;p>I am also aware that I could have used &lt;code>tr-alt-q&lt;/code> layout which is basically an
English keyboard layout but if you use AltGr, keys like &lt;code>i,o,u,g,c&lt;/code> turns into
&lt;code>Ä±,Ã¶,Ã¼,ÄŸ,Ã§&lt;/code>. The problem is that the only way I found was to change the keycode
tables through &lt;code>.Xmodmap&lt;/code> and it was buggy. I could not find a simple and clean
way to implement this layout&lt;/p>
&lt;h3 id="terminal--shell">Terminal &amp;amp; Shell&lt;/h3>
&lt;p>As terminal, I use &lt;code>st&lt;/code>, so far I have not seen particular advantage of using st
over other possible terminals that I could have use Alacritty or so, I just
needed a terminal that is lightweight and st was one of the possibilities I
could choose.&lt;/p>
&lt;p>As shell, I mostly use bash. But I understand using zsh is perfectly fine in a
personal environment as well. The only possible problem that I can think of zsh
is portability problem of the scripts written for it.&lt;/p>
&lt;h3 id="text-editing-and-programming">Text editing and programming&lt;/h3>
&lt;p>I use &lt;code>neovim&lt;/code> for almost all my works involving text. Neovim is a fork of Vim,
a highly configurable text editor that is designed to be extendible and also
efficient through the maximal use of keyboard both with macros and
shortcuts. It also comes with a powerful syntax highlighting engine and support
for a wide range of programming languages and file formats. As a dialect of Vim,
Neovim is fully compatible with Vim and uses the same configuration files and
command syntax, but it includes additional functionality and improvements that
are not available in the original Vim. dialect of vim.&lt;/p>
&lt;p>&amp;lsquo;Why use neovim instead of vim?&amp;rsquo; you might ask. Right now, it does not matter to
me whether I use vim or neovim since in both of these the things I want is
available. I use neovim because it was my first decision to go with it and
because of this I already have my files configured for neovim. The reason why I
initially chose neovim over vim was because of a certain workflow video I have
seen on youtube: Vim had not some the plugins that were used in the video. Later
on, I thought that video was full of unnecessary stuff so I gave up on it.&lt;/p>
&lt;p>Getting used to vim has significantly improved my speed and comfort when
programming as its command mode is very efficient for text navigation and
manipulation without even having to use mouse or moving your hand much.
When my friends see me getting done stuff in VIM they sometimes refer to it as
&amp;lsquo;black magic&amp;rsquo;, I like this a lot too. =)&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/8n-ylg-pw6s?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;p>I should also mention that I have started to convert some of my .odt, .docx
files like diaries, logs, records to plain text just because it gives me to
flexibility to be able to edit/read them through simple text editors such as
vim.&lt;/p>
&lt;h3 id="terminal-multiplexer">Terminal Multiplexer&lt;/h3>
&lt;p>A terminal multiplexer is a software program that allows multiple terminal
sessions to be created, accessed, and controlled from a single terminal window
or console. It enables users to have multiple terminal sessions running
simultaneously, switch between them, and manage them easily.&lt;/p>
&lt;p>Since I use terminal for almost all the text work I do including software
development, it is, thus, ergonomically important for me to have a way to manage
different programs through one terminal.&lt;/p>
&lt;p>I do this thorugh a program called &lt;code>dvtm&lt;/code>, an alternative for tmux.&lt;/p>
&lt;p>Although I can split screens in vim when doing software development, it does not
give the same flexibity and ease of use the dvtm gives. There are some
programs you might want to see running simultaneously through one terminal
instead in addition to being able to edit/write files. You can do the latter in
vim, but the former is not so trivial to achieve.&lt;/p>
&lt;p>Since &lt;code>dvtm&lt;/code> already solves a problem that vim splits solve, I do not use vim
splits anyways.&lt;/p>
&lt;p>Here is an example showcase of dvtm:&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/martanne/dvtm/gh-pages/screencast.gif#fullsize" alt="Example DVTM
Showcase">&lt;/p>
&lt;h3 id="file-manager">File Manager&lt;/h3>
&lt;p>I use &lt;code>ranger&lt;/code>, considering to switch to &lt;code>lf&lt;/code> but also don&amp;rsquo;t see a reason for it
since I am already used to &lt;code>ranger&lt;/code>.&lt;/p>
&lt;p>As far as I remember the only thing I have changed in ranger is some of the
priorities on which programs to use when openning files and to enable image
preview mechanism.&lt;/p>
&lt;p>Before getting used to ranger I was using a file manager with GUI named
&lt;code>dolphin&lt;/code>.&lt;/p>
&lt;h3 id="taking-notes">Taking Notes&lt;/h3>
&lt;p>I used lots of different note-taking apps such as Google Keep, Obsidian, Notionâ€¦
The problem is, almost all of these apps come with features that I do not use at
all, I mostly use note-taking applications as a way to remember the things that
I intended to do and for this, all I need is a way to sync my files between my
Phone and Computer. I used telegram for this purpose for a while, but since its
purpose is not this, I then looked for some alternatives.&lt;/p>
&lt;p>Meanwhile, I found &lt;code>gitjournal&lt;/code>, it is a git based note taking application with
a Mobile App. On my phone, I use its own application whereas on my computer, I
just use the &lt;code>gitjournal&lt;/code> script that I created that updates the notes by
automatically running commands such as &lt;code>git pull&lt;/code> &lt;code>git commit&lt;/code> &lt;code>git push&lt;/code> before
and after opening &lt;code>nvim&lt;/code> to change note files.&lt;/p>
&lt;p>The script for this can be found &lt;a href="https://github.com/kugurerdem/dotfiles/commit/8eb5c90e3db4fe4e553e9caea23607c88333c0ce#diff-b756de9b4e56d77950c9933ad361337ca35b7a23f479d34d9ac28a8ac29db497">here&lt;/a>.&lt;/p>
&lt;h3 id="password-management-and-otp">Password Management and OTP&lt;/h3>
&lt;p>&lt;code>pass&lt;/code> and &lt;code>pass-otp&lt;/code>&lt;/p>
&lt;p>Also there is a very simple script called &lt;code>passmenu&lt;/code> which uses dmenu to fetch
the passwords from pass easily. For passphrase aplet to open, you need &lt;code>gtk2&lt;/code> or
&lt;code>gtk3&lt;/code> though.&lt;/p>
&lt;h3 id="wifi--bluetooth">Wifi &amp;amp; Bluetooth&lt;/h3>
&lt;p>I use &lt;code>bluetoothctl&lt;/code> to connect bluetooth devices and use &lt;code>networkmanager&lt;/code> &amp;amp;
&lt;code>nmcli&lt;/code> to connect to the internet.&lt;/p>
&lt;h3 id="web-browser">Web Browser&lt;/h3>
&lt;p>I just use &lt;code>brave&lt;/code> like a normal human being. I like that it has a builtin
adblocker. Since I like moving with vim keybindings, I have also installed an
extension called &lt;a href="https://vimium.github.io/">vimium&lt;/a>. This extension helps you to navigate your browser
through vim keybindings.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
 &lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; fullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/t67Sn0RGK54?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
 &lt;/div>

&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Switching to Arch Linux was a challenging experience due to its steep learning
curve. I had to deal with many things that I always used, but never realized
that there were actual programs for those functionalities, such as clipboard,
screen locks, and opening screens. It took some time to get used to it, but now
I am so accustomed to using Arch Linux that I don&amp;rsquo;t even want to use Windows
anymore, except for cases like playing video games (which I also don&amp;rsquo;t do it
much these days).&lt;/p>
&lt;p>It&amp;rsquo;s also fun to challenge yourself and succesfully get over those challenges.&lt;/p></description></item></channel></rss>